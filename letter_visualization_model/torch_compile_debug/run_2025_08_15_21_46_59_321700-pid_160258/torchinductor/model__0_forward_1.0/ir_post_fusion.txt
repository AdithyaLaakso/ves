op0_op1_op2_op3_op4_op6: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op2_op3_op4_op6.writes = 
    [   MemoryDep('buf0', c0, {c0: 20480}),
        MemoryDep('buf1', c0, {c0: 20}),
        MemoryDep('buf2', c0, {c0: 20}),
        MemoryDep('buf3', c0, {c0: 20}),
        MemoryDep('buf4', c0, {c0: 20}),
        MemoryDep('buf6', c0, {c0: 20})]
op0_op1_op2_op3_op4_op6.unmet_dependencies = []
op0_op1_op2_op3_op4_op6.met_dependencies = 
    [   MemoryDep('primals_1', c0, {c0: 20480}),
        MemoryDep('primals_2', c0, {c0: 20480})]
op0_op1_op2_op3_op4_op6.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
    buf6.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op0_op1_op2_op3_op4_op6.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 20480})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('primals_2', c0, {c0: 20480})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (20480, 1)
op0.sizes = ([20480], [])
primals_2_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
class op0_loop_body:
    var_ranges = {p0: 20480}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        sigmoid = ops.sigmoid(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, sigmoid, None)
        return store
op0_op1_op2_op3_op4_op6.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 20})]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 20480})]
op1.met_dependencies = [MemoryDep('primals_1', c0, {c0: 20480})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (20, 1024)
op1.sizes = ([20], [1024])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
class op1_loop_body:
    var_ranges = {p0: 20, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('primals_1', get_index_1)
        mul = ops.mul(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1', get_index_2, reduction)
        return None
op0_op1_op2_op3_op4_op6.snodes[2] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 20})]
op2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 20480})]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (20, 1024)
op2.sizes = ([20], [1024])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
class op2_loop_body:
    var_ranges = {p0: 20, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, reduction)
        return None
op0_op1_op2_op3_op4_op6.snodes[3] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 20})]
op3.unmet_dependencies = []
op3.met_dependencies = [MemoryDep('primals_1', c0, {c0: 20480})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (20, 1024)
op3.sizes = ([20], [1024])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
class op3_loop_body:
    var_ranges = {p0: 20, p1: 1024}
    index0 = 1024*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, reduction)
        return None
op0_op1_op2_op3_op4_op6.snodes[4] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 20})]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 20}), MemoryDep('buf3', c0, {c0: 20})]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (20, 1)
op4.sizes = ([20], [])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
class op4_loop_body:
    var_ranges = {p0: 20}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(add, constant)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, add_1, None)
        return store
op0_op1_op2_op3_op4_op6.snodes[5] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 20})]
op6.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 20}), MemoryDep('buf4', c0, {c0: 20})]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
    buf6.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (20, 1)
op6.sizes = ([20], [])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
class op6_loop_body:
    var_ranges = {p0: 20}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_1)
        truediv = ops.truediv(add, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        truediv_1 = ops.truediv(truediv, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf6', get_index_3, truediv_1, None)
        return store


op5_op7: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op5_op7.writes = [MemoryDep('buf5', 0, {}), MemoryDep('buf7', 0, {})]
op5_op7.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 20}), MemoryDep('buf4', c0, {c0: 20})]
op5_op7.met_dependencies = []
op5_op7.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf7.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op5_op7.snodes[0] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 0, {})]
op5.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 20}), MemoryDep('buf4', c0, {c0: 20})]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1, 20)
op5.sizes = ([], [20])
buf1_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 20])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1], stride=[1, 1])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op5_loop_body:
    var_ranges = {p0: 20}
    index0 = p0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        constant = ops.constant(2.0, torch.float32)
        mul = ops.mul(load, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(mul, constant_1)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_1)
        truediv = ops.truediv(add, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', truediv)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_2, reduction)
        return None
op5_op7.snodes[1] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 0, {})]
op7.unmet_dependencies = [MemoryDep('buf5', 0, {})]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
    buf7.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1, 1)
op7.sizes = ([], [])
buf5_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
buf7_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
class op7_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        constant = ops.constant(20.0, torch.float32)
        truediv = ops.truediv(load, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_1, truediv)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, sub, None)
        return store



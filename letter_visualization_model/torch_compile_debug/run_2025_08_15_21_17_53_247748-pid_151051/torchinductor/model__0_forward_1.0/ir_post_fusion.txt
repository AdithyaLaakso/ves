op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 327680})]
op0.unmet_dependencies = []
op0.met_dependencies = [   MemoryDep('primals_1', 16384*c0 + 512*((c1//32)) + 128*((c2//4)) + 4*(ModularIndexing(c1, 1, 32)) + (ModularIndexing(c2, 1, 4)), {c0: 20, c1: 1024, c2: 16})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 16], stride=[16384, 16, 1])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (327680, 1)
op0.sizes = ([20, 1024, 16], [])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf0_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 16], stride=[16384, 16, 1])
class op0_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 16}
    index0 = 4*((p1//32)) + ((p2//4))
    index1 = 128
    index2 = 4*(ModularIndexing(p1, 1, 32)) + (ModularIndexing(p2, 1, 4))
    index3 = 16384*p0 + 512*((p1//32)) + 128*((p2//4)) + 4*(ModularIndexing(p1, 1, 32)) + (ModularIndexing(p2, 1, 4))
    index4 = 16384*p0 + 16*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('primals_1', get_index_4)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf0', get_index_5, to_dtype, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 12288})]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('primals_2', c0, {c0: 12288})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda:0', torch.float16, size=[768, 16], stride=[16, 1])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (12288, 1)
op1.sizes = ([12288], [])
primals_2_layout = FixedLayout('cuda:0', torch.float32, size=[768, 16], stride=[16, 1])
buf1_layout = FixedLayout('cuda:0', torch.float16, size=[768, 16], stride=[16, 1])
class op1_loop_body:
    var_ranges = {p0: 12288}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_2', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf1', get_index_1, to_dtype, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.mm


op3_op4_op6: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op3_op4_op6.writes = 
    [   MemoryDep('buf3', c0, {c0: 20480}),
        MemoryDep('buf4', c0, {c0: 20480}),
        MemoryDep('buf6', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op3_op4_op6.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 15728640})]
op3_op4_op6.met_dependencies = 
    [   MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432}),
        MemoryDep('primals_5', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 20480, c1: 768})]
op3_op4_op6.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op3_op4_op6.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 20480})]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 15728640})]
op3.met_dependencies = 
    [   MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (20480, 768)
op3.sizes = ([20, 1024], [768])
buf2_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op3_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf3', get_index_3, getitem)
        return store_reduction
op3_op4_op6.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 20480})]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 15728640})]
op4.met_dependencies = 
    [   MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (20480, 768)
op4.sizes = ([20, 1024], [768])
buf2_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op4_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem_1)
        return store_reduction
op3_op4_op6.snodes[2] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op6.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 15728640}),
        MemoryDep('buf3', c0, {c0: 20480}),
        MemoryDep('buf4', c0, {c0: 20480})]
op6.met_dependencies = 
    [   MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432}),
        MemoryDep('primals_5', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 20480, c1: 768})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (15728640, 1)
op6.sizes = ([20, 1024, 768], [])
buf2_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf3_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf6_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op6_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 1024*p0 + p1
    index4 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf3', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf4', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('primals_5', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_6', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        to_dtype_2 = ops.to_dtype(add_3, torch.float16, src_dtype = torch.float32)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf6', get_index_7, to_dtype_2, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1769472})]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('primals_8', c0, {c0: 1769472})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1769472, 1)
op7.sizes = ([1769472], [])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf7_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op7_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_8', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf7', get_index_1, to_dtype, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.mm


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 47185920})]
op9.unmet_dependencies = [MemoryDep('buf8', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op9.met_dependencies = [MemoryDep('primals_7', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (47185920, 1)
op9.sizes = ([3, 20480, 768], [])
buf8_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf9_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op9_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_7', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf9', get_index_2, add, None)
        return store


op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 15728640})]
op10.unmet_dependencies = [MemoryDep('buf9', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (15728640, 1)
op10.sizes = ([1024, 20, 768], [])
buf9_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf10_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op10_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf10', get_index_1, load, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 15728640})]
op11.unmet_dependencies = [   MemoryDep('buf9', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (15728640, 1)
op11.sizes = ([1024, 20, 768], [])
buf9_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf11_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op11_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 15728640})]
op12.unmet_dependencies = [   MemoryDep('buf9', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (15728640, 1)
op12.sizes = ([1024, 20, 768], [])
buf9_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf12_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op12_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


op13: ExternKernelSchedulerNode(FallbackKernel)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = 
    [   StarDep(name='buf10', mode=None),
        StarDep(name='buf11', mode=None),
        StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='fwd_rng_state_0', mode=None)]
op13.outputs = [
    buf13: FallbackKernel
    buf13.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op14: ExternKernelSchedulerNode(MultiOutput)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: MultiOutput
    buf14.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = None


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 589824})]
op19.unmet_dependencies = []
op19.met_dependencies = [MemoryDep('primals_9', c0, {c0: 589824})]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (589824, 1)
op19.sizes = ([589824], [])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op19_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_9', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf19', get_index_1, to_dtype, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf14', mode=None), StarDep(name='buf19', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21_op22_op23_op25: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op21_op22_op23_op25.writes = 
    [   MemoryDep('buf21', c0, {c0: 15728640}),
        MemoryDep('buf22', c0, {c0: 20480}),
        MemoryDep('buf23', c0, {c0: 20480}),
        MemoryDep('buf25', c0, {c0: 15728640})]
op21_op22_op23_op25.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 15728640}),
        MemoryDep('buf20', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op21_op22_op23_op25.met_dependencies = 
    [   MemoryDep('primals_10', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_11', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_12', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op21_op22_op23_op25.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf22.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op21_op22_op23_op25.snodes[0] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 15728640})]
op21.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 15728640}),
        MemoryDep('buf20', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op21.met_dependencies = 
    [   MemoryDep('primals_10', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf21.users = [
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (15728640, 1)
op21.sizes = ([20, 1024, 768], [])
buf2_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf20_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_10_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op21_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf20', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_10', get_index_4)
        to_dtype_2 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        add_3 = ops.add(add_1, to_dtype_3)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_3, None)
        return store
op21_op22_op23_op25.snodes[1] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 20480})]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 15728640})]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf22.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (20480, 768)
op22.sizes = ([20480], [768])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op22_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, getitem)
        return store_reduction
op21_op22_op23_op25.snodes[2] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 20480})]
op23.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 15728640})]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf23.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (20480, 768)
op23.sizes = ([20480], [768])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op23_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf23', get_index_1, getitem_1)
        return store_reduction
op21_op22_op23_op25.snodes[3] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 15728640})]
op25.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 15728640}),
        MemoryDep('buf22', c0, {c0: 20480}),
        MemoryDep('buf23', c0, {c0: 20480})]
op25.met_dependencies = 
    [   MemoryDep('primals_11', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_12', c1, {c0: 20480, c1: 768})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (15728640, 1)
op25.sizes = ([20480, 768], [])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf22_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf25_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op25_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf22', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf23', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_11', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_12', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf25', get_index_5, to_dtype, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 1179648})]
op26.unmet_dependencies = []
op26.met_dependencies = [MemoryDep('primals_13', c0, {c0: 1179648})]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (1179648, 1)
op26.sizes = ([1179648], [])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf26_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op26_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf26', get_index_1, to_dtype, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf25', mode=None), StarDep(name='buf26', mode=None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 31457280})]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 31457280})]
op28.met_dependencies = [MemoryDep('primals_14', c1, {c0: 20480, c1: 1536})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (31457280, 1)
op28.sizes = ([20480, 1536], [])
buf27_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf28_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op28_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_14', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf28', get_index_4, to_dtype_4, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 1179648})]
op29.unmet_dependencies = []
op29.met_dependencies = [MemoryDep('primals_15', c0, {c0: 1179648})]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (1179648, 1)
op29.sizes = ([1179648], [])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf29_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op29_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_15', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf29', get_index_1, to_dtype, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None), StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: ExternKernelSchedulerNode(RandomSeeds)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = []
op31.met_dependencies = []
op31.outputs = [
    buf31: RandomSeeds
    buf31.layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.node.kernel = aten.randint.low_out


op32_op33_op34_op35_op37: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op32_op33_op34_op35_op37.writes = 
    [   MemoryDep('buf32', c0, {c0: 15728640}),
        MemoryDep('buf33', c0, {c0: 15728640}),
        MemoryDep('buf34', c0, {c0: 20480}),
        MemoryDep('buf35', c0, {c0: 20480}),
        MemoryDep('buf37', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op32_op33_op34_op35_op37.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 15728640}),
        MemoryDep('buf30', c0, {c0: 15728640}),
        MemoryDep('buf31', 0, {})]
op32_op33_op34_op35_op37.met_dependencies = 
    [   MemoryDep('primals_16', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_17', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_18', c1, {c0: 20480, c1: 768})]
op32_op33_op34_op35_op37.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op32_op33_op34_op35_op37.snodes[0] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 15728640})]
op32.unmet_dependencies = [MemoryDep('buf31', 0, {})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (15728640, 1)
op32.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op32_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 0
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf32', get_index_1, rand, None)
        return store
op32_op33_op34_op35_op37.snodes[1] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 15728640})]
op33.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 15728640}),
        MemoryDep('buf30', c0, {c0: 15728640}),
        MemoryDep('buf32', c0, {c0: 15728640})]
op33.met_dependencies = [MemoryDep('primals_16', c1, {c0: 20480, c1: 768})]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (15728640, 1)
op33.sizes = ([20480, 768], [])
buf21_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf30_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_16_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op33_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf32', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_16', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf33', get_index_4, add_1, None)
        return store
op32_op33_op34_op35_op37.snodes[2] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 20480})]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 15728640})]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (20480, 768)
op34.sizes = ([20480], [768])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op34_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_1, getitem)
        return store_reduction
op32_op33_op34_op35_op37.snodes[3] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 20480})]
op35.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 15728640})]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (20480, 768)
op35.sizes = ([20480], [768])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op35_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_1, getitem_1)
        return store_reduction
op32_op33_op34_op35_op37.snodes[4] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op37.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 15728640}),
        MemoryDep('buf34', c0, {c0: 20480}),
        MemoryDep('buf35', c0, {c0: 20480})]
op37.met_dependencies = 
    [   MemoryDep('primals_17', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_18', c1, {c0: 20480, c1: 768})]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (15728640, 1)
op37.sizes = ([20, 1024, 768], [])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf37_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op37_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf35', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_17', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_18', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf37', get_index_5, to_dtype, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 1769472})]
op38.unmet_dependencies = []
op38.met_dependencies = [MemoryDep('primals_20', c0, {c0: 1769472})]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (1769472, 1)
op38.sizes = ([1769472], [])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf38_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op38_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_20', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf38', get_index_1, to_dtype, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.mm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 47185920})]
op40.unmet_dependencies = [MemoryDep('buf39', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op40.met_dependencies = [MemoryDep('primals_19', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (47185920, 1)
op40.sizes = ([3, 20480, 768], [])
buf39_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf40_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op40_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_19', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf40', get_index_2, add, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 15728640})]
op41.unmet_dependencies = [MemoryDep('buf40', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (15728640, 1)
op41.sizes = ([1024, 20, 768], [])
buf40_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf41_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op41_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, load, None)
        return store


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 15728640})]
op42.unmet_dependencies = [   MemoryDep('buf40', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (15728640, 1)
op42.sizes = ([1024, 20, 768], [])
buf40_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf42_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op42_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf42', get_index_1, load, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 15728640})]
op43.unmet_dependencies = [   MemoryDep('buf40', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (15728640, 1)
op43.sizes = ([1024, 20, 768], [])
buf40_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf43_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op43_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf43', get_index_1, load, None)
        return store


op44: ExternKernelSchedulerNode(FallbackKernel)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = 
    [   StarDep(name='buf41', mode=None),
        StarDep(name='buf42', mode=None),
        StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='fwd_rng_state_1', mode=None)]
op44.outputs = [
    buf44: FallbackKernel
    buf44.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op45: ExternKernelSchedulerNode(MultiOutput)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: MultiOutput
    buf45.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op45.node.kernel = None


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 589824})]
op50.unmet_dependencies = []
op50.met_dependencies = [MemoryDep('primals_21', c0, {c0: 589824})]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (589824, 1)
op50.sizes = ([589824], [])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf50_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op50_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_21', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf50', get_index_1, to_dtype, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf45', mode=None), StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52_op53_op54_op56: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op52_op53_op54_op56.writes = 
    [   MemoryDep('buf52', c0, {c0: 15728640}),
        MemoryDep('buf53', c0, {c0: 20480}),
        MemoryDep('buf54', c0, {c0: 20480}),
        MemoryDep('buf56', c0, {c0: 15728640})]
op52_op53_op54_op56.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 15728640}),
        MemoryDep('buf51', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op52_op53_op54_op56.met_dependencies = 
    [   MemoryDep('primals_22', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_23', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_24', c1, {c0: 20480, c1: 768})]
op52_op53_op54_op56.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf53.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op52_op53_op54_op56.snodes[0] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 15728640})]
op52.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 15728640}),
        MemoryDep('buf51', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op52.met_dependencies = [MemoryDep('primals_22', c1, {c0: 20480, c1: 768})]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (15728640, 1)
op52.sizes = ([20, 1024, 768], [])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_22_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op52_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_22', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf52', get_index_3, add_1, None)
        return store
op52_op53_op54_op56.snodes[1] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 20480})]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 15728640})]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf53.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (20480, 768)
op53.sizes = ([20480], [768])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op53_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, getitem)
        return store_reduction
op52_op53_op54_op56.snodes[2] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 20480})]
op54.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 15728640})]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (20480, 768)
op54.sizes = ([20480], [768])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op54_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf54', get_index_1, getitem_1)
        return store_reduction
op52_op53_op54_op56.snodes[3] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 15728640})]
op56.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 15728640}),
        MemoryDep('buf53', c0, {c0: 20480}),
        MemoryDep('buf54', c0, {c0: 20480})]
op56.met_dependencies = 
    [   MemoryDep('primals_23', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_24', c1, {c0: 20480, c1: 768})]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (15728640, 1)
op56.sizes = ([20480, 768], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf53_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf54_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf56_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op56_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_23', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_24', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf56', get_index_5, to_dtype, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 1179648})]
op57.unmet_dependencies = []
op57.met_dependencies = [MemoryDep('primals_25', c0, {c0: 1179648})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (1179648, 1)
op57.sizes = ([1179648], [])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op57_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_25', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf57', get_index_1, to_dtype, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.node.kernel = extern_kernels.mm


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 31457280})]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 31457280})]
op59.met_dependencies = [MemoryDep('primals_26', c1, {c0: 20480, c1: 1536})]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (31457280, 1)
op59.sizes = ([20480, 1536], [])
buf58_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf59_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op59_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_26', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf58', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_26', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf59', get_index_4, to_dtype_4, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1179648})]
op60.unmet_dependencies = []
op60.met_dependencies = [MemoryDep('primals_27', c0, {c0: 1179648})]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1179648, 1)
op60.sizes = ([1179648], [])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf60_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op60_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf60', get_index_1, to_dtype, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62_op63_op64_op65_op67: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op62_op63_op64_op65_op67.writes = 
    [   MemoryDep('buf62', c0, {c0: 15728640}),
        MemoryDep('buf63', c0, {c0: 15728640}),
        MemoryDep('buf64', c0, {c0: 20480}),
        MemoryDep('buf65', c0, {c0: 20480}),
        MemoryDep('buf67', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op62_op63_op64_op65_op67.unmet_dependencies = 
    [   MemoryDep('buf31', 1, {}),
        MemoryDep('buf52', c0, {c0: 15728640}),
        MemoryDep('buf61', c0, {c0: 15728640})]
op62_op63_op64_op65_op67.met_dependencies = 
    [   MemoryDep('primals_28', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_29', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_30', c1, {c0: 20480, c1: 768})]
op62_op63_op64_op65_op67.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf64.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op62_op63_op64_op65_op67.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 15728640})]
op62.unmet_dependencies = [MemoryDep('buf31', 1, {})]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (15728640, 1)
op62.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op62_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 1
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 1)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf62', get_index_1, rand, None)
        return store
op62_op63_op64_op65_op67.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 15728640})]
op63.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 15728640}),
        MemoryDep('buf61', c0, {c0: 15728640}),
        MemoryDep('buf62', c0, {c0: 15728640})]
op63.met_dependencies = [MemoryDep('primals_28', c1, {c0: 20480, c1: 768})]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (15728640, 1)
op63.sizes = ([20480, 768], [])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf62_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf61_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_28_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op63_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_28', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf63', get_index_4, add_1, None)
        return store
op62_op63_op64_op65_op67.snodes[2] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 20480})]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 15728640})]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf64.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (20480, 768)
op64.sizes = ([20480], [768])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op64_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, getitem)
        return store_reduction
op62_op63_op64_op65_op67.snodes[3] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 20480})]
op65.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 15728640})]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf65.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (20480, 768)
op65.sizes = ([20480], [768])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op65_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf65', get_index_1, getitem_1)
        return store_reduction
op62_op63_op64_op65_op67.snodes[4] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op67.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 15728640}),
        MemoryDep('buf64', c0, {c0: 20480}),
        MemoryDep('buf65', c0, {c0: 20480})]
op67.met_dependencies = 
    [   MemoryDep('primals_29', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_30', c1, {c0: 20480, c1: 768})]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (15728640, 1)
op67.sizes = ([20, 1024, 768], [])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf64_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf65_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf67_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op67_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf64', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf65', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_29', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_30', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf67', get_index_5, to_dtype, None)
        return store


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1769472})]
op68.unmet_dependencies = []
op68.met_dependencies = [MemoryDep('primals_32', c0, {c0: 1769472})]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (1769472, 1)
op68.sizes = ([1769472], [])
primals_32_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op68_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_32', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf68', get_index_1, to_dtype, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf67', mode=None), StarDep(name='buf68', mode=None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = extern_kernels.mm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 47185920})]
op70.unmet_dependencies = [MemoryDep('buf69', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op70.met_dependencies = [MemoryDep('primals_31', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (47185920, 1)
op70.sizes = ([3, 20480, 768], [])
buf69_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf70_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op70_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_31', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf70', get_index_2, add, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 15728640})]
op71.unmet_dependencies = [MemoryDep('buf70', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (15728640, 1)
op71.sizes = ([1024, 20, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf71_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op71_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf71', get_index_1, load, None)
        return store


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 15728640})]
op72.unmet_dependencies = [   MemoryDep('buf70', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (15728640, 1)
op72.sizes = ([1024, 20, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf72_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op72_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf72', get_index_1, load, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 15728640})]
op73.unmet_dependencies = [   MemoryDep('buf70', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (15728640, 1)
op73.sizes = ([1024, 20, 768], [])
buf70_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf73_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op73_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf73', get_index_1, load, None)
        return store


op74: ExternKernelSchedulerNode(FallbackKernel)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = 
    [   StarDep(name='buf71', mode=None),
        StarDep(name='buf72', mode=None),
        StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='fwd_rng_state_2', mode=None)]
op74.outputs = [
    buf74: FallbackKernel
    buf74.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op75: ExternKernelSchedulerNode(MultiOutput)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: MultiOutput
    buf75.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = None


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 589824})]
op80.unmet_dependencies = []
op80.met_dependencies = [MemoryDep('primals_33', c0, {c0: 589824})]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (589824, 1)
op80.sizes = ([589824], [])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf80_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op80_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_33', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf80', get_index_1, to_dtype, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf75', mode=None), StarDep(name='buf80', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82_op83_op84_op86: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op82_op83_op84_op86.writes = 
    [   MemoryDep('buf82', c0, {c0: 15728640}),
        MemoryDep('buf83', c0, {c0: 20480}),
        MemoryDep('buf84', c0, {c0: 20480}),
        MemoryDep('buf86', c0, {c0: 15728640})]
op82_op83_op84_op86.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 15728640}),
        MemoryDep('buf81', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op82_op83_op84_op86.met_dependencies = 
    [   MemoryDep('primals_34', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_35', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_36', c1, {c0: 20480, c1: 768})]
op82_op83_op84_op86.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf83.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op82_op83_op84_op86.snodes[0] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 15728640})]
op82.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 15728640}),
        MemoryDep('buf81', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op82.met_dependencies = [MemoryDep('primals_34', c1, {c0: 20480, c1: 768})]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (15728640, 1)
op82.sizes = ([20, 1024, 768], [])
buf63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf81_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_34_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op82_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf81', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_34', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf82', get_index_3, add_1, None)
        return store
op82_op83_op84_op86.snodes[1] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 20480})]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 15728640})]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf83.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (20480, 768)
op83.sizes = ([20480], [768])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op83_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf83', get_index_1, getitem)
        return store_reduction
op82_op83_op84_op86.snodes[2] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 20480})]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 15728640})]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (20480, 768)
op84.sizes = ([20480], [768])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op84_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf84', get_index_1, getitem_1)
        return store_reduction
op82_op83_op84_op86.snodes[3] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 15728640})]
op86.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 15728640}),
        MemoryDep('buf83', c0, {c0: 20480}),
        MemoryDep('buf84', c0, {c0: 20480})]
op86.met_dependencies = 
    [   MemoryDep('primals_35', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_36', c1, {c0: 20480, c1: 768})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (15728640, 1)
op86.sizes = ([20480, 768], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_36_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf86_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op86_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf83', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf84', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_35', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_36', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf86', get_index_5, to_dtype, None)
        return store


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1179648})]
op87.unmet_dependencies = []
op87.met_dependencies = [MemoryDep('primals_37', c0, {c0: 1179648})]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (1179648, 1)
op87.sizes = ([1179648], [])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf87_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op87_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_37', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf87', get_index_1, to_dtype, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 31457280})]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 31457280})]
op89.met_dependencies = [MemoryDep('primals_38', c1, {c0: 20480, c1: 1536})]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (31457280, 1)
op89.sizes = ([20480, 1536], [])
buf88_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf89_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op89_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_38', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_38', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf89', get_index_4, to_dtype_4, None)
        return store


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1179648})]
op90.unmet_dependencies = []
op90.met_dependencies = [MemoryDep('primals_39', c0, {c0: 1179648})]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1179648, 1)
op90.sizes = ([1179648], [])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf90_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op90_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_39', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf90', get_index_1, to_dtype, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf89', mode=None), StarDep(name='buf90', mode=None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92_op93_op94_op95_op97: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op94_op95_op97.writes = 
    [   MemoryDep('buf92', c0, {c0: 15728640}),
        MemoryDep('buf93', c0, {c0: 15728640}),
        MemoryDep('buf94', c0, {c0: 20480}),
        MemoryDep('buf95', c0, {c0: 20480}),
        MemoryDep('buf97', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op92_op93_op94_op95_op97.unmet_dependencies = 
    [   MemoryDep('buf31', 2, {}),
        MemoryDep('buf82', c0, {c0: 15728640}),
        MemoryDep('buf91', c0, {c0: 15728640})]
op92_op93_op94_op95_op97.met_dependencies = 
    [   MemoryDep('primals_40', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_41', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_42', c1, {c0: 20480, c1: 768})]
op92_op93_op94_op95_op97.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op92_op93_op94_op95_op97.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 15728640})]
op92.unmet_dependencies = [MemoryDep('buf31', 2, {})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (15728640, 1)
op92.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op92_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 2
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 2)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf92', get_index_1, rand, None)
        return store
op92_op93_op94_op95_op97.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 15728640})]
op93.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 15728640}),
        MemoryDep('buf91', c0, {c0: 15728640}),
        MemoryDep('buf92', c0, {c0: 15728640})]
op93.met_dependencies = [MemoryDep('primals_40', c1, {c0: 20480, c1: 768})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (15728640, 1)
op93.sizes = ([20480, 768], [])
buf82_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_40_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op93_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf91', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_40', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf93', get_index_4, add_1, None)
        return store
op92_op93_op94_op95_op97.snodes[2] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 20480})]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 15728640})]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf94.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (20480, 768)
op94.sizes = ([20480], [768])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op94_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem)
        return store_reduction
op92_op93_op94_op95_op97.snodes[3] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 20480})]
op95.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 15728640})]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (20480, 768)
op95.sizes = ([20480], [768])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op95_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, getitem_1)
        return store_reduction
op92_op93_op94_op95_op97.snodes[4] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op97.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 15728640}),
        MemoryDep('buf94', c0, {c0: 20480}),
        MemoryDep('buf95', c0, {c0: 20480})]
op97.met_dependencies = 
    [   MemoryDep('primals_41', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_42', c1, {c0: 20480, c1: 768})]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (15728640, 1)
op97.sizes = ([20, 1024, 768], [])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf94_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_42_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf97_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op97_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf94', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf95', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_41', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_42', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf97', get_index_5, to_dtype, None)
        return store


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1769472})]
op98.unmet_dependencies = []
op98.met_dependencies = [MemoryDep('primals_44', c0, {c0: 1769472})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1769472, 1)
op98.sizes = ([1769472], [])
primals_44_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf98_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op98_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_44', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf98', get_index_1, to_dtype, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None), StarDep(name='buf98', mode=None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 47185920})]
op100.unmet_dependencies = [MemoryDep('buf99', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op100.met_dependencies = [MemoryDep('primals_43', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (47185920, 1)
op100.sizes = ([3, 20480, 768], [])
buf99_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf100_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op100_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_43', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf100', get_index_2, add, None)
        return store


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 15728640})]
op101.unmet_dependencies = [   MemoryDep('buf100', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (15728640, 1)
op101.sizes = ([1024, 20, 768], [])
buf100_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf101_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op101_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf101', get_index_1, load, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 15728640})]
op102.unmet_dependencies = [   MemoryDep('buf100', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (15728640, 1)
op102.sizes = ([1024, 20, 768], [])
buf100_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf102_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op102_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf102', get_index_1, load, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 15728640})]
op103.unmet_dependencies = [   MemoryDep('buf100', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (15728640, 1)
op103.sizes = ([1024, 20, 768], [])
buf100_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf103_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op103_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf103', get_index_1, load, None)
        return store


op104: ExternKernelSchedulerNode(FallbackKernel)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = 
    [   StarDep(name='buf101', mode=None),
        StarDep(name='buf102', mode=None),
        StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='fwd_rng_state_3', mode=None)]
op104.outputs = [
    buf104: FallbackKernel
    buf104.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op105: ExternKernelSchedulerNode(MultiOutput)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: MultiOutput
    buf105.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = None


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 589824})]
op110.unmet_dependencies = []
op110.met_dependencies = [MemoryDep('primals_45', c0, {c0: 589824})]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (589824, 1)
op110.sizes = ([589824], [])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf110_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op110_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_45', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf110', get_index_1, to_dtype, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf105', mode=None), StarDep(name='buf110', mode=None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.mm


op112_op113_op114_op116: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op112_op113_op114_op116.writes = 
    [   MemoryDep('buf112', c0, {c0: 15728640}),
        MemoryDep('buf113', c0, {c0: 20480}),
        MemoryDep('buf114', c0, {c0: 20480}),
        MemoryDep('buf116', c0, {c0: 15728640})]
op112_op113_op114_op116.unmet_dependencies = 
    [   MemoryDep('buf111', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf93', c0, {c0: 15728640})]
op112_op113_op114_op116.met_dependencies = 
    [   MemoryDep('primals_46', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_47', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_48', c1, {c0: 20480, c1: 768})]
op112_op113_op114_op116.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op112_op113_op114_op116.snodes[0] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 15728640})]
op112.unmet_dependencies = 
    [   MemoryDep('buf111', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf93', c0, {c0: 15728640})]
op112.met_dependencies = [MemoryDep('primals_46', c1, {c0: 20480, c1: 768})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (15728640, 1)
op112.sizes = ([20, 1024, 768], [])
buf93_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf111_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op112_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf111', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_46', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf112', get_index_3, add_1, None)
        return store
op112_op113_op114_op116.snodes[1] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 20480})]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 15728640})]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (20480, 768)
op113.sizes = ([20480], [768])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op113_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf113', get_index_1, getitem)
        return store_reduction
op112_op113_op114_op116.snodes[2] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 20480})]
op114.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 15728640})]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (20480, 768)
op114.sizes = ([20480], [768])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op114_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf114', get_index_1, getitem_1)
        return store_reduction
op112_op113_op114_op116.snodes[3] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 15728640})]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 15728640}),
        MemoryDep('buf113', c0, {c0: 20480}),
        MemoryDep('buf114', c0, {c0: 20480})]
op116.met_dependencies = 
    [   MemoryDep('primals_47', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_48', c1, {c0: 20480, c1: 768})]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (15728640, 1)
op116.sizes = ([20480, 768], [])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_48_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf116_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op116_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf113', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf114', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_47', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_48', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf116', get_index_5, to_dtype, None)
        return store


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1179648})]
op117.unmet_dependencies = []
op117.met_dependencies = [MemoryDep('primals_49', c0, {c0: 1179648})]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (1179648, 1)
op117.sizes = ([1179648], [])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf117_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op117_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf117', get_index_1, to_dtype, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf116', mode=None), StarDep(name='buf117', mode=None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.node.kernel = extern_kernels.mm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 31457280})]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 31457280})]
op119.met_dependencies = [MemoryDep('primals_50', c1, {c0: 20480, c1: 1536})]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (31457280, 1)
op119.sizes = ([20480, 1536], [])
buf118_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf119_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op119_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_50', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_50', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf119', get_index_4, to_dtype_4, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1179648})]
op120.unmet_dependencies = []
op120.met_dependencies = [MemoryDep('primals_51', c0, {c0: 1179648})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1179648, 1)
op120.sizes = ([1179648], [])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf120_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op120_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_51', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf120', get_index_1, to_dtype, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.mm


op122_op123_op124_op125_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op122_op123_op124_op125_op127.writes = 
    [   MemoryDep('buf122', c0, {c0: 15728640}),
        MemoryDep('buf123', c0, {c0: 15728640}),
        MemoryDep('buf124', c0, {c0: 20480}),
        MemoryDep('buf125', c0, {c0: 20480}),
        MemoryDep('buf127', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op122_op123_op124_op125_op127.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 15728640}),
        MemoryDep('buf121', c0, {c0: 15728640}),
        MemoryDep('buf31', 3, {})]
op122_op123_op124_op125_op127.met_dependencies = 
    [   MemoryDep('primals_52', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_53', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_54', c1, {c0: 20480, c1: 768})]
op122_op123_op124_op125_op127.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op122_op123_op124_op125_op127.snodes[0] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 15728640})]
op122.unmet_dependencies = [MemoryDep('buf31', 3, {})]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (15728640, 1)
op122.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op122_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 3
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 3)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, rand, None)
        return store
op122_op123_op124_op125_op127.snodes[1] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 15728640})]
op123.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 15728640}),
        MemoryDep('buf121', c0, {c0: 15728640}),
        MemoryDep('buf122', c0, {c0: 15728640})]
op123.met_dependencies = [MemoryDep('primals_52', c1, {c0: 20480, c1: 768})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (15728640, 1)
op123.sizes = ([20480, 768], [])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf121_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_52_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op123_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf121', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_52', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf123', get_index_4, add_1, None)
        return store
op122_op123_op124_op125_op127.snodes[2] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 20480})]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 15728640})]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf124.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (20480, 768)
op124.sizes = ([20480], [768])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op124_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf124', get_index_1, getitem)
        return store_reduction
op122_op123_op124_op125_op127.snodes[3] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 20480})]
op125.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 15728640})]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (20480, 768)
op125.sizes = ([20480], [768])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op125_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_1, getitem_1)
        return store_reduction
op122_op123_op124_op125_op127.snodes[4] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op127.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 15728640}),
        MemoryDep('buf124', c0, {c0: 20480}),
        MemoryDep('buf125', c0, {c0: 20480})]
op127.met_dependencies = 
    [   MemoryDep('primals_53', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_54', c1, {c0: 20480, c1: 768})]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (15728640, 1)
op127.sizes = ([20, 1024, 768], [])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf124_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf125_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_54_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op127_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf125', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_53', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_54', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf127', get_index_5, to_dtype, None)
        return store


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1769472})]
op128.unmet_dependencies = []
op128.met_dependencies = [MemoryDep('primals_56', c0, {c0: 1769472})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1769472, 1)
op128.sizes = ([1769472], [])
primals_56_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op128_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_56', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf128', get_index_1, to_dtype, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf127', mode=None), StarDep(name='buf128', mode=None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 47185920})]
op130.unmet_dependencies = [MemoryDep('buf129', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op130.met_dependencies = [MemoryDep('primals_55', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (47185920, 1)
op130.sizes = ([3, 20480, 768], [])
buf129_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_55_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf130_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op130_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_55', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf130', get_index_2, add, None)
        return store


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 15728640})]
op131.unmet_dependencies = [   MemoryDep('buf130', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (15728640, 1)
op131.sizes = ([1024, 20, 768], [])
buf130_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op131_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf131', get_index_1, load, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 15728640})]
op132.unmet_dependencies = [   MemoryDep('buf130', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (15728640, 1)
op132.sizes = ([1024, 20, 768], [])
buf130_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf132_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op132_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf132', get_index_1, load, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 15728640})]
op133.unmet_dependencies = [   MemoryDep('buf130', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (15728640, 1)
op133.sizes = ([1024, 20, 768], [])
buf130_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf133_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op133_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf133', get_index_1, load, None)
        return store


op134: ExternKernelSchedulerNode(FallbackKernel)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = 
    [   StarDep(name='buf131', mode=None),
        StarDep(name='buf132', mode=None),
        StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='fwd_rng_state_4', mode=None)]
op134.outputs = [
    buf134: FallbackKernel
    buf134.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op135: ExternKernelSchedulerNode(MultiOutput)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: MultiOutput
    buf135.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op135.node.kernel = None


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 589824})]
op140.unmet_dependencies = []
op140.met_dependencies = [MemoryDep('primals_57', c0, {c0: 589824})]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (589824, 1)
op140.sizes = ([589824], [])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf140_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op140_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_57', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf140', get_index_1, to_dtype, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf135', mode=None), StarDep(name='buf140', mode=None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142_op143_op144_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op142_op143_op144_op146.writes = 
    [   MemoryDep('buf142', c0, {c0: 15728640}),
        MemoryDep('buf143', c0, {c0: 20480}),
        MemoryDep('buf144', c0, {c0: 20480}),
        MemoryDep('buf146', c0, {c0: 15728640})]
op142_op143_op144_op146.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 15728640}),
        MemoryDep('buf141', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op142_op143_op144_op146.met_dependencies = 
    [   MemoryDep('primals_58', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_59', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_60', c1, {c0: 20480, c1: 768})]
op142_op143_op144_op146.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op142_op143_op144_op146.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 15728640})]
op142.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 15728640}),
        MemoryDep('buf141', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op142.met_dependencies = [MemoryDep('primals_58', c1, {c0: 20480, c1: 768})]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (15728640, 1)
op142.sizes = ([20, 1024, 768], [])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf141_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_58_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op142_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_58', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf142', get_index_3, add_1, None)
        return store
op142_op143_op144_op146.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 20480})]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 15728640})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (20480, 768)
op143.sizes = ([20480], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op143_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem)
        return store_reduction
op142_op143_op144_op146.snodes[2] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 20480})]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 15728640})]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (20480, 768)
op144.sizes = ([20480], [768])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op144_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem_1)
        return store_reduction
op142_op143_op144_op146.snodes[3] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 15728640})]
op146.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 15728640}),
        MemoryDep('buf143', c0, {c0: 20480}),
        MemoryDep('buf144', c0, {c0: 20480})]
op146.met_dependencies = 
    [   MemoryDep('primals_59', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_60', c1, {c0: 20480, c1: 768})]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (15728640, 1)
op146.sizes = ([20480, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf144_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_60_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op146_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_59', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_60', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, to_dtype, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 1179648})]
op147.unmet_dependencies = []
op147.met_dependencies = [MemoryDep('primals_61', c0, {c0: 1179648})]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (1179648, 1)
op147.sizes = ([1179648], [])
primals_61_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf147_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op147_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_61', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf147', get_index_1, to_dtype, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None), StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False)]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 31457280})]
op149.unmet_dependencies = [MemoryDep('buf148', c0, {c0: 31457280})]
op149.met_dependencies = [MemoryDep('primals_62', c1, {c0: 20480, c1: 1536})]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (31457280, 1)
op149.sizes = ([20480, 1536], [])
buf148_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf149_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op149_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf148', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf149', get_index_4, to_dtype_4, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1179648})]
op150.unmet_dependencies = []
op150.met_dependencies = [MemoryDep('primals_63', c0, {c0: 1179648})]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1179648, 1)
op150.sizes = ([1179648], [])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf150_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op150_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_63', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf150', get_index_1, to_dtype, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op151.node.kernel = extern_kernels.mm


op152_op153_op154_op155_op157: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op152_op153_op154_op155_op157.writes = 
    [   MemoryDep('buf152', c0, {c0: 15728640}),
        MemoryDep('buf153', c0, {c0: 15728640}),
        MemoryDep('buf154', c0, {c0: 20480}),
        MemoryDep('buf155', c0, {c0: 20480}),
        MemoryDep('buf157', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op152_op153_op154_op155_op157.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 15728640}),
        MemoryDep('buf151', c0, {c0: 15728640}),
        MemoryDep('buf31', 4, {})]
op152_op153_op154_op155_op157.met_dependencies = 
    [   MemoryDep('primals_64', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_65', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_66', c1, {c0: 20480, c1: 768})]
op152_op153_op154_op155_op157.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op152_op153_op154_op155_op157.snodes[0] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 15728640})]
op152.unmet_dependencies = [MemoryDep('buf31', 4, {})]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (15728640, 1)
op152.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op152_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 4
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 4)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf152', get_index_1, rand, None)
        return store
op152_op153_op154_op155_op157.snodes[1] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 15728640})]
op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 15728640}),
        MemoryDep('buf151', c0, {c0: 15728640}),
        MemoryDep('buf152', c0, {c0: 15728640})]
op153.met_dependencies = [MemoryDep('primals_64', c1, {c0: 20480, c1: 768})]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (15728640, 1)
op153.sizes = ([20480, 768], [])
buf142_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf152_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf151_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_64_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op153_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf152', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf151', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_64', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf153', get_index_4, add_1, None)
        return store
op152_op153_op154_op155_op157.snodes[2] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 20480})]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 15728640})]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (20480, 768)
op154.sizes = ([20480], [768])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op154_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_1, getitem)
        return store_reduction
op152_op153_op154_op155_op157.snodes[3] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 20480})]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 15728640})]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (20480, 768)
op155.sizes = ([20480], [768])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op155_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_1, getitem_1)
        return store_reduction
op152_op153_op154_op155_op157.snodes[4] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op157.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 15728640}),
        MemoryDep('buf154', c0, {c0: 20480}),
        MemoryDep('buf155', c0, {c0: 20480})]
op157.met_dependencies = 
    [   MemoryDep('primals_65', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_66', c1, {c0: 20480, c1: 768})]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (15728640, 1)
op157.sizes = ([20, 1024, 768], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_65_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_66_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op157_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_65', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_66', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf157', get_index_5, to_dtype, None)
        return store


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1769472})]
op158.unmet_dependencies = []
op158.met_dependencies = [MemoryDep('primals_68', c0, {c0: 1769472})]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1769472, 1)
op158.sizes = ([1769472], [])
primals_68_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf158_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op158_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_68', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf158', get_index_1, to_dtype, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf157', mode=None), StarDep(name='buf158', mode=None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 47185920})]
op160.unmet_dependencies = [MemoryDep('buf159', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op160.met_dependencies = [MemoryDep('primals_67', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (47185920, 1)
op160.sizes = ([3, 20480, 768], [])
buf159_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf160_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op160_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_67', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf160', get_index_2, add, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 15728640})]
op161.unmet_dependencies = [   MemoryDep('buf160', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (15728640, 1)
op161.sizes = ([1024, 20, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf161_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op161_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf161', get_index_1, load, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 15728640})]
op162.unmet_dependencies = [   MemoryDep('buf160', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (15728640, 1)
op162.sizes = ([1024, 20, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf162_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op162_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, load, None)
        return store


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 15728640})]
op163.unmet_dependencies = [   MemoryDep('buf160', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (15728640, 1)
op163.sizes = ([1024, 20, 768], [])
buf160_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op163_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(FallbackKernel)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = 
    [   StarDep(name='buf161', mode=None),
        StarDep(name='buf162', mode=None),
        StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='fwd_rng_state_5', mode=None)]
op164.outputs = [
    buf164: FallbackKernel
    buf164.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op165: ExternKernelSchedulerNode(MultiOutput)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: MultiOutput
    buf165.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = None


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 589824})]
op170.unmet_dependencies = []
op170.met_dependencies = [MemoryDep('primals_69', c0, {c0: 589824})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (589824, 1)
op170.sizes = ([589824], [])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op170_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_69', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf170', get_index_1, to_dtype, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf165', mode=None), StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = extern_kernels.mm


op172_op173_op174_op176: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op172_op173_op174_op176.writes = 
    [   MemoryDep('buf172', c0, {c0: 15728640}),
        MemoryDep('buf173', c0, {c0: 20480}),
        MemoryDep('buf174', c0, {c0: 20480}),
        MemoryDep('buf176', c0, {c0: 15728640})]
op172_op173_op174_op176.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 15728640}),
        MemoryDep('buf171', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op172_op173_op174_op176.met_dependencies = 
    [   MemoryDep('primals_70', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_71', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_72', c1, {c0: 20480, c1: 768})]
op172_op173_op174_op176.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op172_op173_op174_op176.snodes[0] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 15728640})]
op172.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 15728640}),
        MemoryDep('buf171', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op172.met_dependencies = [MemoryDep('primals_70', c1, {c0: 20480, c1: 768})]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (15728640, 1)
op172.sizes = ([20, 1024, 768], [])
buf153_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf171_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_70_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op172_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_70', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf172', get_index_3, add_1, None)
        return store
op172_op173_op174_op176.snodes[1] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 20480})]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 15728640})]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (20480, 768)
op173.sizes = ([20480], [768])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op173_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem)
        return store_reduction
op172_op173_op174_op176.snodes[2] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 20480})]
op174.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 15728640})]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (20480, 768)
op174.sizes = ([20480], [768])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op174_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf174', get_index_1, getitem_1)
        return store_reduction
op172_op173_op174_op176.snodes[3] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 15728640})]
op176.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 15728640}),
        MemoryDep('buf173', c0, {c0: 20480}),
        MemoryDep('buf174', c0, {c0: 20480})]
op176.met_dependencies = 
    [   MemoryDep('primals_71', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_72', c1, {c0: 20480, c1: 768})]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (15728640, 1)
op176.sizes = ([20480, 768], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf173_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_72_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op176_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf174', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_71', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_72', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, to_dtype, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 1179648})]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('primals_73', c0, {c0: 1179648})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (1179648, 1)
op177.sizes = ([1179648], [])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf177_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op177_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_73', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf177', get_index_1, to_dtype, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 31457280})]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 31457280})]
op179.met_dependencies = [MemoryDep('primals_74', c1, {c0: 20480, c1: 1536})]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (31457280, 1)
op179.sizes = ([20480, 1536], [])
buf178_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf179_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op179_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_74', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf178', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_74', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf179', get_index_4, to_dtype_4, None)
        return store


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 1179648})]
op180.unmet_dependencies = []
op180.met_dependencies = [MemoryDep('primals_75', c0, {c0: 1179648})]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (1179648, 1)
op180.sizes = ([1179648], [])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf180_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op180_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_75', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf180', get_index_1, to_dtype, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf179', mode=None), StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op182_op183_op184_op185_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op182_op183_op184_op185_op187.writes = 
    [   MemoryDep('buf182', c0, {c0: 15728640}),
        MemoryDep('buf183', c0, {c0: 15728640}),
        MemoryDep('buf184', c0, {c0: 20480}),
        MemoryDep('buf185', c0, {c0: 20480}),
        MemoryDep('buf187', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op182_op183_op184_op185_op187.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 15728640}),
        MemoryDep('buf181', c0, {c0: 15728640}),
        MemoryDep('buf31', 5, {})]
op182_op183_op184_op185_op187.met_dependencies = 
    [   MemoryDep('primals_76', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_77', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_78', c1, {c0: 20480, c1: 768})]
op182_op183_op184_op185_op187.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op182_op183_op184_op185_op187.snodes[0] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 15728640})]
op182.unmet_dependencies = [MemoryDep('buf31', 5, {})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (15728640, 1)
op182.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op182_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 5
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 5)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, rand, None)
        return store
op182_op183_op184_op185_op187.snodes[1] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 15728640})]
op183.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 15728640}),
        MemoryDep('buf181', c0, {c0: 15728640}),
        MemoryDep('buf182', c0, {c0: 15728640})]
op183.met_dependencies = [MemoryDep('primals_76', c1, {c0: 20480, c1: 768})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (15728640, 1)
op183.sizes = ([20480, 768], [])
buf172_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf181_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_76_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op183_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf182', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf181', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_76', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf183', get_index_4, add_1, None)
        return store
op182_op183_op184_op185_op187.snodes[2] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 20480})]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 15728640})]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (20480, 768)
op184.sizes = ([20480], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op184_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf184', get_index_1, getitem)
        return store_reduction
op182_op183_op184_op185_op187.snodes[3] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 20480})]
op185.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 15728640})]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (20480, 768)
op185.sizes = ([20480], [768])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op185_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf185', get_index_1, getitem_1)
        return store_reduction
op182_op183_op184_op185_op187.snodes[4] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op187.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 15728640}),
        MemoryDep('buf184', c0, {c0: 20480}),
        MemoryDep('buf185', c0, {c0: 20480})]
op187.met_dependencies = 
    [   MemoryDep('primals_77', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_78', c1, {c0: 20480, c1: 768})]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (15728640, 1)
op187.sizes = ([20, 1024, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_77_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_78_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op187_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf184', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_77', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_78', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf187', get_index_5, to_dtype, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 1769472})]
op188.unmet_dependencies = []
op188.met_dependencies = [MemoryDep('primals_80', c0, {c0: 1769472})]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (1769472, 1)
op188.sizes = ([1769472], [])
primals_80_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf188_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op188_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_80', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf188', get_index_1, to_dtype, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.mm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 47185920})]
op190.unmet_dependencies = [MemoryDep('buf189', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op190.met_dependencies = [MemoryDep('primals_79', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (47185920, 1)
op190.sizes = ([3, 20480, 768], [])
buf189_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_79_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf190_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op190_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_79', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf190', get_index_2, add, None)
        return store


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 15728640})]
op191.unmet_dependencies = [   MemoryDep('buf190', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (15728640, 1)
op191.sizes = ([1024, 20, 768], [])
buf190_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf191_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op191_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf191', get_index_1, load, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 15728640})]
op192.unmet_dependencies = [   MemoryDep('buf190', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (15728640, 1)
op192.sizes = ([1024, 20, 768], [])
buf190_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf192_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op192_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf192', get_index_1, load, None)
        return store


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 15728640})]
op193.unmet_dependencies = [   MemoryDep('buf190', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (15728640, 1)
op193.sizes = ([1024, 20, 768], [])
buf190_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op193_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf193', get_index_1, load, None)
        return store


op194: ExternKernelSchedulerNode(FallbackKernel)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = 
    [   StarDep(name='buf191', mode=None),
        StarDep(name='buf192', mode=None),
        StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='fwd_rng_state_6', mode=None)]
op194.outputs = [
    buf194: FallbackKernel
    buf194.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op195: ExternKernelSchedulerNode(MultiOutput)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: MultiOutput
    buf195.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = None


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 589824})]
op200.unmet_dependencies = []
op200.met_dependencies = [MemoryDep('primals_81', c0, {c0: 589824})]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (589824, 1)
op200.sizes = ([589824], [])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf200_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op200_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_81', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf200', get_index_1, to_dtype, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf195', mode=None), StarDep(name='buf200', mode=None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.node.kernel = extern_kernels.mm


op202_op203_op204_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op202_op203_op204_op206.writes = 
    [   MemoryDep('buf202', c0, {c0: 15728640}),
        MemoryDep('buf203', c0, {c0: 20480}),
        MemoryDep('buf204', c0, {c0: 20480}),
        MemoryDep('buf206', c0, {c0: 15728640})]
op202_op203_op204_op206.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 15728640}),
        MemoryDep('buf201', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op202_op203_op204_op206.met_dependencies = 
    [   MemoryDep('primals_82', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_83', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_84', c1, {c0: 20480, c1: 768})]
op202_op203_op204_op206.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op202_op203_op204_op206.snodes[0] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 15728640})]
op202.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 15728640}),
        MemoryDep('buf201', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op202.met_dependencies = [MemoryDep('primals_82', c1, {c0: 20480, c1: 768})]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (15728640, 1)
op202.sizes = ([20, 1024, 768], [])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf201_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_82_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op202_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_82', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf202', get_index_3, add_1, None)
        return store
op202_op203_op204_op206.snodes[1] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 20480})]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 15728640})]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (20480, 768)
op203.sizes = ([20480], [768])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op203_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_1, getitem)
        return store_reduction
op202_op203_op204_op206.snodes[2] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 20480})]
op204.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 15728640})]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (20480, 768)
op204.sizes = ([20480], [768])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op204_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_1, getitem_1)
        return store_reduction
op202_op203_op204_op206.snodes[3] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 15728640})]
op206.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 15728640}),
        MemoryDep('buf203', c0, {c0: 20480}),
        MemoryDep('buf204', c0, {c0: 20480})]
op206.met_dependencies = 
    [   MemoryDep('primals_83', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_84', c1, {c0: 20480, c1: 768})]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (15728640, 1)
op206.sizes = ([20480, 768], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf203_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf204_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_84_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op206_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf204', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_83', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_84', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf206', get_index_5, to_dtype, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 1179648})]
op207.unmet_dependencies = []
op207.met_dependencies = [MemoryDep('primals_85', c0, {c0: 1179648})]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (1179648, 1)
op207.sizes = ([1179648], [])
primals_85_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf207_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op207_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_85', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf207', get_index_1, to_dtype, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False)]
]
op208.node.kernel = extern_kernels.mm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 31457280})]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 31457280})]
op209.met_dependencies = [MemoryDep('primals_86', c1, {c0: 20480, c1: 1536})]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (31457280, 1)
op209.sizes = ([20480, 1536], [])
buf208_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf209_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op209_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_86', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_86', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf209', get_index_4, to_dtype_4, None)
        return store


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1179648})]
op210.unmet_dependencies = []
op210.met_dependencies = [MemoryDep('primals_87', c0, {c0: 1179648})]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (1179648, 1)
op210.sizes = ([1179648], [])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf210_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op210_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_87', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf210', get_index_1, to_dtype, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf209', mode=None), StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212_op213_op214_op215_op217: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op212_op213_op214_op215_op217.writes = 
    [   MemoryDep('buf212', c0, {c0: 15728640}),
        MemoryDep('buf213', c0, {c0: 15728640}),
        MemoryDep('buf214', c0, {c0: 20480}),
        MemoryDep('buf215', c0, {c0: 20480}),
        MemoryDep('buf217', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op212_op213_op214_op215_op217.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 15728640}),
        MemoryDep('buf211', c0, {c0: 15728640}),
        MemoryDep('buf31', 6, {})]
op212_op213_op214_op215_op217.met_dependencies = 
    [   MemoryDep('primals_88', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_89', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_90', c1, {c0: 20480, c1: 768})]
op212_op213_op214_op215_op217.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op212_op213_op214_op215_op217.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 15728640})]
op212.unmet_dependencies = [MemoryDep('buf31', 6, {})]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (15728640, 1)
op212.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op212_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 6
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 6)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf212', get_index_1, rand, None)
        return store
op212_op213_op214_op215_op217.snodes[1] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 15728640})]
op213.unmet_dependencies = 
    [   MemoryDep('buf202', c0, {c0: 15728640}),
        MemoryDep('buf211', c0, {c0: 15728640}),
        MemoryDep('buf212', c0, {c0: 15728640})]
op213.met_dependencies = [MemoryDep('primals_88', c1, {c0: 20480, c1: 768})]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (15728640, 1)
op213.sizes = ([20480, 768], [])
buf202_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf211_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_88_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op213_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_88', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf213', get_index_4, add_1, None)
        return store
op212_op213_op214_op215_op217.snodes[2] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 20480})]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 15728640})]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (20480, 768)
op214.sizes = ([20480], [768])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op214_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_1, getitem)
        return store_reduction
op212_op213_op214_op215_op217.snodes[3] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 20480})]
op215.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 15728640})]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (20480, 768)
op215.sizes = ([20480], [768])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op215_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf215', get_index_1, getitem_1)
        return store_reduction
op212_op213_op214_op215_op217.snodes[4] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op217.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 15728640}),
        MemoryDep('buf214', c0, {c0: 20480}),
        MemoryDep('buf215', c0, {c0: 20480})]
op217.met_dependencies = 
    [   MemoryDep('primals_89', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_90', c1, {c0: 20480, c1: 768})]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (15728640, 1)
op217.sizes = ([20, 1024, 768], [])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf214_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf215_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_90_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op217_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf214', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf215', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_89', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_90', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf217', get_index_5, to_dtype, None)
        return store


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 1769472})]
op218.unmet_dependencies = []
op218.met_dependencies = [MemoryDep('primals_92', c0, {c0: 1769472})]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (1769472, 1)
op218.sizes = ([1769472], [])
primals_92_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf218_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op218_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_92', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf218', get_index_1, to_dtype, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf217', mode=None), StarDep(name='buf218', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = extern_kernels.mm


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 47185920})]
op220.unmet_dependencies = [MemoryDep('buf219', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op220.met_dependencies = [MemoryDep('primals_91', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (47185920, 1)
op220.sizes = ([3, 20480, 768], [])
buf219_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_91_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf220_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op220_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_91', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf220', get_index_2, add, None)
        return store


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 15728640})]
op221.unmet_dependencies = [   MemoryDep('buf220', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (15728640, 1)
op221.sizes = ([1024, 20, 768], [])
buf220_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf221_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op221_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf221', get_index_1, load, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 15728640})]
op222.unmet_dependencies = [   MemoryDep('buf220', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (15728640, 1)
op222.sizes = ([1024, 20, 768], [])
buf220_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf222_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op222_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf222', get_index_1, load, None)
        return store


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 15728640})]
op223.unmet_dependencies = [   MemoryDep('buf220', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op223.met_dependencies = []
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (15728640, 1)
op223.sizes = ([1024, 20, 768], [])
buf220_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf223_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op223_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf223', get_index_1, load, None)
        return store


op224: ExternKernelSchedulerNode(FallbackKernel)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = 
    [   StarDep(name='buf221', mode=None),
        StarDep(name='buf222', mode=None),
        StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='fwd_rng_state_7', mode=None)]
op224.outputs = [
    buf224: FallbackKernel
    buf224.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op225: ExternKernelSchedulerNode(MultiOutput)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: MultiOutput
    buf225.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = None


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 589824})]
op230.unmet_dependencies = []
op230.met_dependencies = [MemoryDep('primals_93', c0, {c0: 589824})]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (589824, 1)
op230.sizes = ([589824], [])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf230_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op230_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_93', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf230', get_index_1, to_dtype, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf225', mode=None), StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = extern_kernels.mm


op232_op233_op234_op236: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op232_op233_op234_op236.writes = 
    [   MemoryDep('buf232', c0, {c0: 15728640}),
        MemoryDep('buf233', c0, {c0: 20480}),
        MemoryDep('buf234', c0, {c0: 20480}),
        MemoryDep('buf236', c0, {c0: 15728640})]
op232_op233_op234_op236.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 15728640}),
        MemoryDep('buf231', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op232_op233_op234_op236.met_dependencies = 
    [   MemoryDep('primals_94', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_95', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_96', c1, {c0: 20480, c1: 768})]
op232_op233_op234_op236.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op232_op233_op234_op236.snodes[0] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 15728640})]
op232.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 15728640}),
        MemoryDep('buf231', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op232.met_dependencies = [MemoryDep('primals_94', c1, {c0: 20480, c1: 768})]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (15728640, 1)
op232.sizes = ([20, 1024, 768], [])
buf213_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf231_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_94_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op232_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf231', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_94', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf232', get_index_3, add_1, None)
        return store
op232_op233_op234_op236.snodes[1] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 20480})]
op233.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 15728640})]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (20480, 768)
op233.sizes = ([20480], [768])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op233_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, getitem)
        return store_reduction
op232_op233_op234_op236.snodes[2] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 20480})]
op234.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 15728640})]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (20480, 768)
op234.sizes = ([20480], [768])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op234_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf234', get_index_1, getitem_1)
        return store_reduction
op232_op233_op234_op236.snodes[3] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 15728640})]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 15728640}),
        MemoryDep('buf233', c0, {c0: 20480}),
        MemoryDep('buf234', c0, {c0: 20480})]
op236.met_dependencies = 
    [   MemoryDep('primals_95', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_96', c1, {c0: 20480, c1: 768})]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (15728640, 1)
op236.sizes = ([20480, 768], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf234_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_96_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op236_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf233', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf234', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_95', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_96', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, to_dtype, None)
        return store


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1179648})]
op237.unmet_dependencies = []
op237.met_dependencies = [MemoryDep('primals_97', c0, {c0: 1179648})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (1179648, 1)
op237.sizes = ([1179648], [])
primals_97_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op237_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_97', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf237', get_index_1, to_dtype, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf237', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 31457280})]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 31457280})]
op239.met_dependencies = [MemoryDep('primals_98', c1, {c0: 20480, c1: 1536})]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (31457280, 1)
op239.sizes = ([20480, 1536], [])
buf238_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf239_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op239_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_98', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_98', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf239', get_index_4, to_dtype_4, None)
        return store


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 1179648})]
op240.unmet_dependencies = []
op240.met_dependencies = [MemoryDep('primals_99', c0, {c0: 1179648})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (1179648, 1)
op240.sizes = ([1179648], [])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf240_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op240_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_99', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf240', get_index_1, to_dtype, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf239', mode=None), StarDep(name='buf240', mode=None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242_op243_op244_op245_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op242_op243_op244_op245_op247.writes = 
    [   MemoryDep('buf242', c0, {c0: 15728640}),
        MemoryDep('buf243', c0, {c0: 15728640}),
        MemoryDep('buf244', c0, {c0: 20480}),
        MemoryDep('buf245', c0, {c0: 20480}),
        MemoryDep('buf247', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op242_op243_op244_op245_op247.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 15728640}),
        MemoryDep('buf241', c0, {c0: 15728640}),
        MemoryDep('buf31', 7, {})]
op242_op243_op244_op245_op247.met_dependencies = 
    [   MemoryDep('primals_100', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_101', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_102', c1, {c0: 20480, c1: 768})]
op242_op243_op244_op245_op247.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op242_op243_op244_op245_op247.snodes[0] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 15728640})]
op242.unmet_dependencies = [MemoryDep('buf31', 7, {})]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (15728640, 1)
op242.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op242_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 7
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 7)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf242', get_index_1, rand, None)
        return store
op242_op243_op244_op245_op247.snodes[1] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 15728640})]
op243.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 15728640}),
        MemoryDep('buf241', c0, {c0: 15728640}),
        MemoryDep('buf242', c0, {c0: 15728640})]
op243.met_dependencies = [MemoryDep('primals_100', c1, {c0: 20480, c1: 768})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (15728640, 1)
op243.sizes = ([20480, 768], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf242_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf241_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_100_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op243_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf242', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf241', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_100', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf243', get_index_4, add_1, None)
        return store
op242_op243_op244_op245_op247.snodes[2] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 20480})]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 15728640})]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (20480, 768)
op244.sizes = ([20480], [768])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op244_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem)
        return store_reduction
op242_op243_op244_op245_op247.snodes[3] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 20480})]
op245.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 15728640})]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (20480, 768)
op245.sizes = ([20480], [768])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op245_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_1, getitem_1)
        return store_reduction
op242_op243_op244_op245_op247.snodes[4] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op247.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 15728640}),
        MemoryDep('buf244', c0, {c0: 20480}),
        MemoryDep('buf245', c0, {c0: 20480})]
op247.met_dependencies = 
    [   MemoryDep('primals_101', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_102', c1, {c0: 20480, c1: 768})]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (15728640, 1)
op247.sizes = ([20, 1024, 768], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf244_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_101_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_102_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf247_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op247_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf245', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_101', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_102', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf247', get_index_5, to_dtype, None)
        return store


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 1769472})]
op248.unmet_dependencies = []
op248.met_dependencies = [MemoryDep('primals_104', c0, {c0: 1769472})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (1769472, 1)
op248.sizes = ([1769472], [])
primals_104_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf248_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op248_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_104', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf248', get_index_1, to_dtype, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf247', mode=None), StarDep(name='buf248', mode=None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 47185920})]
op250.unmet_dependencies = [MemoryDep('buf249', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op250.met_dependencies = [MemoryDep('primals_103', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (47185920, 1)
op250.sizes = ([3, 20480, 768], [])
buf249_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_103_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf250_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op250_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_103', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf250', get_index_2, add, None)
        return store


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 15728640})]
op251.unmet_dependencies = [   MemoryDep('buf250', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (15728640, 1)
op251.sizes = ([1024, 20, 768], [])
buf250_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf251_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op251_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf251', get_index_1, load, None)
        return store


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 15728640})]
op252.unmet_dependencies = [   MemoryDep('buf250', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (15728640, 1)
op252.sizes = ([1024, 20, 768], [])
buf250_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf252_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op252_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf252', get_index_1, load, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 15728640})]
op253.unmet_dependencies = [   MemoryDep('buf250', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (15728640, 1)
op253.sizes = ([1024, 20, 768], [])
buf250_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf253_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op253_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf253', get_index_1, load, None)
        return store


op254: ExternKernelSchedulerNode(FallbackKernel)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = 
    [   StarDep(name='buf251', mode=None),
        StarDep(name='buf252', mode=None),
        StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='fwd_rng_state_8', mode=None)]
op254.outputs = [
    buf254: FallbackKernel
    buf254.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op255: ExternKernelSchedulerNode(MultiOutput)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: MultiOutput
    buf255.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = None


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 589824})]
op260.unmet_dependencies = []
op260.met_dependencies = [MemoryDep('primals_105', c0, {c0: 589824})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (589824, 1)
op260.sizes = ([589824], [])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf260_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op260_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_105', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf260', get_index_1, to_dtype, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf255', mode=None), StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = extern_kernels.mm


op262_op263_op264_op266: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op262_op263_op264_op266.writes = 
    [   MemoryDep('buf262', c0, {c0: 15728640}),
        MemoryDep('buf263', c0, {c0: 20480}),
        MemoryDep('buf264', c0, {c0: 20480}),
        MemoryDep('buf266', c0, {c0: 15728640})]
op262_op263_op264_op266.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 15728640}),
        MemoryDep('buf261', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op262_op263_op264_op266.met_dependencies = 
    [   MemoryDep('primals_106', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_107', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_108', c1, {c0: 20480, c1: 768})]
op262_op263_op264_op266.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op262_op263_op264_op266.snodes[0] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 15728640})]
op262.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 15728640}),
        MemoryDep('buf261', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op262.met_dependencies = [MemoryDep('primals_106', c1, {c0: 20480, c1: 768})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (15728640, 1)
op262.sizes = ([20, 1024, 768], [])
buf243_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf261_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_106_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op262_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf261', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_106', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf262', get_index_3, add_1, None)
        return store
op262_op263_op264_op266.snodes[1] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 20480})]
op263.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 15728640})]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (20480, 768)
op263.sizes = ([20480], [768])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op263_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf263', get_index_1, getitem)
        return store_reduction
op262_op263_op264_op266.snodes[2] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 20480})]
op264.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 15728640})]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (20480, 768)
op264.sizes = ([20480], [768])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op264_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf264', get_index_1, getitem_1)
        return store_reduction
op262_op263_op264_op266.snodes[3] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 15728640})]
op266.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 15728640}),
        MemoryDep('buf263', c0, {c0: 20480}),
        MemoryDep('buf264', c0, {c0: 20480})]
op266.met_dependencies = 
    [   MemoryDep('primals_107', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_108', c1, {c0: 20480, c1: 768})]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (15728640, 1)
op266.sizes = ([20480, 768], [])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf263_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_108_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf266_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op266_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf263', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf264', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_107', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_108', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf266', get_index_5, to_dtype, None)
        return store


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 1179648})]
op267.unmet_dependencies = []
op267.met_dependencies = [MemoryDep('primals_109', c0, {c0: 1179648})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (1179648, 1)
op267.sizes = ([1179648], [])
primals_109_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op267_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_109', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf267', get_index_1, to_dtype, None)
        return store


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf266', mode=None), StarDep(name='buf267', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 31457280})]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 31457280})]
op269.met_dependencies = [MemoryDep('primals_110', c1, {c0: 20480, c1: 1536})]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (31457280, 1)
op269.sizes = ([20480, 1536], [])
buf268_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf269_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op269_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_110', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf268', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_110', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf269', get_index_4, to_dtype_4, None)
        return store


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 1179648})]
op270.unmet_dependencies = []
op270.met_dependencies = [MemoryDep('primals_111', c0, {c0: 1179648})]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (1179648, 1)
op270.sizes = ([1179648], [])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op270_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_111', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf270', get_index_1, to_dtype, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelOut)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None), StarDep(name='buf270', mode=None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ExternKernelOut
    buf271.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.mm


op272_op273_op274_op275_op277: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op272_op273_op274_op275_op277.writes = 
    [   MemoryDep('buf272', c0, {c0: 15728640}),
        MemoryDep('buf273', c0, {c0: 15728640}),
        MemoryDep('buf274', c0, {c0: 20480}),
        MemoryDep('buf275', c0, {c0: 20480}),
        MemoryDep('buf277', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op272_op273_op274_op275_op277.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 15728640}),
        MemoryDep('buf271', c0, {c0: 15728640}),
        MemoryDep('buf31', 8, {})]
op272_op273_op274_op275_op277.met_dependencies = 
    [   MemoryDep('primals_112', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_113', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_114', c1, {c0: 20480, c1: 768})]
op272_op273_op274_op275_op277.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op272_op273_op274_op275_op277.snodes[0] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 15728640})]
op272.unmet_dependencies = [MemoryDep('buf31', 8, {})]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (15728640, 1)
op272.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op272_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 8
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 8)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf272', get_index_1, rand, None)
        return store
op272_op273_op274_op275_op277.snodes[1] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 15728640})]
op273.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 15728640}),
        MemoryDep('buf271', c0, {c0: 15728640}),
        MemoryDep('buf272', c0, {c0: 15728640})]
op273.met_dependencies = [MemoryDep('primals_112', c1, {c0: 20480, c1: 768})]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (15728640, 1)
op273.sizes = ([20480, 768], [])
buf262_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf271_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_112_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op273_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf272', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf271', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_112', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf273', get_index_4, add_1, None)
        return store
op272_op273_op274_op275_op277.snodes[2] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 20480})]
op274.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 15728640})]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf274.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (20480, 768)
op274.sizes = ([20480], [768])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op274_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_1, getitem)
        return store_reduction
op272_op273_op274_op275_op277.snodes[3] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 20480})]
op275.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 15728640})]
op275.met_dependencies = []
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf275.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (20480, 768)
op275.sizes = ([20480], [768])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op275_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf275', get_index_1, getitem_1)
        return store_reduction
op272_op273_op274_op275_op277.snodes[4] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op277.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 15728640}),
        MemoryDep('buf274', c0, {c0: 20480}),
        MemoryDep('buf275', c0, {c0: 20480})]
op277.met_dependencies = 
    [   MemoryDep('primals_113', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_114', c1, {c0: 20480, c1: 768})]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (15728640, 1)
op277.sizes = ([20, 1024, 768], [])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf274_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf275_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_114_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf277_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op277_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf274', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf275', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_113', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_114', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf277', get_index_5, to_dtype, None)
        return store


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1769472})]
op278.unmet_dependencies = []
op278.met_dependencies = [MemoryDep('primals_116', c0, {c0: 1769472})]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (1769472, 1)
op278.sizes = ([1769472], [])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf278_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op278_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_116', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf278', get_index_1, to_dtype, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf277', mode=None), StarDep(name='buf278', mode=None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 47185920})]
op280.unmet_dependencies = [MemoryDep('buf279', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op280.met_dependencies = [MemoryDep('primals_115', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
    ]
]
op280.group.device = cuda:0
op280.group.iteration = (47185920, 1)
op280.sizes = ([3, 20480, 768], [])
buf279_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_115_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf280_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op280_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_115', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf280', get_index_2, add, None)
        return store


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 15728640})]
op281.unmet_dependencies = [   MemoryDep('buf280', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (15728640, 1)
op281.sizes = ([1024, 20, 768], [])
buf280_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf281_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op281_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf281', get_index_1, load, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 15728640})]
op282.unmet_dependencies = [   MemoryDep('buf280', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (15728640, 1)
op282.sizes = ([1024, 20, 768], [])
buf280_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf282_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op282_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 15728640})]
op283.unmet_dependencies = [   MemoryDep('buf280', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (15728640, 1)
op283.sizes = ([1024, 20, 768], [])
buf280_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op283_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf283', get_index_1, load, None)
        return store


op284: ExternKernelSchedulerNode(FallbackKernel)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = 
    [   StarDep(name='buf281', mode=None),
        StarDep(name='buf282', mode=None),
        StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='fwd_rng_state_9', mode=None)]
op284.outputs = [
    buf284: FallbackKernel
    buf284.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op285: ExternKernelSchedulerNode(MultiOutput)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: MultiOutput
    buf285.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op285.node.kernel = None


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 589824})]
op290.unmet_dependencies = []
op290.met_dependencies = [MemoryDep('primals_117', c0, {c0: 589824})]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (589824, 1)
op290.sizes = ([589824], [])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf290_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op290_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_117', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf290', get_index_1, to_dtype, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf285', mode=None), StarDep(name='buf290', mode=None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292_op293_op294_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op292_op293_op294_op296.writes = 
    [   MemoryDep('buf292', c0, {c0: 15728640}),
        MemoryDep('buf293', c0, {c0: 20480}),
        MemoryDep('buf294', c0, {c0: 20480}),
        MemoryDep('buf296', c0, {c0: 15728640})]
op292_op293_op294_op296.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 15728640}),
        MemoryDep('buf291', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op292_op293_op294_op296.met_dependencies = 
    [   MemoryDep('primals_118', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_119', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_120', c1, {c0: 20480, c1: 768})]
op292_op293_op294_op296.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op292_op293_op294_op296.snodes[0] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 15728640})]
op292.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 15728640}),
        MemoryDep('buf291', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op292.met_dependencies = [MemoryDep('primals_118', c1, {c0: 20480, c1: 768})]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (15728640, 1)
op292.sizes = ([20, 1024, 768], [])
buf273_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf291_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_118_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op292_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_118', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf292', get_index_3, add_1, None)
        return store
op292_op293_op294_op296.snodes[1] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 20480})]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 15728640})]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (20480, 768)
op293.sizes = ([20480], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op293_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
        return store_reduction
op292_op293_op294_op296.snodes[2] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 20480})]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 15728640})]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (20480, 768)
op294.sizes = ([20480], [768])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op294_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
        return store_reduction
op292_op293_op294_op296.snodes[3] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 15728640})]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 15728640}),
        MemoryDep('buf293', c0, {c0: 20480}),
        MemoryDep('buf294', c0, {c0: 20480})]
op296.met_dependencies = 
    [   MemoryDep('primals_119', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_120', c1, {c0: 20480, c1: 768})]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (15728640, 1)
op296.sizes = ([20480, 768], [])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf293_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf294_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_120_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf296_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op296_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_120', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf296', get_index_5, to_dtype, None)
        return store


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 1179648})]
op297.unmet_dependencies = []
op297.met_dependencies = [MemoryDep('primals_121', c0, {c0: 1179648})]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (1179648, 1)
op297.sizes = ([1179648], [])
primals_121_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf297_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op297_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_121', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf297', get_index_1, to_dtype, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelOut)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf296', mode=None), StarDep(name='buf297', mode=None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ExternKernelOut
    buf298.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op298.node.kernel = extern_kernels.mm


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 31457280})]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 31457280})]
op299.met_dependencies = [MemoryDep('primals_122', c1, {c0: 20480, c1: 1536})]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (31457280, 1)
op299.sizes = ([20480, 1536], [])
buf298_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf299_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op299_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_122', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_122', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf299', get_index_4, to_dtype_4, None)
        return store


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 1179648})]
op300.unmet_dependencies = []
op300.met_dependencies = [MemoryDep('primals_123', c0, {c0: 1179648})]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (1179648, 1)
op300.sizes = ([1179648], [])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf300_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op300_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_123', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf300', get_index_1, to_dtype, None)
        return store


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf299', mode=None), StarDep(name='buf300', mode=None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.mm


op302_op303_op304_op305_op307: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op302_op303_op304_op305_op307.writes = 
    [   MemoryDep('buf302', c0, {c0: 15728640}),
        MemoryDep('buf303', c0, {c0: 15728640}),
        MemoryDep('buf304', c0, {c0: 20480}),
        MemoryDep('buf305', c0, {c0: 20480}),
        MemoryDep('buf307', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op302_op303_op304_op305_op307.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 15728640}),
        MemoryDep('buf301', c0, {c0: 15728640}),
        MemoryDep('buf31', 9, {})]
op302_op303_op304_op305_op307.met_dependencies = 
    [   MemoryDep('primals_124', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_125', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_126', c1, {c0: 20480, c1: 768})]
op302_op303_op304_op305_op307.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf304.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf305.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op302_op303_op304_op305_op307.snodes[0] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 15728640})]
op302.unmet_dependencies = [MemoryDep('buf31', 9, {})]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (15728640, 1)
op302.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op302_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 9
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 9)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf302', get_index_1, rand, None)
        return store
op302_op303_op304_op305_op307.snodes[1] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 15728640})]
op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 15728640}),
        MemoryDep('buf301', c0, {c0: 15728640}),
        MemoryDep('buf302', c0, {c0: 15728640})]
op303.met_dependencies = [MemoryDep('primals_124', c1, {c0: 20480, c1: 768})]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (15728640, 1)
op303.sizes = ([20480, 768], [])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf301_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_124_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op303_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf301', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_124', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf303', get_index_4, add_1, None)
        return store
op302_op303_op304_op305_op307.snodes[2] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 20480})]
op304.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 15728640})]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf304.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (20480, 768)
op304.sizes = ([20480], [768])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op304_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf304', get_index_1, getitem)
        return store_reduction
op302_op303_op304_op305_op307.snodes[3] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 20480})]
op305.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 15728640})]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf305.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (20480, 768)
op305.sizes = ([20480], [768])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op305_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf305', get_index_1, getitem_1)
        return store_reduction
op302_op303_op304_op305_op307.snodes[4] =
op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op307.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 15728640}),
        MemoryDep('buf304', c0, {c0: 20480}),
        MemoryDep('buf305', c0, {c0: 20480})]
op307.met_dependencies = 
    [   MemoryDep('primals_125', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_126', c1, {c0: 20480, c1: 768})]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (15728640, 1)
op307.sizes = ([20, 1024, 768], [])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf305_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_126_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf307_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op307_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf304', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf305', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_125', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_126', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf307', get_index_5, to_dtype, None)
        return store


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 1769472})]
op308.unmet_dependencies = []
op308.met_dependencies = [MemoryDep('primals_128', c0, {c0: 1769472})]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (1769472, 1)
op308.sizes = ([1769472], [])
primals_128_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf308_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op308_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_128', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf308', get_index_1, to_dtype, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf307', mode=None), StarDep(name='buf308', mode=None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.node.kernel = extern_kernels.mm


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 47185920})]
op310.unmet_dependencies = [MemoryDep('buf309', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op310.met_dependencies = [MemoryDep('primals_127', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op310.group.device = cuda:0
op310.group.iteration = (47185920, 1)
op310.sizes = ([3, 20480, 768], [])
buf309_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_127_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf310_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op310_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_127', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf310', get_index_2, add, None)
        return store


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 15728640})]
op311.unmet_dependencies = [   MemoryDep('buf310', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (15728640, 1)
op311.sizes = ([1024, 20, 768], [])
buf310_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf311_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op311_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf311', get_index_1, load, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 15728640})]
op312.unmet_dependencies = [   MemoryDep('buf310', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (15728640, 1)
op312.sizes = ([1024, 20, 768], [])
buf310_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf312_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op312_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf312', get_index_1, load, None)
        return store


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 15728640})]
op313.unmet_dependencies = [   MemoryDep('buf310', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (15728640, 1)
op313.sizes = ([1024, 20, 768], [])
buf310_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf313_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op313_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf313', get_index_1, load, None)
        return store


op314: ExternKernelSchedulerNode(FallbackKernel)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = 
    [   StarDep(name='buf311', mode=None),
        StarDep(name='buf312', mode=None),
        StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='fwd_rng_state_10', mode=None)]
op314.outputs = [
    buf314: FallbackKernel
    buf314.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op315: ExternKernelSchedulerNode(MultiOutput)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: MultiOutput
    buf315.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = None


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 589824})]
op320.unmet_dependencies = []
op320.met_dependencies = [MemoryDep('primals_129', c0, {c0: 589824})]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (589824, 1)
op320.sizes = ([589824], [])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf320_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op320_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_129', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf320', get_index_1, to_dtype, None)
        return store


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf315', mode=None), StarDep(name='buf320', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf321.users = [NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.node.kernel = extern_kernels.mm


op322_op323_op324_op326: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op322_op323_op324_op326.writes = 
    [   MemoryDep('buf322', c0, {c0: 15728640}),
        MemoryDep('buf323', c0, {c0: 20480}),
        MemoryDep('buf324', c0, {c0: 20480}),
        MemoryDep('buf326', c0, {c0: 15728640})]
op322_op323_op324_op326.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 15728640}),
        MemoryDep('buf321', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op322_op323_op324_op326.met_dependencies = 
    [   MemoryDep('primals_130', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_131', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_132', c1, {c0: 20480, c1: 768})]
op322_op323_op324_op326.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf323.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op322_op323_op324_op326.snodes[0] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 15728640})]
op322.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 15728640}),
        MemoryDep('buf321', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op322.met_dependencies = [MemoryDep('primals_130', c1, {c0: 20480, c1: 768})]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op322.group.device = cuda:0
op322.group.iteration = (15728640, 1)
op322.sizes = ([20, 1024, 768], [])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf321_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_130_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op322_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_130', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf322', get_index_3, add_1, None)
        return store
op322_op323_op324_op326.snodes[1] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 20480})]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 15728640})]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf323.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (20480, 768)
op323.sizes = ([20480], [768])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op323_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf323', get_index_1, getitem)
        return store_reduction
op322_op323_op324_op326.snodes[2] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 20480})]
op324.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 15728640})]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (20480, 768)
op324.sizes = ([20480], [768])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op324_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_1, getitem_1)
        return store_reduction
op322_op323_op324_op326.snodes[3] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 15728640})]
op326.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 15728640}),
        MemoryDep('buf323', c0, {c0: 20480}),
        MemoryDep('buf324', c0, {c0: 20480})]
op326.met_dependencies = 
    [   MemoryDep('primals_131', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_132', c1, {c0: 20480, c1: 768})]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (15728640, 1)
op326.sizes = ([20480, 768], [])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_132_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf326_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op326_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf323', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf324', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_131', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_132', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf326', get_index_5, to_dtype, None)
        return store


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 1179648})]
op327.unmet_dependencies = []
op327.met_dependencies = [MemoryDep('primals_133', c0, {c0: 1179648})]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (1179648, 1)
op327.sizes = ([1179648], [])
primals_133_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf327_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op327_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_133', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf327', get_index_1, to_dtype, None)
        return store


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf326', mode=None), StarDep(name='buf327', mode=None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
]
op328.node.kernel = extern_kernels.mm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 31457280})]
op329.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 31457280})]
op329.met_dependencies = [MemoryDep('primals_134', c1, {c0: 20480, c1: 1536})]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (31457280, 1)
op329.sizes = ([20480, 1536], [])
buf328_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf329_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op329_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_134', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf328', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_134', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf329', get_index_4, to_dtype_4, None)
        return store


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 1179648})]
op330.unmet_dependencies = []
op330.met_dependencies = [MemoryDep('primals_135', c0, {c0: 1179648})]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (1179648, 1)
op330.sizes = ([1179648], [])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf330_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op330_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_135', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf330', get_index_1, to_dtype, None)
        return store


op331: ExternKernelSchedulerNode(ExternKernelOut)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf329', mode=None), StarDep(name='buf330', mode=None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ExternKernelOut
    buf331.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf331.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op331.node.kernel = extern_kernels.mm


op332_op333_op334_op335_op337: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op332_op333_op334_op335_op337.writes = 
    [   MemoryDep('buf332', c0, {c0: 15728640}),
        MemoryDep('buf333', c0, {c0: 15728640}),
        MemoryDep('buf334', c0, {c0: 20480}),
        MemoryDep('buf335', c0, {c0: 20480}),
        MemoryDep('buf337', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op332_op333_op334_op335_op337.unmet_dependencies = 
    [   MemoryDep('buf31', 10, {}),
        MemoryDep('buf322', c0, {c0: 15728640}),
        MemoryDep('buf331', c0, {c0: 15728640})]
op332_op333_op334_op335_op337.met_dependencies = 
    [   MemoryDep('primals_136', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_137', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_138', c1, {c0: 20480, c1: 768})]
op332_op333_op334_op335_op337.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf332.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf334.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf335.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op332_op333_op334_op335_op337.snodes[0] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 15728640})]
op332.unmet_dependencies = [MemoryDep('buf31', 10, {})]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf332.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (15728640, 1)
op332.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op332_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 10
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 10)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf332', get_index_1, rand, None)
        return store
op332_op333_op334_op335_op337.snodes[1] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 15728640})]
op333.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 15728640}),
        MemoryDep('buf331', c0, {c0: 15728640}),
        MemoryDep('buf332', c0, {c0: 15728640})]
op333.met_dependencies = [MemoryDep('primals_136', c1, {c0: 20480, c1: 768})]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (15728640, 1)
op333.sizes = ([20480, 768], [])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf332_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf331_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_136_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op333_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf331', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_136', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf333', get_index_4, add_1, None)
        return store
op332_op333_op334_op335_op337.snodes[2] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 20480})]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 15728640})]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf334.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (20480, 768)
op334.sizes = ([20480], [768])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op334_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf334', get_index_1, getitem)
        return store_reduction
op332_op333_op334_op335_op337.snodes[3] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 20480})]
op335.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 15728640})]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf335.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (20480, 768)
op335.sizes = ([20480], [768])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op335_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf335', get_index_1, getitem_1)
        return store_reduction
op332_op333_op334_op335_op337.snodes[4] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op337.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 15728640}),
        MemoryDep('buf334', c0, {c0: 20480}),
        MemoryDep('buf335', c0, {c0: 20480})]
op337.met_dependencies = 
    [   MemoryDep('primals_137', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_138', c1, {c0: 20480, c1: 768})]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (15728640, 1)
op337.sizes = ([20, 1024, 768], [])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf334_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_137_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_138_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf337_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op337_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf335', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_137', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_138', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf337', get_index_5, to_dtype, None)
        return store


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1769472})]
op338.unmet_dependencies = []
op338.met_dependencies = [MemoryDep('primals_140', c0, {c0: 1769472})]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (1769472, 1)
op338.sizes = ([1769472], [])
primals_140_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf338_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
class op338_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_140', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, to_dtype, None)
        return store


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf337', mode=None), StarDep(name='buf338', mode=None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf339.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.node.kernel = extern_kernels.mm


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 47185920})]
op340.unmet_dependencies = [MemoryDep('buf339', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op340.met_dependencies = [MemoryDep('primals_139', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (47185920, 1)
op340.sizes = ([3, 20480, 768], [])
buf339_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_139_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf340_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op340_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_139', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf340', get_index_2, add, None)
        return store


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 15728640})]
op341.unmet_dependencies = [   MemoryDep('buf340', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (15728640, 1)
op341.sizes = ([1024, 20, 768], [])
buf340_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op341_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf341', get_index_1, load, None)
        return store


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 15728640})]
op342.unmet_dependencies = [   MemoryDep('buf340', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (15728640, 1)
op342.sizes = ([1024, 20, 768], [])
buf340_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf342_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op342_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf342', get_index_1, load, None)
        return store


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 15728640})]
op343.unmet_dependencies = [   MemoryDep('buf340', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (15728640, 1)
op343.sizes = ([1024, 20, 768], [])
buf340_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf343_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op343_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf343', get_index_1, load, None)
        return store


op344: ExternKernelSchedulerNode(FallbackKernel)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = 
    [   StarDep(name='buf341', mode=None),
        StarDep(name='buf342', mode=None),
        StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='fwd_rng_state_11', mode=None)]
op344.outputs = [
    buf344: FallbackKernel
    buf344.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op345: ExternKernelSchedulerNode(MultiOutput)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: MultiOutput
    buf345.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op345.node.kernel = None


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 589824})]
op350.unmet_dependencies = []
op350.met_dependencies = [MemoryDep('primals_141', c0, {c0: 589824})]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (589824, 1)
op350.sizes = ([589824], [])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf350_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op350_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_141', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf350', get_index_1, to_dtype, None)
        return store


op351: ExternKernelSchedulerNode(ExternKernelOut)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf345', mode=None), StarDep(name='buf350', mode=None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ExternKernelOut
    buf351.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.node.kernel = extern_kernels.mm


op352_op353_op354_op356: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op352_op353_op354_op356.writes = 
    [   MemoryDep('buf352', c0, {c0: 15728640}),
        MemoryDep('buf353', c0, {c0: 20480}),
        MemoryDep('buf354', c0, {c0: 20480}),
        MemoryDep('buf356', c0, {c0: 15728640})]
op352_op353_op354_op356.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 15728640}),
        MemoryDep('buf351', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op352_op353_op354_op356.met_dependencies = 
    [   MemoryDep('primals_142', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_143', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_144', c1, {c0: 20480, c1: 768})]
op352_op353_op354_op356.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf353.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf354.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op352_op353_op354_op356.snodes[0] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 15728640})]
op352.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 15728640}),
        MemoryDep('buf351', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op352.met_dependencies = [MemoryDep('primals_142', c1, {c0: 20480, c1: 768})]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (15728640, 1)
op352.sizes = ([20, 1024, 768], [])
buf333_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf351_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_142_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op352_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 768*p0 + 15360*p1 + p2
    index2 = p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf351', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_142', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf352', get_index_3, add_1, None)
        return store
op352_op353_op354_op356.snodes[1] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 20480})]
op353.unmet_dependencies = [MemoryDep('buf352', c0, {c0: 15728640})]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf353.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (20480, 768)
op353.sizes = ([20480], [768])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op353_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf353', get_index_1, getitem)
        return store_reduction
op352_op353_op354_op356.snodes[2] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 20480})]
op354.unmet_dependencies = [MemoryDep('buf352', c0, {c0: 15728640})]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf354.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (20480, 768)
op354.sizes = ([20480], [768])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op354_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf354', get_index_1, getitem_1)
        return store_reduction
op352_op353_op354_op356.snodes[3] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 15728640})]
op356.unmet_dependencies = 
    [   MemoryDep('buf352', c0, {c0: 15728640}),
        MemoryDep('buf353', c0, {c0: 20480}),
        MemoryDep('buf354', c0, {c0: 20480})]
op356.met_dependencies = 
    [   MemoryDep('primals_143', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_144', c1, {c0: 20480, c1: 768})]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (15728640, 1)
op356.sizes = ([20480, 768], [])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_144_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op356_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf353', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf354', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_143', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_144', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf356', get_index_5, to_dtype, None)
        return store


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 1179648})]
op357.unmet_dependencies = []
op357.met_dependencies = [MemoryDep('primals_145', c0, {c0: 1179648})]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1179648, 1)
op357.sizes = ([1179648], [])
primals_145_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf357_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
class op357_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_145', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf357', get_index_1, to_dtype, None)
        return store


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf356', mode=None), StarDep(name='buf357', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf358.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False)]
]
op358.node.kernel = extern_kernels.mm


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 31457280})]
op359.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 31457280})]
op359.met_dependencies = [MemoryDep('primals_146', c1, {c0: 20480, c1: 1536})]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (31457280, 1)
op359.sizes = ([20480, 1536], [])
buf358_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf359_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op359_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_146', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf358', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_146', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf359', get_index_4, to_dtype_4, None)
        return store


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 1179648})]
op360.unmet_dependencies = []
op360.met_dependencies = [MemoryDep('primals_147', c0, {c0: 1179648})]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (1179648, 1)
op360.sizes = ([1179648], [])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf360_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op360_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_147', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf360', get_index_1, to_dtype, None)
        return store


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf359', mode=None), StarDep(name='buf360', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op361.node.kernel = extern_kernels.mm


op362_op363: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op362_op363.writes = 
    [   MemoryDep('buf362', c0, {c0: 15728640}),
        MemoryDep('buf363', c0, {c0: 15728640})]
op362_op363.unmet_dependencies = 
    [   MemoryDep('buf31', 11, {}),
        MemoryDep('buf352', c0, {c0: 15728640}),
        MemoryDep('buf361', c0, {c0: 15728640})]
op362_op363.met_dependencies = [MemoryDep('primals_148', c1, {c0: 20480, c1: 768})]
op362_op363.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf363.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op362_op363.snodes[0] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 15728640})]
op362.unmet_dependencies = [MemoryDep('buf31', 11, {})]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (15728640, 1)
op362.sizes = ([15728640], [])
buf31_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op362_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 11
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('buf31', 11)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf362', get_index_1, rand, None)
        return store
op362_op363.snodes[1] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 15728640})]
op363.unmet_dependencies = 
    [   MemoryDep('buf352', c0, {c0: 15728640}),
        MemoryDep('buf361', c0, {c0: 15728640}),
        MemoryDep('buf362', c0, {c0: 15728640})]
op363.met_dependencies = [MemoryDep('primals_148', c1, {c0: 20480, c1: 768})]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf363.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (15728640, 1)
op363.sizes = ([20480, 768], [])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf361_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_148_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf363_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op363_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype, constant)
        to_dtype_1 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf361', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_148', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_2, to_dtype_2)
        mul = ops.mul(to_dtype_1, add)
        constant_1 = ops.constant(1.25, torch.float16)
        mul_1 = ops.mul(mul, constant_1)
        to_dtype_3 = ops.to_dtype(mul_1, torch.float32, src_dtype = torch.float16)
        add_1 = ops.add(load, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf363', get_index_4, to_dtype_4, None)
        return store


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 98304})]
op364.unmet_dependencies = []
op364.met_dependencies = [MemoryDep('primals_149', c0, {c0: 98304})]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float16, size=[768, 128], stride=[1, 768])
    buf364.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (98304, 1)
op364.sizes = ([98304], [])
primals_149_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
buf364_layout = FixedLayout('cuda:0', torch.float16, size=[768, 128], stride=[1, 768])
class op364_loop_body:
    var_ranges = {p0: 98304}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_149', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf364', get_index_1, to_dtype, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf363', mode=None), StarDep(name='buf364', mode=None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 128], stride=[128, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 2621440})]
op366.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 2621440})]
op366.met_dependencies = [MemoryDep('primals_150', c1, {c0: 20480, c1: 128})]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 128], stride=[131072, 128, 1])
    buf366.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op366.group.device = cuda:0
op366.group.iteration = (2621440, 1)
op366.sizes = ([20480, 128], [])
buf365_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 128], stride=[128, 1])
primals_150_layout = FixedLayout('cuda:0', torch.float32, size=[128], stride=[1])
buf366_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 128], stride=[131072, 128, 1])
class op366_loop_body:
    var_ranges = {p0: 20480, p1: 128}
    index0 = 128*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_150', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, relu, None)
        return store


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 2048})]
op367.unmet_dependencies = []
op367.met_dependencies = [MemoryDep('primals_151', c0, {c0: 2048})]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float16, size=[128, 16], stride=[1, 128])
    buf367.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op367.group.device = cuda:0
op367.group.iteration = (2048, 1)
op367.sizes = ([2048], [])
primals_151_layout = FixedLayout('cuda:0', torch.float32, size=[16, 128], stride=[128, 1])
buf367_layout = FixedLayout('cuda:0', torch.float16, size=[128, 16], stride=[1, 128])
class op367_loop_body:
    var_ranges = {p0: 2048}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_151', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf367', get_index_1, to_dtype, None)
        return store


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf366', mode=None), StarDep(name='buf367', mode=None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 16], stride=[16, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op368.node.kernel = extern_kernels.mm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 327680})]
op369.unmet_dependencies = []
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
    buf369.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (327680, 1)
op369.sizes = ([327680], [])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
class op369_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf369', get_index, constant, None)
        return store


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 327680})]
op370.unmet_dependencies = []
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
    buf370.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (327680, 1)
op370.sizes = ([327680], [])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
class op370_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        constant = ops.constant(0.0, torch.float32)
        get_index = self.get_index('index0')
        store = ops.store('buf370', get_index, constant, None)
        return store


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 327680}, atomic_add)]
op371.unmet_dependencies = 
    [   MemoryDep('buf368', 512*c0 + 4*c1 + 16*c2 + c3, {c0: 640, c1: 4, c2: 32, c3: 4}),
        StarDep(name='buf370', mode='atomic_add')]
op371.met_dependencies = [MemoryDep('primals_152', 4*c1 + c3, {c0: 640, c1: 4, c2: 32, c3: 4})]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
    buf371.mutations = ['buf370']
    buf371.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
    ]
]
op371.group.device = cuda:0
op371.group.iteration = (327680, 1)
op371.sizes = ([20, 32, 4, 32, 4], [])
buf368_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 16], stride=[16, 1])
primals_152_layout = FixedLayout('cuda:0', torch.float32, size=[16], stride=[1])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
class op371_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 4, p3: 32, p4: 4}
    index0 = 4*p1 + p2
    index1 = 128
    index2 = 4*p3 + p4
    index3 = 16384*p0 + 512*p1 + 4*p2 + 16*p3 + p4
    index4 = 4*p2 + p4
    index5 = 16384*p0 + 512*p1 + 128*p2 + 4*p3 + p4
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf368', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('primals_152', get_index_5)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf371', get_index_6, to_dtype_1, 'atomic_add')
        return store


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 32})]
op372.unmet_dependencies = []
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (32, 1)
op372.sizes = ([32], [])
buf372_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
class op372_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(4.0, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        to_dtype = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf372', get_index_1, to_dtype, None)
        return store


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 32})]
op373.unmet_dependencies = []
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (32, 1)
op373.sizes = ([32], [])
buf373_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
class op373_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(4.0, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        to_dtype = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(127, torch.int64)
        minimum = ops.minimum(add_1, constant_5)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf373', get_index_1, minimum, None)
        return store


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 32})]
op374.unmet_dependencies = []
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (32, 1)
op374.sizes = ([32], [])
buf374_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
class op374_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(4.0, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        to_dtype = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf374', get_index_1, to_dtype, None)
        return store


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 32})]
op375.unmet_dependencies = []
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op375.group.device = cuda:0
op375.group.iteration = (32, 1)
op375.sizes = ([32], [])
buf375_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
class op375_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(4.0, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        to_dtype = ops.to_dtype(maximum, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(1, torch.int64)
        add_1 = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(127, torch.int64)
        minimum = ops.minimum(add_1, constant_5)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf375', get_index_1, minimum, None)
        return store


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 32})]
op376.unmet_dependencies = []
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
    buf376.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (32, 1)
op376.sizes = ([32], [])
buf376_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
class op376_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(4.0, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_4 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_4)
        constant_5 = ops.constant(4.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_6)
        constant_7 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_7)
        to_dtype = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32, src_dtype = torch.int64)
        sub_2 = ops.sub(maximum, to_dtype_1)
        constant_8 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_9)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf376', get_index_2, minimum, None)
        return store


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 32})]
op378.unmet_dependencies = []
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (32, 1)
op378.sizes = ([32], [])
buf378_layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
class op378_loop_body:
    var_ranges = {p0: 32}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.5, torch.float32)
        add = ops.add(index_expr, constant)
        constant_1 = ops.constant(4.0, torch.float32)
        mul = ops.mul(add, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        sub = ops.sub(mul, constant_2)
        constant_3 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(sub, constant_3)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        constant_4 = ops.constant(0.5, torch.float32)
        add_1 = ops.add(index_expr_1, constant_4)
        constant_5 = ops.constant(4.0, torch.float32)
        mul_1 = ops.mul(add_1, constant_5)
        constant_6 = ops.constant(0.5, torch.float32)
        sub_1 = ops.sub(mul_1, constant_6)
        constant_7 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(sub_1, constant_7)
        to_dtype = ops.to_dtype(maximum_1, torch.int64, src_dtype = torch.float32)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32, src_dtype = torch.int64)
        sub_2 = ops.sub(maximum, to_dtype_1)
        constant_8 = ops.constant(0.0, torch.float32)
        maximum_2 = ops.maximum(sub_2, constant_8)
        constant_9 = ops.constant(1.0, torch.float32)
        minimum = ops.minimum(maximum_2, constant_9)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf378', get_index_2, minimum, None)
        return store


op377_op379: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op377_op379.writes = [MemoryDep('buf377', c0, {c0: 20480}), MemoryDep('buf379', c0, {c0: 20480})]
op377_op379.unmet_dependencies = 
    [   MemoryDep('buf371', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}),
        MemoryDep('buf371', 16384*c0 + 128*tmp2 + tmp3, {c0: 20}),
        MemoryDep('buf371', 16384*c0 + 128*tmp4 + tmp5, {c0: 20}),
        MemoryDep('buf372', c1, {c0: 20, c1: 32}),
        MemoryDep('buf373', c1, {c0: 20, c1: 32}),
        MemoryDep('buf374', c1, {c0: 640, c1: 32}),
        MemoryDep('buf375', c1, {c0: 640, c1: 32}),
        MemoryDep('buf376', c1, {c0: 640, c1: 32}),
        MemoryDep('buf378', c1, {c0: 20, c1: 32})]
op377_op379.met_dependencies = []
op377_op379.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 20480, 32, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=True, is_weak=False)]
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
    buf379.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op377_op379.snodes[0] =
op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 20480})]
op377.unmet_dependencies = 
    [   MemoryDep('buf371', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}),
        MemoryDep('buf371', 16384*c0 + 128*tmp2 + tmp3, {c0: 20}),
        MemoryDep('buf371', 16384*c0 + 128*tmp4 + tmp5, {c0: 20}),
        MemoryDep('buf372', c1, {c0: 20, c1: 32}),
        MemoryDep('buf374', c1, {c0: 640, c1: 32}),
        MemoryDep('buf375', c1, {c0: 640, c1: 32}),
        MemoryDep('buf376', c1, {c0: 640, c1: 32})]
op377.met_dependencies = []
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 20480, 32, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=True, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (20480, 1)
op377.sizes = ([20, 32, 32], [])
buf372_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
buf374_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf375_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf376_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
buf377_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 20480, 32, 1])
class op377_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 32}
    index0 = p1
    index1 = p2
    index2 = 128*indirect0 + indirect1 + 16384*p0
    index3 = 128*indirect2 + indirect3 + 16384*p0
    index4 = 128*indirect4 + indirect5 + 16384*p0
    index5 = 1024*p0 + 32*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf374', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf370', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf372', get_index_3)
        set_indirect2 = self.set_indirect2(load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf375', get_index_4)
        set_indirect3 = self.set_indirect3(load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf370', get_index_5)
        get_index_6 = self.get_index('index0')
        load_6 = ops.load('buf372', get_index_6)
        set_indirect4 = self.set_indirect4(load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf374', get_index_7)
        set_indirect5 = self.set_indirect5(load_7)
        get_index_8 = self.get_index('index4')
        load_8 = ops.load('buf370', get_index_8)
        sub = ops.sub(load_5, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('buf376', get_index_9)
        mul = ops.mul(sub, load_9)
        add = ops.add(load_2, mul)
        get_index_10 = self.get_index('index5')
        store = ops.store('buf377', get_index_10, add, None)
        return store
op377_op379.snodes[1] =
op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 20480})]
op379.unmet_dependencies = 
    [   MemoryDep('buf371', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}),
        MemoryDep('buf371', 16384*c0 + 128*tmp2 + tmp3, {c0: 20}),
        MemoryDep('buf371', 16384*c0 + 128*tmp4 + tmp5, {c0: 20}),
        MemoryDep('buf373', c1, {c0: 20, c1: 32}),
        MemoryDep('buf374', c1, {c0: 640, c1: 32}),
        MemoryDep('buf375', c1, {c0: 640, c1: 32}),
        MemoryDep('buf376', c1, {c0: 640, c1: 32}),
        MemoryDep('buf377', c0, {c0: 20480}),
        MemoryDep('buf378', c1, {c0: 20, c1: 32})]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
    buf379.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (20480, 1)
op379.sizes = ([20, 32, 32], [])
buf377_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 32, 32], stride=[1024, 20480, 32, 1])
buf373_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
buf374_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf375_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf371_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf376_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
buf378_layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
buf379_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
class op379_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 32}
    index0 = 1024*p0 + 32*p1 + p2
    index1 = p1
    index2 = p2
    index3 = 128*indirect0 + indirect1 + 16384*p0
    index4 = 128*indirect2 + indirect3 + 16384*p0
    index5 = 128*indirect4 + indirect5 + 16384*p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf373', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf374', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf370', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf373', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf375', get_index_5)
        set_indirect3 = self.set_indirect3(load_5)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('buf370', get_index_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf373', get_index_7)
        set_indirect4 = self.set_indirect4(load_7)
        get_index_8 = self.get_index('index2')
        load_8 = ops.load('buf374', get_index_8)
        set_indirect5 = self.set_indirect5(load_8)
        get_index_9 = self.get_index('index5')
        load_9 = ops.load('buf370', get_index_9)
        sub = ops.sub(load_6, load_9)
        get_index_10 = self.get_index('index2')
        load_10 = ops.load('buf376', get_index_10)
        mul = ops.mul(sub, load_10)
        add = ops.add(load_3, mul)
        get_index_11 = self.get_index('index0')
        load_11 = ops.load('buf377', get_index_11)
        sub_1 = ops.sub(add, load_11)
        get_index_12 = self.get_index('index1')
        load_12 = ops.load('buf378', get_index_12)
        mul_1 = ops.mul(sub_1, load_12)
        add_1 = ops.add(load, mul_1)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_13 = self.get_index('index0')
        store = ops.store('buf379', get_index_13, to_dtype, None)
        return store



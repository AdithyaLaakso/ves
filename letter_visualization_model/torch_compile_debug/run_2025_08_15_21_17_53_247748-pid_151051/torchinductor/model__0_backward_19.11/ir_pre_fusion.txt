op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 327680})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('full_default', c0, {c0: 327680})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (327680, 1)
op0.sizes = ([327680], [])
full_default_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op0_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('full_default', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}, atomic_add)]
op1.unmet_dependencies = [StarDep(name='buf0', mode='atomic_add')]
op1.met_dependencies = 
    [   MemoryDep('clamp_max', c1, {c0: 20, c1: 32}),
        MemoryDep('clamp_max_1', c1, {c0: 640, c1: 32}),
        MemoryDep('clamp_max_2', c1, {c0: 640, c1: 32}),
        MemoryDep('clamp_max_3', c1, {c0: 20, c1: 32}),
        MemoryDep('tangents_1', c0, {c0: 20480})]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf1.mutations = ['buf0']
    buf1.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (20480, 1)
op1.sizes = ([20, 32, 32], [])
clamp_max_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
clamp_max_1_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
tangents_1_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
clamp_max_3_layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
clamp_max_2_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf1_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op1_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 32}
    index0 = p1
    index1 = p2
    index2 = 1024*p0 + 32*p1 + p2
    index3 = 128*indirect0 + indirect1 + 16384*p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('clamp_max', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('clamp_max_1', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('tangents_1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('clamp_max_3', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('clamp_max_2', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf1', get_index_5, mul_1, 'atomic_add')
        return store


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 327680})]
op2.unmet_dependencies = []
op2.met_dependencies = [MemoryDep('full_default', c0, {c0: 327680})]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (327680, 1)
op2.sizes = ([327680], [])
full_default_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op2_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('full_default', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf2', get_index_1, load, None)
        return store


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}, atomic_add)]
op3.unmet_dependencies = [StarDep(name='buf2', mode='atomic_add')]
op3.met_dependencies = 
    [   MemoryDep('clamp_max', c1, {c0: 20, c1: 32}),
        MemoryDep('clamp_max_2', c1, {c0: 640, c1: 32}),
        MemoryDep('clamp_max_3', c1, {c0: 20, c1: 32}),
        MemoryDep('convert_element_type_298', c1, {c0: 640, c1: 32}),
        MemoryDep('tangents_1', c0, {c0: 20480})]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf3.mutations = ['buf2']
    buf3.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (20480, 1)
op3.sizes = ([20, 32, 32], [])
clamp_max_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
convert_element_type_298_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
tangents_1_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
clamp_max_3_layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
clamp_max_2_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
buf2_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf3_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op3_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 32}
    index0 = p1
    index1 = p2
    index2 = 1024*p0 + 32*p1 + p2
    index3 = 128*indirect0 + indirect1 + 16384*p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('clamp_max', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('convert_element_type_298', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('tangents_1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('clamp_max_3', get_index_3)
        mul = ops.mul(to_dtype, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('tangents_1', get_index_4)
        to_dtype_1 = ops.to_dtype(load_4, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('clamp_max_3', get_index_5)
        mul_1 = ops.mul(to_dtype_1, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('clamp_max_2', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        neg = ops.neg(mul_2)
        add = ops.add(mul, neg)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf3', get_index_7, add, 'atomic_add')
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 327680})]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('full_default', c0, {c0: 327680})]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (327680, 1)
op4.sizes = ([327680], [])
full_default_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op4_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('full_default', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf4', get_index_1, load, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}, atomic_add)]
op5.unmet_dependencies = [StarDep(name='buf4', mode='atomic_add')]
op5.met_dependencies = 
    [   MemoryDep('clamp_max_1', c1, {c0: 640, c1: 32}),
        MemoryDep('clamp_max_2', c1, {c0: 640, c1: 32}),
        MemoryDep('clamp_max_3', c1, {c0: 20, c1: 32}),
        MemoryDep('convert_element_type_296', c1, {c0: 20, c1: 32}),
        MemoryDep('tangents_1', c0, {c0: 20480})]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf5.mutations = ['buf4']
    buf5.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (20480, 1)
op5.sizes = ([20, 32, 32], [])
convert_element_type_296_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
clamp_max_1_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
tangents_1_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
clamp_max_3_layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
clamp_max_2_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
buf4_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf5_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op5_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 32}
    index0 = p1
    index1 = p2
    index2 = 1024*p0 + 32*p1 + p2
    index3 = 128*indirect0 + indirect1 + 16384*p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convert_element_type_296', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('clamp_max_1', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('tangents_1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('tangents_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('clamp_max_3', get_index_4)
        mul = ops.mul(to_dtype_1, load_4)
        neg = ops.neg(mul)
        add = ops.add(to_dtype, neg)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('clamp_max_2', get_index_5)
        mul_1 = ops.mul(add, load_5)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf5', get_index_6, mul_1, 'atomic_add')
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 327680})]
op6.unmet_dependencies = []
op6.met_dependencies = [MemoryDep('full_default', c0, {c0: 327680})]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (327680, 1)
op6.sizes = ([327680], [])
full_default_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 16384, 128, 1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op6_loop_body:
    var_ranges = {p0: 327680}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('full_default', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf6', get_index_1, load, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 16384*c0 + 128*tmp0 + tmp1, {c0: 20}, atomic_add)]
op7.unmet_dependencies = [StarDep(name='buf6', mode='atomic_add')]
op7.met_dependencies = 
    [   MemoryDep('clamp_max_2', c1, {c0: 640, c1: 32}),
        MemoryDep('clamp_max_3', c1, {c0: 20, c1: 32}),
        MemoryDep('convert_element_type_296', c1, {c0: 20, c1: 32}),
        MemoryDep('convert_element_type_298', c1, {c0: 640, c1: 32}),
        MemoryDep('tangents_1', c0, {c0: 20480})]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
    buf7.mutations = ['buf6']
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (20480, 1)
op7.sizes = ([20, 32, 32], [])
convert_element_type_296_layout = FixedLayout('cuda:0', torch.int64, size=[32, 1], stride=[1, 1])
convert_element_type_298_layout = FixedLayout('cuda:0', torch.int64, size=[32], stride=[1])
tangents_1_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1, 32, 32], stride=[1024, 1024, 32, 1])
clamp_max_3_layout = FixedLayout('cuda:0', torch.float32, size=[32, 1], stride=[1, 1])
clamp_max_2_layout = FixedLayout('cuda:0', torch.float32, size=[32], stride=[1])
buf6_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf7_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
class op7_loop_body:
    var_ranges = {p0: 20, p1: 32, p2: 32}
    index0 = p1
    index1 = p2
    index2 = 1024*p0 + 32*p1 + p2
    index3 = 128*indirect0 + indirect1 + 16384*p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('convert_element_type_296', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('convert_element_type_298', get_index_1)
        set_indirect1 = self.set_indirect1(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('tangents_1', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('tangents_1', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.float16)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('clamp_max_3', get_index_4)
        mul = ops.mul(to_dtype_1, load_4)
        neg = ops.neg(mul)
        add = ops.add(to_dtype, neg)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('tangents_1', get_index_5)
        to_dtype_2 = ops.to_dtype(load_5, torch.float32, src_dtype = torch.float16)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('tangents_1', get_index_6)
        to_dtype_3 = ops.to_dtype(load_6, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('clamp_max_3', get_index_7)
        mul_1 = ops.mul(to_dtype_3, load_7)
        neg_1 = ops.neg(mul_1)
        add_1 = ops.add(to_dtype_2, neg_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('clamp_max_2', get_index_8)
        mul_2 = ops.mul(add_1, load_8)
        neg_2 = ops.neg(mul_2)
        add_2 = ops.add(add, neg_2)
        get_index_9 = self.get_index('index3')
        store = ops.store('buf7', get_index_9, add_2, 'atomic_add')
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 327680})]
op8.unmet_dependencies = 
    [   MemoryDep('buf1', 16384*c0 + 512*((c1//32)) + 128*((c2//4)) + 4*(ModularIndexing(c1, 1, 32)) + (ModularIndexing(c2, 1, 4)), {c0: 20, c1: 1024, c2: 16}),
        MemoryDep('buf3', 16384*c0 + 512*((c1//32)) + 128*((c2//4)) + 4*(ModularIndexing(c1, 1, 32)) + (ModularIndexing(c2, 1, 4)), {c0: 20, c1: 1024, c2: 16}),
        MemoryDep('buf5', 16384*c0 + 512*((c1//32)) + 128*((c2//4)) + 4*(ModularIndexing(c1, 1, 32)) + (ModularIndexing(c2, 1, 4)), {c0: 20, c1: 1024, c2: 16}),
        MemoryDep('buf7', 16384*c0 + 512*((c1//32)) + 128*((c2//4)) + 4*(ModularIndexing(c1, 1, 32)) + (ModularIndexing(c2, 1, 4)), {c0: 20, c1: 1024, c2: 16})]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 16], stride=[16384, 16, 1])
    buf8.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (327680, 1)
op8.sizes = ([20, 1024, 16], [])
buf1_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf3_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf5_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf7_layout = MutationLayoutSHOULDREMOVE('cuda:0', torch.float32, size=[20, 1, 128, 128], stride=[16384, 327680, 128, 1])
buf8_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 16], stride=[16384, 16, 1])
class op8_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 16}
    index0 = 4*((p1//32)) + ((p2//4))
    index1 = 128
    index2 = 4*(ModularIndexing(p1, 1, 32)) + (ModularIndexing(p2, 1, 4))
    index3 = 16384*p0 + 512*((p1//32)) + 128*((p2//4)) + 4*(ModularIndexing(p1, 1, 32)) + (ModularIndexing(p2, 1, 4))
    index4 = 16384*p0 + 16*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('buf2', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index3')
        load_2 = ops.load('buf4', get_index_6)
        add_1 = ops.add(add, load_2)
        get_index_7 = self.get_index('index3')
        load_3 = ops.load('buf6', get_index_7)
        add_2 = ops.add(add_1, load_3)
        to_dtype = ops.to_dtype(add_2, torch.float16, src_dtype = torch.float32)
        get_index_8 = self.get_index('index4')
        store = ops.store('buf8', get_index_8, to_dtype, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='permute_141', mode=None)]
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 128], stride=[128, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op9.node.kernel = extern_kernels.mm


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op10.met_dependencies = [StarDep(name='view_185', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda:0', torch.float16, size=[16, 128], stride=[128, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.mm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 2560})]
op11.unmet_dependencies = [MemoryDep('buf8', 2048*c0 + c1 + 16*c2, {c0: 160, c1: 16, c2: 128})]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda:0', torch.float32, size=[1, 16, 160], stride=[2560, 1, 16])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (2560, 128)
op11.sizes = ([160, 16], [128])
buf8_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 16], stride=[16384, 16, 1])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[1, 16, 160], stride=[2560, 1, 16])
class op11_loop_body:
    var_ranges = {p0: 160, p1: 16, p2: 128}
    index0 = 2048*p0 + p1 + 16*p2
    index1 = 16*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf11', get_index_1, reduction)
        return None


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 16})]
op12.unmet_dependencies = [MemoryDep('buf11', c0 + 16*c1, {c0: 16, c1: 160})]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda:0', torch.float32, size=[1, 16], stride=[16, 1])
    buf12.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (16, 160)
op12.sizes = ([16], [160])
buf11_layout = FixedLayout('cuda:0', torch.float32, size=[1, 16, 160], stride=[2560, 1, 16])
buf12_layout = FixedLayout('cuda:0', torch.float32, size=[1, 16], stride=[16, 1])
class op12_loop_body:
    var_ranges = {p0: 16, p1: 160}
    index0 = p0 + 16*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf12', get_index_1, reduction)
        return None


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2048})]
op13.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2048})]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda:0', torch.float32, size=[16, 128], stride=[128, 1])
    buf13.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (2048, 1)
op13.sizes = ([2048], [])
buf10_layout = FixedLayout('cuda:0', torch.float16, size=[16, 128], stride=[128, 1])
buf13_layout = FixedLayout('cuda:0', torch.float32, size=[16, 128], stride=[128, 1])
class op13_loop_body:
    var_ranges = {p0: 2048}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf13', get_index_1, to_dtype, None)
        return store


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 2621440})]
op14.unmet_dependencies = [MemoryDep('buf9', c0, {c0: 2621440})]
op14.met_dependencies = [MemoryDep('view_185', c0, {c0: 2621440})]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 128], stride=[131072, 128, 1])
    buf14.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (2621440, 1)
op14.sizes = ([2621440], [])
view_185_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 128], stride=[128, 1])
buf9_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 128], stride=[128, 1])
buf14_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 128], stride=[131072, 128, 1])
class op14_loop_body:
    var_ranges = {p0: 2621440}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('view_185', get_index)
        constant = ops.constant(0.0, torch.float16)
        le = ops.le(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf9', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(le, constant_1, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf14', get_index_2, where, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='permute_145', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op16.met_dependencies = [StarDep(name='view_183', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda:0', torch.float16, size=[128, 768], stride=[768, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 20480})]
op17.unmet_dependencies = [MemoryDep('buf14', 16384*c0 + c1 + 128*c2, {c0: 160, c1: 128, c2: 128})]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda:0', torch.float32, size=[1, 128, 160], stride=[20480, 1, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (20480, 128)
op17.sizes = ([160, 128], [128])
buf14_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 128], stride=[131072, 128, 1])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[1, 128, 160], stride=[20480, 1, 128])
class op17_loop_body:
    var_ranges = {p0: 160, p1: 128, p2: 128}
    index0 = 16384*p0 + p1 + 128*p2
    index1 = 128*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_1, reduction)
        return None


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 128})]
op18.unmet_dependencies = [MemoryDep('buf17', c0 + 128*c1, {c0: 128, c1: 160})]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda:0', torch.float32, size=[1, 128], stride=[128, 1])
    buf18.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (128, 160)
op18.sizes = ([128], [160])
buf17_layout = FixedLayout('cuda:0', torch.float32, size=[1, 128, 160], stride=[20480, 1, 128])
buf18_layout = FixedLayout('cuda:0', torch.float32, size=[1, 128], stride=[128, 1])
class op18_loop_body:
    var_ranges = {p0: 128, p1: 160}
    index0 = p0 + 128*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, reduction)
        return None


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 98304})]
op19.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 98304})]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
    buf19.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (98304, 1)
op19.sizes = ([98304], [])
buf16_layout = FixedLayout('cuda:0', torch.float16, size=[128, 768], stride=[768, 1])
buf19_layout = FixedLayout('cuda:0', torch.float32, size=[128, 768], stride=[768, 1])
class op19_loop_body:
    var_ranges = {p0: 98304}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf19', get_index_1, to_dtype, None)
        return store


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 15728640})]
op20.unmet_dependencies = []
op20.met_dependencies = [MemoryDep('inductor_seeds_default', 11, {})]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (15728640, 1)
op20.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op20_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 11
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 11)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf20', get_index_1, rand, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 15728640})]
op21.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 15728640}), MemoryDep('buf20', c0, {c0: 15728640})]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf21.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (15728640, 1)
op21.sizes = ([15728640], [])
buf15_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf20_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf21_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op21_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        to_dtype_2 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_2, constant)
        to_dtype_3 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_3, constant_1)
        mul_1 = ops.mul(to_dtype_1, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf21', get_index_2, mul_1, None)
        return store


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 1179648})]
op22.unmet_dependencies = []
op22.met_dependencies = [MemoryDep('primals_147', c0, {c0: 1179648})]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (1179648, 1)
op22.sizes = ([1179648], [])
primals_147_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf22_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op22_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_147', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf22', get_index_1, to_dtype, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf21', mode=None), StarDep(name='buf22', mode=None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 20480})]
op24.unmet_dependencies = []
op24.met_dependencies = [MemoryDep('add_95', c0, {c0: 15728640})]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (20480, 768)
op24.sizes = ([20480], [768])
add_95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op24_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_95', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 20480})]
op25.unmet_dependencies = []
op25.met_dependencies = [MemoryDep('add_95', c0, {c0: 15728640})]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (20480, 768)
op25.sizes = ([20480], [768])
add_95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op25_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_95', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, getitem_1)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 15728640})]
op27.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 20480}), MemoryDep('buf25', c0, {c0: 20480})]
op27.met_dependencies = 
    [   MemoryDep('add_95', c0, {c0: 15728640}),
        MemoryDep('primals_143', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_144', c1, {c0: 20480, c1: 768})]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf27.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (15728640, 1)
op27.sizes = ([20480, 768], [])
add_95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_144_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf27_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op27_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf25', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_143', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_144', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, to_dtype, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1179648})]
op28.unmet_dependencies = []
op28.met_dependencies = [MemoryDep('primals_145', c0, {c0: 1179648})]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (1179648, 1)
op28.sizes = ([1179648], [])
primals_145_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf28_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op28_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_145', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf28', get_index_1, to_dtype, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf27', mode=None), StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 31457280})]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 31457280})]
op30.met_dependencies = [MemoryDep('primals_146', c1, {c0: 20480, c1: 1536})]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (31457280, 1)
op30.sizes = ([20480, 1536], [])
buf29_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf30_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op30_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_146', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_146', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf30', get_index_4, to_dtype_4, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf21', mode=None), StarDep(name='buf30', mode=None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 61440})]
op32.unmet_dependencies = [MemoryDep('buf21', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (61440, 256)
op32.sizes = ([80, 768], [256])
buf21_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op32_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf32', get_index_1, reduction)
        return None


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 768})]
op33.unmet_dependencies = [MemoryDep('buf32', c0 + 768*c1, {c0: 768, c1: 80})]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf33.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (768, 80)
op33.sizes = ([768], [80])
buf32_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf33_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op33_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_1, reduction)
        return None


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 1179648})]
op34.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 1179648})]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf34.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (1179648, 1)
op34.sizes = ([1179648], [])
buf31_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf34_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op34_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf34', get_index_1, to_dtype, None)
        return store


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 31457280})]
op35.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 31457280}), MemoryDep('buf29', c0, {c0: 31457280})]
op35.met_dependencies = [MemoryDep('primals_146', c1, {c0: 20480, c1: 1536})]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf35.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (31457280, 1)
op35.sizes = ([20480, 1536], [])
buf23_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf29_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_146_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf35_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op35_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf29', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_146', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf29', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_146', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf29', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_146', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf29', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_146', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf35', get_index_9, to_dtype_9, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf28', mode=None), StarDep(name='buf35', mode=None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False),
    ]
]
op36.node.kernel = extern_kernels.mm


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf27', mode=None), StarDep(name='buf35', mode=None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.mm


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 61440})]
op38.unmet_dependencies = [MemoryDep('buf35', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (61440, 512)
op38.sizes = ([40, 1536], [512])
buf35_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op38_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf38', get_index_1, reduction)
        return None


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1536})]
op39.unmet_dependencies = [MemoryDep('buf38', c0 + 1536*c1, {c0: 1536, c1: 40})]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf39.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (1536, 40)
op39.sizes = ([1536], [40])
buf38_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf39_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op39_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf39', get_index_1, reduction)
        return None


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1179648})]
op40.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 1179648})]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf40.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1179648, 1)
op40.sizes = ([1179648], [])
buf37_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf40_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op40_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf40', get_index_1, to_dtype, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 20480})]
op41.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 15728640})]
op41.met_dependencies = [MemoryDep('primals_143', c1, {c0: 20480, c1: 768})]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf41.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (20480, 768)
op41.sizes = ([20480], [768])
buf36_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op41_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_143', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_2, reduction)
        return None


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 20480})]
op42.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 20480}),
        MemoryDep('buf25', c0, {c0: 20480}),
        MemoryDep('buf36', c0, {c0: 15728640})]
op42.met_dependencies = 
    [   MemoryDep('add_95', c0, {c0: 15728640}),
        MemoryDep('primals_143', c1, {c0: 20480, c1: 768})]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf42.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (20480, 768)
op42.sizes = ([20480], [768])
buf36_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op42_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_143', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_95', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf24', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf25', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf42', get_index_5, reduction)
        return None


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 61440})]
op43.unmet_dependencies = 
    [   MemoryDep('buf24', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf25', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf36', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op43.met_dependencies = [MemoryDep('add_95', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (61440, 256)
op43.sizes = ([80, 768], [256])
buf36_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op43_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_95', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf24', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf25', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_4, reduction)
        return None


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 768})]
op44.unmet_dependencies = [MemoryDep('buf43', c0 + 768*c1, {c0: 768, c1: 80})]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf44.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (768, 80)
op44.sizes = ([768], [80])
buf43_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf44_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op44_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, reduction)
        return None


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 61440})]
op45.unmet_dependencies = [MemoryDep('buf36', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (61440, 256)
op45.sizes = ([80, 768], [256])
buf36_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op45_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, reduction)
        return None


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 768})]
op46.unmet_dependencies = [MemoryDep('buf45', c0 + 768*c1, {c0: 768, c1: 80})]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf46.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (768, 80)
op46.sizes = ([768], [80])
buf45_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf46_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op46_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf46', get_index_1, reduction)
        return None


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 15728640})]
op47.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 15728640}),
        MemoryDep('buf24', c0, {c0: 20480}),
        MemoryDep('buf25', c0, {c0: 20480}),
        MemoryDep('buf36', c0, {c0: 15728640}),
        MemoryDep('buf41', c0, {c0: 20480}),
        MemoryDep('buf42', c0, {c0: 20480})]
op47.met_dependencies = 
    [   MemoryDep('add_95', c0, {c0: 15728640}),
        MemoryDep('primals_143', c1, {c0: 20480, c1: 768})]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (15728640, 1)
op47.sizes = ([20480, 768], [])
buf15_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf25_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf36_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_143_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf41_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf24_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf42_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op47_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf25', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_143', get_index_3)
        mul_1 = ops.mul(to_dtype_1, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf41', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_95', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf24', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf25', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf42', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(to_dtype, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf47', get_index_9, add_2, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 15728640})]
op48.unmet_dependencies = [   MemoryDep('buf47', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (15728640, 1)
op48.sizes = ([20480, 768], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf48_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op48_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf48', get_index_1, to_dtype, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 589824})]
op49.unmet_dependencies = []
op49.met_dependencies = [MemoryDep('primals_141', c0, {c0: 589824})]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (589824, 1)
op49.sizes = ([589824], [])
primals_141_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf49_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op49_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_141', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf49', get_index_1, to_dtype, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.mm


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 20480})]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('add_91', c0, {c0: 15728640})]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (20480, 768)
op51.sizes = ([20480], [768])
add_91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op51_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, getitem)
        return store_reduction


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 20480})]
op52.unmet_dependencies = []
op52.met_dependencies = [MemoryDep('add_91', c0, {c0: 15728640})]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (20480, 768)
op52.sizes = ([20480], [768])
add_91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op52_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_1, getitem_1)
        return store_reduction


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1769472})]
op54.unmet_dependencies = []
op54.met_dependencies = [MemoryDep('primals_140', c0, {c0: 1769472})]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf54.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (1769472, 1)
op54.sizes = ([1769472], [])
primals_140_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf54_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op54_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_140', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, to_dtype, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op55.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 20480}), MemoryDep('buf52', c0, {c0: 20480})]
op55.met_dependencies = 
    [   MemoryDep('add_91', c0, {c0: 15728640}),
        MemoryDep('primals_137', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_138', c1, {c0: 20480, c1: 768})]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf55.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (15728640, 1)
op55.sizes = ([20, 1024, 768], [])
add_91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_137_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_138_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf55_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op55_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf52', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_137', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_138', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf55', get_index_5, to_dtype, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf54', mode=None), StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.mm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 47185920})]
op57.unmet_dependencies = [MemoryDep('buf56', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op57.met_dependencies = [MemoryDep('primals_139', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (47185920, 1)
op57.sizes = ([3, 20480, 768], [])
buf56_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_139_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op57_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_139', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, add, None)
        return store


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 15728640})]
op58.unmet_dependencies = [MemoryDep('buf57', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (15728640, 1)
op58.sizes = ([1024, 20, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf58_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op58_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf58', get_index_1, load, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 15728640})]
op59.unmet_dependencies = [   MemoryDep('buf57', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (15728640, 1)
op59.sizes = ([1024, 20, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf59_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op59_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf59', get_index_1, load, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 15728640})]
op60.unmet_dependencies = [   MemoryDep('buf57', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (15728640, 1)
op60.sizes = ([1024, 20, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf60_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op60_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf60', get_index_1, load, None)
        return store


op61: ExternKernelSchedulerNode(FallbackKernel)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = 
    [   StarDep(name='buf58', mode=None),
        StarDep(name='buf59', mode=None),
        StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='bwd_rng_state_11', mode=None)]
op61.outputs = [
    buf61: FallbackKernel
    buf61.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
    ]
]
op61.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op62: ExternKernelSchedulerNode(MultiOutput)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: MultiOutput
    buf62.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op62.node.kernel = None


op63: ExternKernelSchedulerNode(MultiOutput)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: MultiOutput
    buf63.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op63.node.kernel = None


op64: ExternKernelSchedulerNode(MultiOutput)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: MultiOutput
    buf64.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = None


op65: ExternKernelSchedulerNode(MultiOutput)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: MultiOutput
    buf65.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = None


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf62', mode=None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 61440})]
op68.unmet_dependencies = [MemoryDep('buf48', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (61440, 256)
op68.sizes = ([80, 768], [256])
buf48_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op68_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, reduction)
        return None


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 768})]
op69.unmet_dependencies = [MemoryDep('buf68', c0 + 768*c1, {c0: 768, c1: 80})]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf69.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (768, 80)
op69.sizes = ([768], [80])
buf68_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf69_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op69_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, reduction)
        return None


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 589824})]
op70.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 589824})]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf70.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (589824, 1)
op70.sizes = ([589824], [])
buf67_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf70_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op70_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf70', get_index_1, to_dtype, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 15728640})]
op71.unmet_dependencies = [MemoryDep('buf57', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (15728640, 1)
op71.sizes = ([1024, 20, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf71_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op71_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf71', get_index_1, load, None)
        return store


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 15728640})]
op72.unmet_dependencies = [   MemoryDep('buf57', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (15728640, 1)
op72.sizes = ([1024, 20, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf72_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op72_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf72', get_index_1, load, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 15728640})]
op73.unmet_dependencies = [   MemoryDep('buf57', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (15728640, 1)
op73.sizes = ([1024, 20, 768], [])
buf57_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf73_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op73_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf73', get_index_1, load, None)
        return store


op74: ExternKernelSchedulerNode(FallbackKernel)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = 
    [   StarDep(name='buf50', mode=None),
        StarDep(name='buf62', mode=None),
        StarDep(name='buf63', mode=None),
        StarDep(name='buf64', mode=None),
        StarDep(name='buf65', mode=None),
        StarDep(name='buf71', mode=None),
        StarDep(name='buf72', mode=None),
        StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: FallbackKernel
    buf74.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op74.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op75: ExternKernelSchedulerNode(MultiOutput)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: MultiOutput
    buf75.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op75.node.kernel = None


op76: ExternKernelSchedulerNode(MultiOutput)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: MultiOutput
    buf76.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op76.node.kernel = None


op77: ExternKernelSchedulerNode(MultiOutput)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: MultiOutput
    buf77.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op77.node.kernel = None


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 73728})]
op78.unmet_dependencies = 
    [   MemoryDep('buf75', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf76', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf77', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (73728, 640)
op78.sizes = ([32, 2304], [640])
buf77_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf76_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf75_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op78_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf77', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf78', get_index_6, reduction)
        return None


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2304})]
op79.unmet_dependencies = [MemoryDep('buf78', c0 + 2304*c1, {c0: 2304, c1: 32})]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf79.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (2304, 32)
op79.sizes = ([2304], [32])
buf78_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf79_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op79_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, reduction)
        return None


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 47185920})]
op80.unmet_dependencies = 
    [   MemoryDep('buf75', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf76', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf77', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf80.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (47185920, 1)
op80.sizes = ([1024, 20, 3, 768], [])
buf77_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf76_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf75_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf80_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op80_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf77', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf76', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf80', get_index_6, add_1, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelOut)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf55', mode=None), StarDep(name='buf80', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ExternKernelOut
    buf81.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op81.node.kernel = extern_kernels.mm


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf54', mode=None), StarDep(name='buf80', mode=None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 1769472})]
op83.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 1769472})]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf83.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (1769472, 1)
op83.sizes = ([1769472], [])
buf81_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf83_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op83_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf83', get_index_1, to_dtype, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 20480})]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 15728640})]
op84.met_dependencies = [MemoryDep('primals_137', c1, {c0: 20480, c1: 768})]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf84.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (20480, 768)
op84.sizes = ([20480], [768])
buf82_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_137_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op84_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_137', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_2, reduction)
        return None


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 20480})]
op85.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 20480}),
        MemoryDep('buf52', c0, {c0: 20480}),
        MemoryDep('buf82', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op85.met_dependencies = 
    [   MemoryDep('add_91', c0, {c0: 15728640}),
        MemoryDep('primals_137', c1, {c0: 20480, c1: 768})]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf85.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (20480, 768)
op85.sizes = ([20, 1024], [768])
buf82_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_137_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op85_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_137', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_91', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf51', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf52', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf85', get_index_5, reduction)
        return None


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 61440})]
op86.unmet_dependencies = 
    [   MemoryDep('buf51', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf52', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf82', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op86.met_dependencies = [MemoryDep('add_91', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (61440, 256)
op86.sizes = ([80, 768], [256])
buf82_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op86_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_91', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf51', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf52', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf86', get_index_4, reduction)
        return None


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 768})]
op87.unmet_dependencies = [MemoryDep('buf86', c0 + 768*c1, {c0: 768, c1: 80})]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf87.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (768, 80)
op87.sizes = ([768], [80])
buf86_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf87_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op87_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, reduction)
        return None


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 61440})]
op88.unmet_dependencies = [   MemoryDep('buf82', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (61440, 256)
op88.sizes = ([80, 768], [256])
buf82_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op88_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_1, reduction)
        return None


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 768})]
op89.unmet_dependencies = [MemoryDep('buf88', c0 + 768*c1, {c0: 768, c1: 80})]
op89.met_dependencies = []
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf89.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (768, 80)
op89.sizes = ([768], [80])
buf88_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf89_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op89_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf89', get_index_1, reduction)
        return None


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 15728640})]
op90.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 15728640}),
        MemoryDep('buf51', c0, {c0: 20480}),
        MemoryDep('buf52', c0, {c0: 20480}),
        MemoryDep('buf82', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf84', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf85', c0, {c0: 20480})]
op90.met_dependencies = 
    [   MemoryDep('add_91', c0, {c0: 15728640}),
        MemoryDep('primals_137', c1, {c0: 20480, c1: 768})]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (15728640, 1)
op90.sizes = ([20, 1024, 768], [])
buf47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf52_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf82_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_137_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf85_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op90_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf52', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf82', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_137', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf84', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_91', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf51', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf52', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf85', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf90', get_index_9, add_2, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 15728640})]
op91.unmet_dependencies = []
op91.met_dependencies = [MemoryDep('inductor_seeds_default', 10, {})]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (15728640, 1)
op91.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op91_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 10
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 10)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, rand, None)
        return store


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 15728640})]
op92.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 15728640}), MemoryDep('buf91', c0, {c0: 15728640})]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf92.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (15728640, 1)
op92.sizes = ([15728640], [])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf91_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf92_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op92_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf91', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf92', get_index_2, mul_1, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1179648})]
op93.unmet_dependencies = []
op93.met_dependencies = [MemoryDep('primals_135', c0, {c0: 1179648})]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1179648, 1)
op93.sizes = ([1179648], [])
primals_135_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf93_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op93_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_135', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf93', get_index_1, to_dtype, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf92', mode=None), StarDep(name='buf93', mode=None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 20480})]
op95.unmet_dependencies = []
op95.met_dependencies = [MemoryDep('add_87', c0, {c0: 15728640})]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (20480, 768)
op95.sizes = ([20480], [768])
add_87_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op95_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_87', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, getitem)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 20480})]
op96.unmet_dependencies = []
op96.met_dependencies = [MemoryDep('add_87', c0, {c0: 15728640})]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (20480, 768)
op96.sizes = ([20480], [768])
add_87_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op96_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_87', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_1, getitem_1)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 15728640})]
op98.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 20480}), MemoryDep('buf96', c0, {c0: 20480})]
op98.met_dependencies = 
    [   MemoryDep('add_87', c0, {c0: 15728640}),
        MemoryDep('primals_131', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_132', c1, {c0: 20480, c1: 768})]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf98.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (15728640, 1)
op98.sizes = ([20480, 768], [])
add_87_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_132_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf98_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op98_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf95', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf96', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_131', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_132', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf98', get_index_5, to_dtype, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 1179648})]
op99.unmet_dependencies = []
op99.met_dependencies = [MemoryDep('primals_133', c0, {c0: 1179648})]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (1179648, 1)
op99.sizes = ([1179648], [])
primals_133_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf99_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op99_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_133', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf99', get_index_1, to_dtype, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf98', mode=None), StarDep(name='buf99', mode=None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
    ]
]
op100.node.kernel = extern_kernels.mm


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 31457280})]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 31457280})]
op101.met_dependencies = [MemoryDep('primals_134', c1, {c0: 20480, c1: 1536})]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (31457280, 1)
op101.sizes = ([20480, 1536], [])
buf100_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf101_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op101_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_134', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf100', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_134', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf101', get_index_4, to_dtype_4, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None), StarDep(name='buf92', mode=None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf102.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op102.node.kernel = extern_kernels.mm


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 61440})]
op103.unmet_dependencies = [MemoryDep('buf92', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (61440, 256)
op103.sizes = ([80, 768], [256])
buf92_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op103_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, reduction)
        return None


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 768})]
op104.unmet_dependencies = [MemoryDep('buf103', c0 + 768*c1, {c0: 768, c1: 80})]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf104.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (768, 80)
op104.sizes = ([768], [80])
buf103_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf104_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op104_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf104', get_index_1, reduction)
        return None


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 1179648})]
op105.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 1179648})]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf105.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (1179648, 1)
op105.sizes = ([1179648], [])
buf102_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf105_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op105_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf105', get_index_1, to_dtype, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 31457280})]
op106.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 31457280}),
        MemoryDep('buf94', c0, {c0: 31457280})]
op106.met_dependencies = [MemoryDep('primals_134', c1, {c0: 20480, c1: 1536})]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (31457280, 1)
op106.sizes = ([20480, 1536], [])
buf94_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf100_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_134_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf106_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op106_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf100', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_134', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf100', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_134', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf100', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_134', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf100', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_134', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf106', get_index_9, to_dtype_9, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf99', mode=None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op107.node.kernel = extern_kernels.mm


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf98', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op108.node.kernel = extern_kernels.mm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 61440})]
op109.unmet_dependencies = [MemoryDep('buf106', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (61440, 512)
op109.sizes = ([40, 1536], [512])
buf106_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op109_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_1, reduction)
        return None


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1536})]
op110.unmet_dependencies = [MemoryDep('buf109', c0 + 1536*c1, {c0: 1536, c1: 40})]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf110.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1536, 40)
op110.sizes = ([1536], [40])
buf109_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf110_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op110_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf110', get_index_1, reduction)
        return None


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1179648})]
op111.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 1179648})]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf111.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1179648, 1)
op111.sizes = ([1179648], [])
buf108_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf111_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op111_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf111', get_index_1, to_dtype, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 20480})]
op112.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 15728640})]
op112.met_dependencies = [MemoryDep('primals_131', c1, {c0: 20480, c1: 768})]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf112.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (20480, 768)
op112.sizes = ([20480], [768])
buf107_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op112_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_131', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_2, reduction)
        return None


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 20480})]
op113.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 15728640}),
        MemoryDep('buf95', c0, {c0: 20480}),
        MemoryDep('buf96', c0, {c0: 20480})]
op113.met_dependencies = 
    [   MemoryDep('add_87', c0, {c0: 15728640}),
        MemoryDep('primals_131', c1, {c0: 20480, c1: 768})]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf113.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (20480, 768)
op113.sizes = ([20480], [768])
buf107_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_87_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op113_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_131', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_87', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf95', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf96', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_5, reduction)
        return None


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 61440})]
op114.unmet_dependencies = 
    [   MemoryDep('buf107', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf95', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf96', 256*c0 + c2, {c0: 80, c1: 768, c2: 256})]
op114.met_dependencies = [MemoryDep('add_87', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (61440, 256)
op114.sizes = ([80, 768], [256])
buf107_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_87_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op114_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_87', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf95', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf96', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_4, reduction)
        return None


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 768})]
op115.unmet_dependencies = [MemoryDep('buf114', c0 + 768*c1, {c0: 768, c1: 80})]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf115.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (768, 80)
op115.sizes = ([768], [80])
buf114_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf115_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op115_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf115', get_index_1, reduction)
        return None


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 61440})]
op116.unmet_dependencies = [MemoryDep('buf107', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (61440, 256)
op116.sizes = ([80, 768], [256])
buf107_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op116_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf116', get_index_1, reduction)
        return None


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 768})]
op117.unmet_dependencies = [MemoryDep('buf116', c0 + 768*c1, {c0: 768, c1: 80})]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf117.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (768, 80)
op117.sizes = ([768], [80])
buf116_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf117_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op117_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, reduction)
        return None


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 15728640})]
op118.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 15728640}),
        MemoryDep('buf112', c0, {c0: 20480}),
        MemoryDep('buf113', c0, {c0: 20480}),
        MemoryDep('buf90', c0, {c0: 15728640}),
        MemoryDep('buf95', c0, {c0: 20480}),
        MemoryDep('buf96', c0, {c0: 20480})]
op118.met_dependencies = 
    [   MemoryDep('add_87', c0, {c0: 15728640}),
        MemoryDep('primals_131', c1, {c0: 20480, c1: 768})]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (15728640, 1)
op118.sizes = ([20480, 768], [])
buf90_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf96_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf107_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_131_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf112_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_87_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf95_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf113_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op118_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf96', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf107', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_131', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf112', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_87', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf95', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf96', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf113', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf118', get_index_9, add_2, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 15728640})]
op119.unmet_dependencies = [   MemoryDep('buf118', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf119.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (15728640, 1)
op119.sizes = ([20480, 768], [])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf119_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op119_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf119', get_index_1, to_dtype, None)
        return store


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 589824})]
op120.unmet_dependencies = []
op120.met_dependencies = [MemoryDep('primals_129', c0, {c0: 589824})]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (589824, 1)
op120.sizes = ([589824], [])
primals_129_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf120_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op120_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_129', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf120', get_index_1, to_dtype, None)
        return store


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op121.node.kernel = extern_kernels.mm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 20480})]
op122.unmet_dependencies = []
op122.met_dependencies = [MemoryDep('add_83', c0, {c0: 15728640})]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (20480, 768)
op122.sizes = ([20480], [768])
add_83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op122_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_83', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf122', get_index_1, getitem)
        return store_reduction


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 20480})]
op123.unmet_dependencies = []
op123.met_dependencies = [MemoryDep('add_83', c0, {c0: 15728640})]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (20480, 768)
op123.sizes = ([20480], [768])
add_83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op123_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_83', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf123', get_index_1, getitem_1)
        return store_reduction


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 1769472})]
op125.unmet_dependencies = []
op125.met_dependencies = [MemoryDep('primals_128', c0, {c0: 1769472})]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (1769472, 1)
op125.sizes = ([1769472], [])
primals_128_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf125_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op125_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_128', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf125', get_index_1, to_dtype, None)
        return store


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op126.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 20480}), MemoryDep('buf123', c0, {c0: 20480})]
op126.met_dependencies = 
    [   MemoryDep('add_83', c0, {c0: 15728640}),
        MemoryDep('primals_125', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_126', c1, {c0: 20480, c1: 768})]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (15728640, 1)
op126.sizes = ([20, 1024, 768], [])
add_83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_126_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf126_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op126_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf123', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_125', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_126', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf126', get_index_5, to_dtype, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf125', mode=None), StarDep(name='buf126', mode=None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 47185920})]
op128.unmet_dependencies = [MemoryDep('buf127', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op128.met_dependencies = [MemoryDep('primals_127', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (47185920, 1)
op128.sizes = ([3, 20480, 768], [])
buf127_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_127_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op128_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_127', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf128', get_index_2, add, None)
        return store


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 15728640})]
op129.unmet_dependencies = [   MemoryDep('buf128', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (15728640, 1)
op129.sizes = ([1024, 20, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf129_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op129_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf129', get_index_1, load, None)
        return store


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 15728640})]
op130.unmet_dependencies = [   MemoryDep('buf128', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (15728640, 1)
op130.sizes = ([1024, 20, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf130_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op130_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf130', get_index_1, load, None)
        return store


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 15728640})]
op131.unmet_dependencies = [   MemoryDep('buf128', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (15728640, 1)
op131.sizes = ([1024, 20, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf131_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op131_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf131', get_index_1, load, None)
        return store


op132: ExternKernelSchedulerNode(FallbackKernel)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = 
    [   StarDep(name='buf129', mode=None),
        StarDep(name='buf130', mode=None),
        StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='bwd_rng_state_10', mode=None)]
op132.outputs = [
    buf132: FallbackKernel
    buf132.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op133: ExternKernelSchedulerNode(MultiOutput)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: MultiOutput
    buf133.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf133.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
    ]
]
op133.node.kernel = None


op134: ExternKernelSchedulerNode(MultiOutput)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: MultiOutput
    buf134.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = None


op135: ExternKernelSchedulerNode(MultiOutput)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: MultiOutput
    buf135.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op135.node.kernel = None


op136: ExternKernelSchedulerNode(MultiOutput)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: MultiOutput
    buf136.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = None


op138: ExternKernelSchedulerNode(ExternKernelOut)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf133', mode=None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ExternKernelOut
    buf138.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op138.node.kernel = extern_kernels.mm


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 61440})]
op139.unmet_dependencies = [MemoryDep('buf119', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (61440, 256)
op139.sizes = ([80, 768], [256])
buf119_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op139_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_1, reduction)
        return None


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 768})]
op140.unmet_dependencies = [MemoryDep('buf139', c0 + 768*c1, {c0: 768, c1: 80})]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf140.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (768, 80)
op140.sizes = ([768], [80])
buf139_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf140_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op140_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_1, reduction)
        return None


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 589824})]
op141.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 589824})]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf141.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (589824, 1)
op141.sizes = ([589824], [])
buf138_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf141_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op141_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf141', get_index_1, to_dtype, None)
        return store


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 15728640})]
op142.unmet_dependencies = [   MemoryDep('buf128', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (15728640, 1)
op142.sizes = ([1024, 20, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf142_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op142_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf142', get_index_1, load, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 15728640})]
op143.unmet_dependencies = [   MemoryDep('buf128', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (15728640, 1)
op143.sizes = ([1024, 20, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf143_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op143_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 15728640})]
op144.unmet_dependencies = [   MemoryDep('buf128', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (15728640, 1)
op144.sizes = ([1024, 20, 768], [])
buf128_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf144_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op144_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf144', get_index_1, load, None)
        return store


op145: ExternKernelSchedulerNode(FallbackKernel)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = 
    [   StarDep(name='buf121', mode=None),
        StarDep(name='buf133', mode=None),
        StarDep(name='buf134', mode=None),
        StarDep(name='buf135', mode=None),
        StarDep(name='buf136', mode=None),
        StarDep(name='buf142', mode=None),
        StarDep(name='buf143', mode=None),
        StarDep(name='buf144', mode=None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: FallbackKernel
    buf145.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf145.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
    ]
]
op145.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op146: ExternKernelSchedulerNode(MultiOutput)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: MultiOutput
    buf146.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op146.node.kernel = None


op147: ExternKernelSchedulerNode(MultiOutput)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: MultiOutput
    buf147.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op147.node.kernel = None


op148: ExternKernelSchedulerNode(MultiOutput)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: MultiOutput
    buf148.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf148.users = [
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op148.node.kernel = None


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 73728})]
op149.unmet_dependencies = 
    [   MemoryDep('buf146', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf147', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf148', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (73728, 640)
op149.sizes = ([32, 2304], [640])
buf148_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf147_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf146_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op149_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf148', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf146', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf149', get_index_6, reduction)
        return None


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 2304})]
op150.unmet_dependencies = [MemoryDep('buf149', c0 + 2304*c1, {c0: 2304, c1: 32})]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf150.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (2304, 32)
op150.sizes = ([2304], [32])
buf149_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf150_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op150_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf150', get_index_1, reduction)
        return None


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 47185920})]
op151.unmet_dependencies = 
    [   MemoryDep('buf146', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf147', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf148', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf151.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (47185920, 1)
op151.sizes = ([1024, 20, 3, 768], [])
buf148_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf147_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf146_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf151_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op151_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf148', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf146', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf151', get_index_6, add_1, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf151', mode=None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf125', mode=None), StarDep(name='buf151', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op153.node.kernel = extern_kernels.mm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1769472})]
op154.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 1769472})]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf154.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1769472, 1)
op154.sizes = ([1769472], [])
buf152_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf154_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op154_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf154', get_index_1, to_dtype, None)
        return store


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 20480})]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 15728640})]
op155.met_dependencies = [MemoryDep('primals_125', c1, {c0: 20480, c1: 768})]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf155.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (20480, 768)
op155.sizes = ([20480], [768])
buf153_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op155_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_125', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_2, reduction)
        return None


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 20480})]
op156.unmet_dependencies = 
    [   MemoryDep('buf122', c0, {c0: 20480}),
        MemoryDep('buf123', c0, {c0: 20480}),
        MemoryDep('buf153', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op156.met_dependencies = 
    [   MemoryDep('add_83', c0, {c0: 15728640}),
        MemoryDep('primals_125', c1, {c0: 20480, c1: 768})]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf156.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (20480, 768)
op156.sizes = ([20, 1024], [768])
buf153_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op156_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_125', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_83', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf122', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf123', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf156', get_index_5, reduction)
        return None


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 61440})]
op157.unmet_dependencies = 
    [   MemoryDep('buf122', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf123', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf153', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op157.met_dependencies = [MemoryDep('add_83', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (61440, 256)
op157.sizes = ([80, 768], [256])
buf153_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op157_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_83', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf122', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf123', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf157', get_index_4, reduction)
        return None


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 768})]
op158.unmet_dependencies = [MemoryDep('buf157', c0 + 768*c1, {c0: 768, c1: 80})]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf158.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (768, 80)
op158.sizes = ([768], [80])
buf157_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf158_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op158_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf158', get_index_1, reduction)
        return None


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 61440})]
op159.unmet_dependencies = [   MemoryDep('buf153', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (61440, 256)
op159.sizes = ([80, 768], [256])
buf153_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op159_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, reduction)
        return None


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 768})]
op160.unmet_dependencies = [MemoryDep('buf159', c0 + 768*c1, {c0: 768, c1: 80})]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf160.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (768, 80)
op160.sizes = ([768], [80])
buf159_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf160_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op160_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf160', get_index_1, reduction)
        return None


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 15728640})]
op161.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 15728640}),
        MemoryDep('buf122', c0, {c0: 20480}),
        MemoryDep('buf123', c0, {c0: 20480}),
        MemoryDep('buf153', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf155', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf156', c0, {c0: 20480})]
op161.met_dependencies = 
    [   MemoryDep('add_83', c0, {c0: 15728640}),
        MemoryDep('primals_125', c1, {c0: 20480, c1: 768})]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (15728640, 1)
op161.sizes = ([20, 1024, 768], [])
buf118_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf123_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf153_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_125_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf155_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_83_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf122_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf156_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op161_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf153', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_125', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf155', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_83', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf122', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf123', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf156', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf161', get_index_9, add_2, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 15728640})]
op162.unmet_dependencies = []
op162.met_dependencies = [MemoryDep('inductor_seeds_default', 9, {})]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (15728640, 1)
op162.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op162_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 9
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 9)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, rand, None)
        return store


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 15728640})]
op163.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 15728640}),
        MemoryDep('buf162', c0, {c0: 15728640})]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (15728640, 1)
op163.sizes = ([15728640], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf162_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf163_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op163_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf162', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf163', get_index_2, mul_1, None)
        return store


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 1179648})]
op164.unmet_dependencies = []
op164.met_dependencies = [MemoryDep('primals_123', c0, {c0: 1179648})]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (1179648, 1)
op164.sizes = ([1179648], [])
primals_123_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf164_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op164_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_123', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf164', get_index_1, to_dtype, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf163', mode=None), StarDep(name='buf164', mode=None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 20480})]
op166.unmet_dependencies = []
op166.met_dependencies = [MemoryDep('add_79', c0, {c0: 15728640})]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf166.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (20480, 768)
op166.sizes = ([20480], [768])
add_79_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op166_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_79', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf166', get_index_1, getitem)
        return store_reduction


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 20480})]
op167.unmet_dependencies = []
op167.met_dependencies = [MemoryDep('add_79', c0, {c0: 15728640})]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (20480, 768)
op167.sizes = ([20480], [768])
add_79_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op167_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_79', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf167', get_index_1, getitem_1)
        return store_reduction


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 15728640})]
op169.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 20480}), MemoryDep('buf167', c0, {c0: 20480})]
op169.met_dependencies = 
    [   MemoryDep('add_79', c0, {c0: 15728640}),
        MemoryDep('primals_119', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_120', c1, {c0: 20480, c1: 768})]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf169.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (15728640, 1)
op169.sizes = ([20480, 768], [])
add_79_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_120_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf169_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op169_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf166', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf167', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_120', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf169', get_index_5, to_dtype, None)
        return store


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 1179648})]
op170.unmet_dependencies = []
op170.met_dependencies = [MemoryDep('primals_121', c0, {c0: 1179648})]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (1179648, 1)
op170.sizes = ([1179648], [])
primals_121_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf170_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op170_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_121', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf170', get_index_1, to_dtype, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf169', mode=None), StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
    ]
]
op171.node.kernel = extern_kernels.mm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 31457280})]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 31457280})]
op172.met_dependencies = [MemoryDep('primals_122', c1, {c0: 20480, c1: 1536})]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (31457280, 1)
op172.sizes = ([20480, 1536], [])
buf171_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf172_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op172_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_122', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf171', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_122', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf172', get_index_4, to_dtype_4, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf163', mode=None), StarDep(name='buf172', mode=None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 61440})]
op174.unmet_dependencies = [MemoryDep('buf163', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (61440, 256)
op174.sizes = ([80, 768], [256])
buf163_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op174_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf174', get_index_1, reduction)
        return None


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 768})]
op175.unmet_dependencies = [MemoryDep('buf174', c0 + 768*c1, {c0: 768, c1: 80})]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf175.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (768, 80)
op175.sizes = ([768], [80])
buf174_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf175_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op175_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf175', get_index_1, reduction)
        return None


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 1179648})]
op176.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 1179648})]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf176.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (1179648, 1)
op176.sizes = ([1179648], [])
buf173_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf176_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op176_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf176', get_index_1, to_dtype, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 31457280})]
op177.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 31457280}),
        MemoryDep('buf171', c0, {c0: 31457280})]
op177.met_dependencies = [MemoryDep('primals_122', c1, {c0: 20480, c1: 1536})]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (31457280, 1)
op177.sizes = ([20480, 1536], [])
buf165_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf171_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_122_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf177_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op177_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_122', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf171', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_122', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf171', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_122', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf171', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_122', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf177', get_index_9, to_dtype_9, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf170', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.mm


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf169', mode=None), StarDep(name='buf177', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 61440})]
op180.unmet_dependencies = [MemoryDep('buf177', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (61440, 512)
op180.sizes = ([40, 1536], [512])
buf177_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op180_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_1, reduction)
        return None


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 1536})]
op181.unmet_dependencies = [MemoryDep('buf180', c0 + 1536*c1, {c0: 1536, c1: 40})]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf181.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (1536, 40)
op181.sizes = ([1536], [40])
buf180_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf181_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op181_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, reduction)
        return None


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1179648})]
op182.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 1179648})]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf182.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1179648, 1)
op182.sizes = ([1179648], [])
buf179_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf182_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op182_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf182', get_index_1, to_dtype, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 20480})]
op183.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 15728640})]
op183.met_dependencies = [MemoryDep('primals_119', c1, {c0: 20480, c1: 768})]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf183.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (20480, 768)
op183.sizes = ([20480], [768])
buf178_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op183_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_119', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf183', get_index_2, reduction)
        return None


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 20480})]
op184.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 20480}),
        MemoryDep('buf167', c0, {c0: 20480}),
        MemoryDep('buf178', c0, {c0: 15728640})]
op184.met_dependencies = 
    [   MemoryDep('add_79', c0, {c0: 15728640}),
        MemoryDep('primals_119', c1, {c0: 20480, c1: 768})]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf184.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (20480, 768)
op184.sizes = ([20480], [768])
buf178_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_79_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op184_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_119', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_79', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf166', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf167', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_5, reduction)
        return None


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 61440})]
op185.unmet_dependencies = 
    [   MemoryDep('buf166', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf167', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf178', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op185.met_dependencies = [MemoryDep('add_79', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (61440, 256)
op185.sizes = ([80, 768], [256])
buf178_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_79_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op185_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_79', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf166', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf167', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_4, reduction)
        return None


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 768})]
op186.unmet_dependencies = [MemoryDep('buf185', c0 + 768*c1, {c0: 768, c1: 80})]
op186.met_dependencies = []
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf186.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (768, 80)
op186.sizes = ([768], [80])
buf185_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf186_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op186_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf186', get_index_1, reduction)
        return None


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 61440})]
op187.unmet_dependencies = [MemoryDep('buf178', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (61440, 256)
op187.sizes = ([80, 768], [256])
buf178_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op187_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_1, reduction)
        return None


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 768})]
op188.unmet_dependencies = [MemoryDep('buf187', c0 + 768*c1, {c0: 768, c1: 80})]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf188.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (768, 80)
op188.sizes = ([768], [80])
buf187_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf188_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op188_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_1, reduction)
        return None


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 15728640})]
op189.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 15728640}),
        MemoryDep('buf166', c0, {c0: 20480}),
        MemoryDep('buf167', c0, {c0: 20480}),
        MemoryDep('buf178', c0, {c0: 15728640}),
        MemoryDep('buf183', c0, {c0: 20480}),
        MemoryDep('buf184', c0, {c0: 20480})]
op189.met_dependencies = 
    [   MemoryDep('add_79', c0, {c0: 15728640}),
        MemoryDep('primals_119', c1, {c0: 20480, c1: 768})]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf189.users = [
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (15728640, 1)
op189.sizes = ([20480, 768], [])
buf161_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf167_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf178_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_119_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf183_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_79_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf166_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf184_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op189_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf167', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf178', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_119', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf183', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_79', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf166', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf167', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf184', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf189', get_index_9, add_2, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 15728640})]
op190.unmet_dependencies = [   MemoryDep('buf189', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (15728640, 1)
op190.sizes = ([20480, 768], [])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf190_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op190_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, to_dtype, None)
        return store


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 589824})]
op191.unmet_dependencies = []
op191.met_dependencies = [MemoryDep('primals_117', c0, {c0: 589824})]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (589824, 1)
op191.sizes = ([589824], [])
primals_117_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf191_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op191_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_117', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf191', get_index_1, to_dtype, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf190', mode=None), StarDep(name='buf191', mode=None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 20480})]
op193.unmet_dependencies = []
op193.met_dependencies = [MemoryDep('add_75', c0, {c0: 15728640})]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (20480, 768)
op193.sizes = ([20480], [768])
add_75_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op193_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_75', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 20480})]
op194.unmet_dependencies = []
op194.met_dependencies = [MemoryDep('add_75', c0, {c0: 15728640})]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (20480, 768)
op194.sizes = ([20480], [768])
add_75_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op194_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_75', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 1769472})]
op196.unmet_dependencies = []
op196.met_dependencies = [MemoryDep('primals_116', c0, {c0: 1769472})]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf196.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (1769472, 1)
op196.sizes = ([1769472], [])
primals_116_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf196_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op196_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_116', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf196', get_index_1, to_dtype, None)
        return store


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op197.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 20480}), MemoryDep('buf194', c0, {c0: 20480})]
op197.met_dependencies = 
    [   MemoryDep('add_75', c0, {c0: 15728640}),
        MemoryDep('primals_113', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_114', c1, {c0: 20480, c1: 768})]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
    ]
]
op197.group.device = cuda:0
op197.group.iteration = (15728640, 1)
op197.sizes = ([20, 1024, 768], [])
add_75_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_114_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf197_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op197_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_113', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_114', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf197', get_index_5, to_dtype, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf196', mode=None), StarDep(name='buf197', mode=None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.mm


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 47185920})]
op199.unmet_dependencies = [MemoryDep('buf198', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op199.met_dependencies = [MemoryDep('primals_115', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (47185920, 1)
op199.sizes = ([3, 20480, 768], [])
buf198_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_115_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op199_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_115', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf199', get_index_2, add, None)
        return store


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 15728640})]
op200.unmet_dependencies = [   MemoryDep('buf199', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (15728640, 1)
op200.sizes = ([1024, 20, 768], [])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf200_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op200_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf200', get_index_1, load, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 15728640})]
op201.unmet_dependencies = [   MemoryDep('buf199', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (15728640, 1)
op201.sizes = ([1024, 20, 768], [])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf201_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op201_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf201', get_index_1, load, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 15728640})]
op202.unmet_dependencies = [   MemoryDep('buf199', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (15728640, 1)
op202.sizes = ([1024, 20, 768], [])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf202_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op202_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf202', get_index_1, load, None)
        return store


op203: ExternKernelSchedulerNode(FallbackKernel)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = 
    [   StarDep(name='buf200', mode=None),
        StarDep(name='buf201', mode=None),
        StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='bwd_rng_state_9', mode=None)]
op203.outputs = [
    buf203: FallbackKernel
    buf203.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
    ]
]
op203.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op204: ExternKernelSchedulerNode(MultiOutput)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: MultiOutput
    buf204.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf204.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op204.node.kernel = None


op205: ExternKernelSchedulerNode(MultiOutput)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: MultiOutput
    buf205.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = None


op206: ExternKernelSchedulerNode(MultiOutput)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: MultiOutput
    buf206.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op206.node.kernel = None


op207: ExternKernelSchedulerNode(MultiOutput)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: MultiOutput
    buf207.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = None


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf190', mode=None), StarDep(name='buf204', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 61440})]
op210.unmet_dependencies = [MemoryDep('buf190', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (61440, 256)
op210.sizes = ([80, 768], [256])
buf190_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op210_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf210', get_index_1, reduction)
        return None


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 768})]
op211.unmet_dependencies = [MemoryDep('buf210', c0 + 768*c1, {c0: 768, c1: 80})]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf211.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (768, 80)
op211.sizes = ([768], [80])
buf210_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf211_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op211_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf211', get_index_1, reduction)
        return None


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 589824})]
op212.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 589824})]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf212.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (589824, 1)
op212.sizes = ([589824], [])
buf209_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf212_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op212_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf212', get_index_1, to_dtype, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 15728640})]
op213.unmet_dependencies = [   MemoryDep('buf199', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (15728640, 1)
op213.sizes = ([1024, 20, 768], [])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf213_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op213_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf213', get_index_1, load, None)
        return store


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 15728640})]
op214.unmet_dependencies = [   MemoryDep('buf199', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (15728640, 1)
op214.sizes = ([1024, 20, 768], [])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf214_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op214_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf214', get_index_1, load, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 15728640})]
op215.unmet_dependencies = [   MemoryDep('buf199', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (15728640, 1)
op215.sizes = ([1024, 20, 768], [])
buf199_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf215_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op215_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(FallbackKernel)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = 
    [   StarDep(name='buf192', mode=None),
        StarDep(name='buf204', mode=None),
        StarDep(name='buf205', mode=None),
        StarDep(name='buf206', mode=None),
        StarDep(name='buf207', mode=None),
        StarDep(name='buf213', mode=None),
        StarDep(name='buf214', mode=None),
        StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: FallbackKernel
    buf216.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf216.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
    ]
]
op216.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op217: ExternKernelSchedulerNode(MultiOutput)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: MultiOutput
    buf217.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
    ]
]
op217.node.kernel = None


op218: ExternKernelSchedulerNode(MultiOutput)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: MultiOutput
    buf218.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
    ]
]
op218.node.kernel = None


op219: ExternKernelSchedulerNode(MultiOutput)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: MultiOutput
    buf219.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
    ]
]
op219.node.kernel = None


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 73728})]
op220.unmet_dependencies = 
    [   MemoryDep('buf217', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf218', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf219', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (73728, 640)
op220.sizes = ([32, 2304], [640])
buf219_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf218_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf217_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op220_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf219', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf217', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf220', get_index_6, reduction)
        return None


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 2304})]
op221.unmet_dependencies = [MemoryDep('buf220', c0 + 2304*c1, {c0: 2304, c1: 32})]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf221.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (2304, 32)
op221.sizes = ([2304], [32])
buf220_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf221_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op221_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf221', get_index_1, reduction)
        return None


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 47185920})]
op222.unmet_dependencies = 
    [   MemoryDep('buf217', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf218', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf219', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf222.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op222.group.device = cuda:0
op222.group.iteration = (47185920, 1)
op222.sizes = ([1024, 20, 3, 768], [])
buf219_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf218_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf217_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf222_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op222_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf219', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf217', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf222', get_index_6, add_1, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf197', mode=None), StarDep(name='buf222', mode=None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False)]
]
op223.node.kernel = extern_kernels.mm


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf196', mode=None), StarDep(name='buf222', mode=None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1769472})]
op225.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 1769472})]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf225.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1769472, 1)
op225.sizes = ([1769472], [])
buf223_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf225_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op225_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf225', get_index_1, to_dtype, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 20480})]
op226.unmet_dependencies = [MemoryDep('buf224', c0, {c0: 15728640})]
op226.met_dependencies = [MemoryDep('primals_113', c1, {c0: 20480, c1: 768})]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf226.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (20480, 768)
op226.sizes = ([20480], [768])
buf224_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op226_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_113', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_2, reduction)
        return None


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 20480})]
op227.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 20480}),
        MemoryDep('buf194', c0, {c0: 20480}),
        MemoryDep('buf224', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op227.met_dependencies = 
    [   MemoryDep('add_75', c0, {c0: 15728640}),
        MemoryDep('primals_113', c1, {c0: 20480, c1: 768})]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf227.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (20480, 768)
op227.sizes = ([20, 1024], [768])
buf224_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_75_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op227_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_113', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_75', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf193', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf194', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf227', get_index_5, reduction)
        return None


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 61440})]
op228.unmet_dependencies = 
    [   MemoryDep('buf193', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf194', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf224', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op228.met_dependencies = [MemoryDep('add_75', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (61440, 256)
op228.sizes = ([80, 768], [256])
buf224_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_75_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op228_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_75', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf193', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf194', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf228', get_index_4, reduction)
        return None


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 768})]
op229.unmet_dependencies = [MemoryDep('buf228', c0 + 768*c1, {c0: 768, c1: 80})]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf229.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (768, 80)
op229.sizes = ([768], [80])
buf228_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf229_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op229_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_1, reduction)
        return None


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 61440})]
op230.unmet_dependencies = [   MemoryDep('buf224', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (61440, 256)
op230.sizes = ([80, 768], [256])
buf224_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op230_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_1, reduction)
        return None


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 768})]
op231.unmet_dependencies = [MemoryDep('buf230', c0 + 768*c1, {c0: 768, c1: 80})]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf231.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (768, 80)
op231.sizes = ([768], [80])
buf230_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf231_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op231_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf231', get_index_1, reduction)
        return None


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 15728640})]
op232.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 15728640}),
        MemoryDep('buf193', c0, {c0: 20480}),
        MemoryDep('buf194', c0, {c0: 20480}),
        MemoryDep('buf224', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf226', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf227', c0, {c0: 20480})]
op232.met_dependencies = 
    [   MemoryDep('add_75', c0, {c0: 15728640}),
        MemoryDep('primals_113', c1, {c0: 20480, c1: 768})]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (15728640, 1)
op232.sizes = ([20, 1024, 768], [])
buf189_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf194_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf224_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_113_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf226_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_75_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf193_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf227_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op232_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf194', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf224', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_113', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf226', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_75', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf193', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf194', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf227', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf232', get_index_9, add_2, None)
        return store


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 15728640})]
op233.unmet_dependencies = []
op233.met_dependencies = [MemoryDep('inductor_seeds_default', 8, {})]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (15728640, 1)
op233.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op233_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 8
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 8)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf233', get_index_1, rand, None)
        return store


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 15728640})]
op234.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 15728640}),
        MemoryDep('buf233', c0, {c0: 15728640})]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf234.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (15728640, 1)
op234.sizes = ([15728640], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf233_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf234_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op234_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf233', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf234', get_index_2, mul_1, None)
        return store


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1179648})]
op235.unmet_dependencies = []
op235.met_dependencies = [MemoryDep('primals_111', c0, {c0: 1179648})]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (1179648, 1)
op235.sizes = ([1179648], [])
primals_111_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf235_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op235_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_111', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf235', get_index_1, to_dtype, None)
        return store


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf234', mode=None), StarDep(name='buf235', mode=None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 20480})]
op237.unmet_dependencies = []
op237.met_dependencies = [MemoryDep('add_71', c0, {c0: 15728640})]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (20480, 768)
op237.sizes = ([20480], [768])
add_71_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op237_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_71', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf237', get_index_1, getitem)
        return store_reduction


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 20480})]
op238.unmet_dependencies = []
op238.met_dependencies = [MemoryDep('add_71', c0, {c0: 15728640})]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (20480, 768)
op238.sizes = ([20480], [768])
add_71_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op238_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_71', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf238', get_index_1, getitem_1)
        return store_reduction


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 15728640})]
op240.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 20480}), MemoryDep('buf238', c0, {c0: 20480})]
op240.met_dependencies = 
    [   MemoryDep('add_71', c0, {c0: 15728640}),
        MemoryDep('primals_107', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_108', c1, {c0: 20480, c1: 768})]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (15728640, 1)
op240.sizes = ([20480, 768], [])
add_71_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_108_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf240_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op240_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf237', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf238', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_107', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_108', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf240', get_index_5, to_dtype, None)
        return store


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 1179648})]
op241.unmet_dependencies = []
op241.met_dependencies = [MemoryDep('primals_109', c0, {c0: 1179648})]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf241.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
    ]
]
op241.group.device = cuda:0
op241.group.iteration = (1179648, 1)
op241.sizes = ([1179648], [])
primals_109_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf241_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op241_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_109', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf241', get_index_1, to_dtype, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf240', mode=None), StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op242.node.kernel = extern_kernels.mm


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 31457280})]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 31457280})]
op243.met_dependencies = [MemoryDep('primals_110', c1, {c0: 20480, c1: 1536})]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (31457280, 1)
op243.sizes = ([20480, 1536], [])
buf242_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf243_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op243_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_110', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf242', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_110', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf243', get_index_4, to_dtype_4, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf234', mode=None), StarDep(name='buf243', mode=None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.mm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 61440})]
op245.unmet_dependencies = [MemoryDep('buf234', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf245.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (61440, 256)
op245.sizes = ([80, 768], [256])
buf234_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op245_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_1, reduction)
        return None


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 768})]
op246.unmet_dependencies = [MemoryDep('buf245', c0 + 768*c1, {c0: 768, c1: 80})]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf246.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (768, 80)
op246.sizes = ([768], [80])
buf245_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf246_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op246_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_1, reduction)
        return None


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 1179648})]
op247.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 1179648})]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf247.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (1179648, 1)
op247.sizes = ([1179648], [])
buf244_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf247_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op247_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf247', get_index_1, to_dtype, None)
        return store


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 31457280})]
op248.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 31457280}),
        MemoryDep('buf242', c0, {c0: 31457280})]
op248.met_dependencies = [MemoryDep('primals_110', c1, {c0: 20480, c1: 1536})]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf248.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (31457280, 1)
op248.sizes = ([20480, 1536], [])
buf236_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf242_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_110_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf248_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op248_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf242', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_110', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf242', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_110', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf242', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_110', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf242', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_110', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf248', get_index_9, to_dtype_9, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf241', mode=None), StarDep(name='buf248', mode=None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf240', mode=None), StarDep(name='buf248', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
]
op250.node.kernel = extern_kernels.mm


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 61440})]
op251.unmet_dependencies = [MemoryDep('buf248', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (61440, 512)
op251.sizes = ([40, 1536], [512])
buf248_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op251_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf251', get_index_1, reduction)
        return None


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1536})]
op252.unmet_dependencies = [MemoryDep('buf251', c0 + 1536*c1, {c0: 1536, c1: 40})]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf252.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (1536, 40)
op252.sizes = ([1536], [40])
buf251_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf252_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op252_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf252', get_index_1, reduction)
        return None


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 1179648})]
op253.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1179648})]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf253.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (1179648, 1)
op253.sizes = ([1179648], [])
buf250_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf253_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op253_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf253', get_index_1, to_dtype, None)
        return store


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 20480})]
op254.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 15728640})]
op254.met_dependencies = [MemoryDep('primals_107', c1, {c0: 20480, c1: 768})]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf254.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (20480, 768)
op254.sizes = ([20480], [768])
buf249_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op254_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_107', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf254', get_index_2, reduction)
        return None


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 20480})]
op255.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 20480}),
        MemoryDep('buf238', c0, {c0: 20480}),
        MemoryDep('buf249', c0, {c0: 15728640})]
op255.met_dependencies = 
    [   MemoryDep('add_71', c0, {c0: 15728640}),
        MemoryDep('primals_107', c1, {c0: 20480, c1: 768})]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf255.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (20480, 768)
op255.sizes = ([20480], [768])
buf249_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_71_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op255_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_107', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_71', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf237', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf238', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_5, reduction)
        return None


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 61440})]
op256.unmet_dependencies = 
    [   MemoryDep('buf237', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf238', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf249', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op256.met_dependencies = [MemoryDep('add_71', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (61440, 256)
op256.sizes = ([80, 768], [256])
buf249_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_71_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op256_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_71', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf237', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf238', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf256', get_index_4, reduction)
        return None


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 768})]
op257.unmet_dependencies = [MemoryDep('buf256', c0 + 768*c1, {c0: 768, c1: 80})]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf257.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (768, 80)
op257.sizes = ([768], [80])
buf256_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf257_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op257_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_1, reduction)
        return None


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 61440})]
op258.unmet_dependencies = [MemoryDep('buf249', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf258.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (61440, 256)
op258.sizes = ([80, 768], [256])
buf249_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op258_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf258', get_index_1, reduction)
        return None


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 768})]
op259.unmet_dependencies = [MemoryDep('buf258', c0 + 768*c1, {c0: 768, c1: 80})]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf259.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (768, 80)
op259.sizes = ([768], [80])
buf258_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf259_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op259_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_1, reduction)
        return None


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 15728640})]
op260.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 15728640}),
        MemoryDep('buf237', c0, {c0: 20480}),
        MemoryDep('buf238', c0, {c0: 20480}),
        MemoryDep('buf249', c0, {c0: 15728640}),
        MemoryDep('buf254', c0, {c0: 20480}),
        MemoryDep('buf255', c0, {c0: 20480})]
op260.met_dependencies = 
    [   MemoryDep('add_71', c0, {c0: 15728640}),
        MemoryDep('primals_107', c1, {c0: 20480, c1: 768})]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (15728640, 1)
op260.sizes = ([20480, 768], [])
buf232_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf238_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf249_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_107_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf254_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_71_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf237_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf255_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op260_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf238', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf249', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_107', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf254', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_71', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf237', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf238', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf255', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf260', get_index_9, add_2, None)
        return store


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 15728640})]
op261.unmet_dependencies = [   MemoryDep('buf260', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (15728640, 1)
op261.sizes = ([20480, 768], [])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf261_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op261_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf261', get_index_1, to_dtype, None)
        return store


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 589824})]
op262.unmet_dependencies = []
op262.met_dependencies = [MemoryDep('primals_105', c0, {c0: 589824})]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (589824, 1)
op262.sizes = ([589824], [])
primals_105_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf262_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op262_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_105', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf262', get_index_1, to_dtype, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf262', mode=None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op263.node.kernel = extern_kernels.mm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 20480})]
op264.unmet_dependencies = []
op264.met_dependencies = [MemoryDep('add_67', c0, {c0: 15728640})]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (20480, 768)
op264.sizes = ([20480], [768])
add_67_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op264_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf264', get_index_1, getitem)
        return store_reduction


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 20480})]
op265.unmet_dependencies = []
op265.met_dependencies = [MemoryDep('add_67', c0, {c0: 15728640})]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (20480, 768)
op265.sizes = ([20480], [768])
add_67_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op265_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf265', get_index_1, getitem_1)
        return store_reduction


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 1769472})]
op267.unmet_dependencies = []
op267.met_dependencies = [MemoryDep('primals_104', c0, {c0: 1769472})]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf267.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (1769472, 1)
op267.sizes = ([1769472], [])
primals_104_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf267_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op267_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_104', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf267', get_index_1, to_dtype, None)
        return store


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op268.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 20480}), MemoryDep('buf265', c0, {c0: 20480})]
op268.met_dependencies = 
    [   MemoryDep('add_67', c0, {c0: 15728640}),
        MemoryDep('primals_101', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_102', c1, {c0: 20480, c1: 768})]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf268.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
    ]
]
op268.group.device = cuda:0
op268.group.iteration = (15728640, 1)
op268.sizes = ([20, 1024, 768], [])
add_67_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_101_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_102_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf268_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op268_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf264', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf265', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_101', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_102', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf268', get_index_5, to_dtype, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf267', mode=None), StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 47185920})]
op270.unmet_dependencies = [MemoryDep('buf269', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op270.met_dependencies = [MemoryDep('primals_103', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf270.users = [
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op270.group.device = cuda:0
op270.group.iteration = (47185920, 1)
op270.sizes = ([3, 20480, 768], [])
buf269_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_103_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op270_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_103', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf270', get_index_2, add, None)
        return store


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 15728640})]
op271.unmet_dependencies = [   MemoryDep('buf270', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (15728640, 1)
op271.sizes = ([1024, 20, 768], [])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf271_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op271_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 15728640})]
op272.unmet_dependencies = [   MemoryDep('buf270', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (15728640, 1)
op272.sizes = ([1024, 20, 768], [])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf272_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op272_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf272', get_index_1, load, None)
        return store


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 15728640})]
op273.unmet_dependencies = [   MemoryDep('buf270', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (15728640, 1)
op273.sizes = ([1024, 20, 768], [])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf273_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op273_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf273', get_index_1, load, None)
        return store


op274: ExternKernelSchedulerNode(FallbackKernel)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = 
    [   StarDep(name='buf271', mode=None),
        StarDep(name='buf272', mode=None),
        StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='bwd_rng_state_8', mode=None)]
op274.outputs = [
    buf274: FallbackKernel
    buf274.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf274.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op274.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op275: ExternKernelSchedulerNode(MultiOutput)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: MultiOutput
    buf275.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf275.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False),
    ]
]
op275.node.kernel = None


op276: ExternKernelSchedulerNode(MultiOutput)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: MultiOutput
    buf276.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op276.node.kernel = None


op277: ExternKernelSchedulerNode(MultiOutput)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: MultiOutput
    buf277.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = None


op278: ExternKernelSchedulerNode(MultiOutput)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: MultiOutput
    buf278.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op278.node.kernel = None


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf275', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 61440})]
op281.unmet_dependencies = [MemoryDep('buf261', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (61440, 256)
op281.sizes = ([80, 768], [256])
buf261_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op281_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf281', get_index_1, reduction)
        return None


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 768})]
op282.unmet_dependencies = [MemoryDep('buf281', c0 + 768*c1, {c0: 768, c1: 80})]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf282.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (768, 80)
op282.sizes = ([768], [80])
buf281_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf282_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op282_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf282', get_index_1, reduction)
        return None


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 589824})]
op283.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 589824})]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf283.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (589824, 1)
op283.sizes = ([589824], [])
buf280_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf283_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op283_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf283', get_index_1, to_dtype, None)
        return store


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 15728640})]
op284.unmet_dependencies = [   MemoryDep('buf270', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (15728640, 1)
op284.sizes = ([1024, 20, 768], [])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf284_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op284_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf284', get_index_1, load, None)
        return store


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 15728640})]
op285.unmet_dependencies = [   MemoryDep('buf270', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (15728640, 1)
op285.sizes = ([1024, 20, 768], [])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf285_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op285_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf285', get_index_1, load, None)
        return store


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 15728640})]
op286.unmet_dependencies = [   MemoryDep('buf270', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (15728640, 1)
op286.sizes = ([1024, 20, 768], [])
buf270_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf286_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op286_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf286', get_index_1, load, None)
        return store


op287: ExternKernelSchedulerNode(FallbackKernel)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = 
    [   StarDep(name='buf263', mode=None),
        StarDep(name='buf275', mode=None),
        StarDep(name='buf276', mode=None),
        StarDep(name='buf277', mode=None),
        StarDep(name='buf278', mode=None),
        StarDep(name='buf284', mode=None),
        StarDep(name='buf285', mode=None),
        StarDep(name='buf286', mode=None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: FallbackKernel
    buf287.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op287.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op288: ExternKernelSchedulerNode(MultiOutput)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: MultiOutput
    buf288.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf288.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
    ]
]
op288.node.kernel = None


op289: ExternKernelSchedulerNode(MultiOutput)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: MultiOutput
    buf289.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
    ]
]
op289.node.kernel = None


op290: ExternKernelSchedulerNode(MultiOutput)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: MultiOutput
    buf290.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf290.users = [
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
    ]
]
op290.node.kernel = None


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 73728})]
op291.unmet_dependencies = 
    [   MemoryDep('buf288', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf289', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf290', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op291.met_dependencies = []
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (73728, 640)
op291.sizes = ([32, 2304], [640])
buf290_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf289_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf288_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op291_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf290', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf289', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf291', get_index_6, reduction)
        return None


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 2304})]
op292.unmet_dependencies = [MemoryDep('buf291', c0 + 2304*c1, {c0: 2304, c1: 32})]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf292.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (2304, 32)
op292.sizes = ([2304], [32])
buf291_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf292_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op292_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf292', get_index_1, reduction)
        return None


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 47185920})]
op293.unmet_dependencies = 
    [   MemoryDep('buf288', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf289', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf290', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (47185920, 1)
op293.sizes = ([1024, 20, 3, 768], [])
buf290_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf289_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf288_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf293_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op293_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf290', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf289', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf293', get_index_6, add_1, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf268', mode=None), StarDep(name='buf293', mode=None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.mm


op295: ExternKernelSchedulerNode(ExternKernelOut)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf267', mode=None), StarDep(name='buf293', mode=None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ExternKernelOut
    buf295.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op295.node.kernel = extern_kernels.mm


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 1769472})]
op296.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 1769472})]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf296.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (1769472, 1)
op296.sizes = ([1769472], [])
buf294_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf296_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op296_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf296', get_index_1, to_dtype, None)
        return store


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 20480})]
op297.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 15728640})]
op297.met_dependencies = [MemoryDep('primals_101', c1, {c0: 20480, c1: 768})]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf297.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (20480, 768)
op297.sizes = ([20480], [768])
buf295_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_101_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf297_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op297_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_101', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf297', get_index_2, reduction)
        return None


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 20480})]
op298.unmet_dependencies = 
    [   MemoryDep('buf264', c0, {c0: 20480}),
        MemoryDep('buf265', c0, {c0: 20480}),
        MemoryDep('buf295', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op298.met_dependencies = 
    [   MemoryDep('add_67', c0, {c0: 15728640}),
        MemoryDep('primals_101', c1, {c0: 20480, c1: 768})]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf298.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (20480, 768)
op298.sizes = ([20, 1024], [768])
buf295_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_101_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_67_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op298_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_101', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_67', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf264', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf265', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf298', get_index_5, reduction)
        return None


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 61440})]
op299.unmet_dependencies = 
    [   MemoryDep('buf264', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf265', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf295', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op299.met_dependencies = [MemoryDep('add_67', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf299.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (61440, 256)
op299.sizes = ([80, 768], [256])
buf295_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_67_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op299_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_67', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf264', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf265', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf299', get_index_4, reduction)
        return None


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 768})]
op300.unmet_dependencies = [MemoryDep('buf299', c0 + 768*c1, {c0: 768, c1: 80})]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf300.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (768, 80)
op300.sizes = ([768], [80])
buf299_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf300_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op300_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_1, reduction)
        return None


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 61440})]
op301.unmet_dependencies = [   MemoryDep('buf295', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (61440, 256)
op301.sizes = ([80, 768], [256])
buf295_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op301_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_1, reduction)
        return None


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 768})]
op302.unmet_dependencies = [MemoryDep('buf301', c0 + 768*c1, {c0: 768, c1: 80})]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf302.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (768, 80)
op302.sizes = ([768], [80])
buf301_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf302_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op302_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf302', get_index_1, reduction)
        return None


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 15728640})]
op303.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 15728640}),
        MemoryDep('buf264', c0, {c0: 20480}),
        MemoryDep('buf265', c0, {c0: 20480}),
        MemoryDep('buf295', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf297', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf298', c0, {c0: 20480})]
op303.met_dependencies = 
    [   MemoryDep('add_67', c0, {c0: 15728640}),
        MemoryDep('primals_101', c1, {c0: 20480, c1: 768})]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (15728640, 1)
op303.sizes = ([20, 1024, 768], [])
buf260_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf265_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf295_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_101_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf297_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_67_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf264_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf298_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op303_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf265', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf295', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_101', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf297', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_67', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf264', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf265', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf298', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf303', get_index_9, add_2, None)
        return store


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 15728640})]
op304.unmet_dependencies = []
op304.met_dependencies = [MemoryDep('inductor_seeds_default', 7, {})]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (15728640, 1)
op304.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op304_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 7
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 7)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf304', get_index_1, rand, None)
        return store


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 15728640})]
op305.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 15728640}),
        MemoryDep('buf304', c0, {c0: 15728640})]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf305.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (15728640, 1)
op305.sizes = ([15728640], [])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf304_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf305_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op305_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf304', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf305', get_index_2, mul_1, None)
        return store


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 1179648})]
op306.unmet_dependencies = []
op306.met_dependencies = [MemoryDep('primals_99', c0, {c0: 1179648})]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (1179648, 1)
op306.sizes = ([1179648], [])
primals_99_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf306_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op306_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_99', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf306', get_index_1, to_dtype, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf305', mode=None), StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.mm


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 20480})]
op308.unmet_dependencies = []
op308.met_dependencies = [MemoryDep('add_63', c0, {c0: 15728640})]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (20480, 768)
op308.sizes = ([20480], [768])
add_63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op308_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf308', get_index_1, getitem)
        return store_reduction


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 20480})]
op309.unmet_dependencies = []
op309.met_dependencies = [MemoryDep('add_63', c0, {c0: 15728640})]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (20480, 768)
op309.sizes = ([20480], [768])
add_63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op309_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf309', get_index_1, getitem_1)
        return store_reduction


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 15728640})]
op311.unmet_dependencies = [MemoryDep('buf308', c0, {c0: 20480}), MemoryDep('buf309', c0, {c0: 20480})]
op311.met_dependencies = 
    [   MemoryDep('add_63', c0, {c0: 15728640}),
        MemoryDep('primals_95', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_96', c1, {c0: 20480, c1: 768})]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf311.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op311.group.device = cuda:0
op311.group.iteration = (15728640, 1)
op311.sizes = ([20480, 768], [])
add_63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_96_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf311_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op311_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf308', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf309', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_95', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_96', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf311', get_index_5, to_dtype, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 1179648})]
op312.unmet_dependencies = []
op312.met_dependencies = [MemoryDep('primals_97', c0, {c0: 1179648})]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf312.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (1179648, 1)
op312.sizes = ([1179648], [])
primals_97_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf312_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op312_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_97', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, to_dtype, None)
        return store


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf311', mode=None), StarDep(name='buf312', mode=None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
    ]
]
op313.node.kernel = extern_kernels.mm


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 31457280})]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 31457280})]
op314.met_dependencies = [MemoryDep('primals_98', c1, {c0: 20480, c1: 1536})]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (31457280, 1)
op314.sizes = ([20480, 1536], [])
buf313_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf314_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op314_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_98', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf313', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_98', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf314', get_index_4, to_dtype_4, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf305', mode=None), StarDep(name='buf314', mode=None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf315.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op315.node.kernel = extern_kernels.mm


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 61440})]
op316.unmet_dependencies = [MemoryDep('buf305', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf316.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (61440, 256)
op316.sizes = ([80, 768], [256])
buf305_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op316_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf316', get_index_1, reduction)
        return None


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 768})]
op317.unmet_dependencies = [MemoryDep('buf316', c0 + 768*c1, {c0: 768, c1: 80})]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf317.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (768, 80)
op317.sizes = ([768], [80])
buf316_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf317_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op317_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf317', get_index_1, reduction)
        return None


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1179648})]
op318.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 1179648})]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf318.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (1179648, 1)
op318.sizes = ([1179648], [])
buf315_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf318_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op318_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf318', get_index_1, to_dtype, None)
        return store


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 31457280})]
op319.unmet_dependencies = 
    [   MemoryDep('buf307', c0, {c0: 31457280}),
        MemoryDep('buf313', c0, {c0: 31457280})]
op319.met_dependencies = [MemoryDep('primals_98', c1, {c0: 20480, c1: 1536})]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf319.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (31457280, 1)
op319.sizes = ([20480, 1536], [])
buf307_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf313_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_98_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf319_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op319_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf313', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_98', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf313', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_98', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf313', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_98', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf313', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_98', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf319', get_index_9, to_dtype_9, None)
        return store


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf312', mode=None), StarDep(name='buf319', mode=None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.mm


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf311', mode=None), StarDep(name='buf319', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf321.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False)]
]
op321.node.kernel = extern_kernels.mm


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 61440})]
op322.unmet_dependencies = [MemoryDep('buf319', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (61440, 512)
op322.sizes = ([40, 1536], [512])
buf319_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op322_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf322', get_index_1, reduction)
        return None


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 1536})]
op323.unmet_dependencies = [MemoryDep('buf322', c0 + 1536*c1, {c0: 1536, c1: 40})]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf323.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (1536, 40)
op323.sizes = ([1536], [40])
buf322_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf323_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op323_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf323', get_index_1, reduction)
        return None


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 1179648})]
op324.unmet_dependencies = [MemoryDep('buf321', c0, {c0: 1179648})]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf324.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (1179648, 1)
op324.sizes = ([1179648], [])
buf321_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf324_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op324_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf324', get_index_1, to_dtype, None)
        return store


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 20480})]
op325.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 15728640})]
op325.met_dependencies = [MemoryDep('primals_95', c1, {c0: 20480, c1: 768})]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf325.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (20480, 768)
op325.sizes = ([20480], [768])
buf320_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op325_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf325', get_index_2, reduction)
        return None


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 20480})]
op326.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 20480}),
        MemoryDep('buf309', c0, {c0: 20480}),
        MemoryDep('buf320', c0, {c0: 15728640})]
op326.met_dependencies = 
    [   MemoryDep('add_63', c0, {c0: 15728640}),
        MemoryDep('primals_95', c1, {c0: 20480, c1: 768})]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf326.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (20480, 768)
op326.sizes = ([20480], [768])
buf320_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op326_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_95', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_63', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf308', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf309', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf326', get_index_5, reduction)
        return None


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 61440})]
op327.unmet_dependencies = 
    [   MemoryDep('buf308', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf309', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf320', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op327.met_dependencies = [MemoryDep('add_63', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (61440, 256)
op327.sizes = ([80, 768], [256])
buf320_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op327_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_63', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf308', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf309', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf327', get_index_4, reduction)
        return None


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 768})]
op328.unmet_dependencies = [MemoryDep('buf327', c0 + 768*c1, {c0: 768, c1: 80})]
op328.met_dependencies = []
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf328.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (768, 80)
op328.sizes = ([768], [80])
buf327_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf328_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op328_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf328', get_index_1, reduction)
        return None


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 61440})]
op329.unmet_dependencies = [MemoryDep('buf320', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (61440, 256)
op329.sizes = ([80, 768], [256])
buf320_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op329_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf329', get_index_1, reduction)
        return None


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 768})]
op330.unmet_dependencies = [MemoryDep('buf329', c0 + 768*c1, {c0: 768, c1: 80})]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf330.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (768, 80)
op330.sizes = ([768], [80])
buf329_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf330_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op330_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf330', get_index_1, reduction)
        return None


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 15728640})]
op331.unmet_dependencies = 
    [   MemoryDep('buf303', c0, {c0: 15728640}),
        MemoryDep('buf308', c0, {c0: 20480}),
        MemoryDep('buf309', c0, {c0: 20480}),
        MemoryDep('buf320', c0, {c0: 15728640}),
        MemoryDep('buf325', c0, {c0: 20480}),
        MemoryDep('buf326', c0, {c0: 20480})]
op331.met_dependencies = 
    [   MemoryDep('add_63', c0, {c0: 15728640}),
        MemoryDep('primals_95', c1, {c0: 20480, c1: 768})]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (15728640, 1)
op331.sizes = ([20480, 768], [])
buf303_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf309_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf320_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_95_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf325_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_63_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf308_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf326_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op331_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf309', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf320', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_95', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf325', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_63', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf308', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf309', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf326', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf331', get_index_9, add_2, None)
        return store


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 15728640})]
op332.unmet_dependencies = [   MemoryDep('buf331', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf332.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (15728640, 1)
op332.sizes = ([20480, 768], [])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf332_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op332_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf332', get_index_1, to_dtype, None)
        return store


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 589824})]
op333.unmet_dependencies = []
op333.met_dependencies = [MemoryDep('primals_93', c0, {c0: 589824})]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf333.users = [NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (589824, 1)
op333.sizes = ([589824], [])
primals_93_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf333_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op333_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_93', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf333', get_index_1, to_dtype, None)
        return store


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf332', mode=None), StarDep(name='buf333', mode=None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op334.node.kernel = extern_kernels.mm


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 20480})]
op335.unmet_dependencies = []
op335.met_dependencies = [MemoryDep('add_59', c0, {c0: 15728640})]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (20480, 768)
op335.sizes = ([20480], [768])
add_59_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op335_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_59', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf335', get_index_1, getitem)
        return store_reduction


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 20480})]
op336.unmet_dependencies = []
op336.met_dependencies = [MemoryDep('add_59', c0, {c0: 15728640})]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op336.group.device = cuda:0
op336.group.iteration = (20480, 768)
op336.sizes = ([20480], [768])
add_59_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op336_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_59', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf336', get_index_1, getitem_1)
        return store_reduction


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1769472})]
op338.unmet_dependencies = []
op338.met_dependencies = [MemoryDep('primals_92', c0, {c0: 1769472})]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf338.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
]
op338.group.device = cuda:0
op338.group.iteration = (1769472, 1)
op338.sizes = ([1769472], [])
primals_92_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf338_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op338_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_92', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf338', get_index_1, to_dtype, None)
        return store


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op339.unmet_dependencies = [MemoryDep('buf335', c0, {c0: 20480}), MemoryDep('buf336', c0, {c0: 20480})]
op339.met_dependencies = 
    [   MemoryDep('add_59', c0, {c0: 15728640}),
        MemoryDep('primals_89', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_90', c1, {c0: 20480, c1: 768})]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (15728640, 1)
op339.sizes = ([20, 1024, 768], [])
add_59_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_90_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf339_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op339_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf335', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf336', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_89', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_90', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf339', get_index_5, to_dtype, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf338', mode=None), StarDep(name='buf339', mode=None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.node.kernel = extern_kernels.mm


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 47185920})]
op341.unmet_dependencies = [MemoryDep('buf340', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op341.met_dependencies = [MemoryDep('primals_91', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
    ]
]
op341.group.device = cuda:0
op341.group.iteration = (47185920, 1)
op341.sizes = ([3, 20480, 768], [])
buf340_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_91_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op341_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_91', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf341', get_index_2, add, None)
        return store


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 15728640})]
op342.unmet_dependencies = [   MemoryDep('buf341', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (15728640, 1)
op342.sizes = ([1024, 20, 768], [])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf342_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op342_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf342', get_index_1, load, None)
        return store


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 15728640})]
op343.unmet_dependencies = [   MemoryDep('buf341', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (15728640, 1)
op343.sizes = ([1024, 20, 768], [])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf343_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op343_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf343', get_index_1, load, None)
        return store


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 15728640})]
op344.unmet_dependencies = [   MemoryDep('buf341', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (15728640, 1)
op344.sizes = ([1024, 20, 768], [])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf344_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op344_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf344', get_index_1, load, None)
        return store


op345: ExternKernelSchedulerNode(FallbackKernel)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = 
    [   StarDep(name='buf342', mode=None),
        StarDep(name='buf343', mode=None),
        StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='bwd_rng_state_7', mode=None)]
op345.outputs = [
    buf345: FallbackKernel
    buf345.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf345.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
    ]
]
op345.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op346: ExternKernelSchedulerNode(MultiOutput)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: MultiOutput
    buf346.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf346.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
    ]
]
op346.node.kernel = None


op347: ExternKernelSchedulerNode(MultiOutput)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: MultiOutput
    buf347.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op347.node.kernel = None


op348: ExternKernelSchedulerNode(MultiOutput)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: MultiOutput
    buf348.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op348.node.kernel = None


op349: ExternKernelSchedulerNode(MultiOutput)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: MultiOutput
    buf349.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op349.node.kernel = None


op351: ExternKernelSchedulerNode(ExternKernelOut)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf332', mode=None), StarDep(name='buf346', mode=None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ExternKernelOut
    buf351.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf351.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op351.node.kernel = extern_kernels.mm


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 61440})]
op352.unmet_dependencies = [MemoryDep('buf332', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (61440, 256)
op352.sizes = ([80, 768], [256])
buf332_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op352_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf352', get_index_1, reduction)
        return None


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 768})]
op353.unmet_dependencies = [MemoryDep('buf352', c0 + 768*c1, {c0: 768, c1: 80})]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf353.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (768, 80)
op353.sizes = ([768], [80])
buf352_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf353_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op353_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf353', get_index_1, reduction)
        return None


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 589824})]
op354.unmet_dependencies = [MemoryDep('buf351', c0, {c0: 589824})]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf354.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (589824, 1)
op354.sizes = ([589824], [])
buf351_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf354_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op354_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf354', get_index_1, to_dtype, None)
        return store


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 15728640})]
op355.unmet_dependencies = [   MemoryDep('buf341', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (15728640, 1)
op355.sizes = ([1024, 20, 768], [])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf355_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op355_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf355', get_index_1, load, None)
        return store


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 15728640})]
op356.unmet_dependencies = [   MemoryDep('buf341', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (15728640, 1)
op356.sizes = ([1024, 20, 768], [])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf356_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op356_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf356', get_index_1, load, None)
        return store


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 15728640})]
op357.unmet_dependencies = [   MemoryDep('buf341', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (15728640, 1)
op357.sizes = ([1024, 20, 768], [])
buf341_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf357_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op357_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf357', get_index_1, load, None)
        return store


op358: ExternKernelSchedulerNode(FallbackKernel)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = 
    [   StarDep(name='buf334', mode=None),
        StarDep(name='buf346', mode=None),
        StarDep(name='buf347', mode=None),
        StarDep(name='buf348', mode=None),
        StarDep(name='buf349', mode=None),
        StarDep(name='buf355', mode=None),
        StarDep(name='buf356', mode=None),
        StarDep(name='buf357', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: FallbackKernel
    buf358.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf358.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
    ]
]
op358.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op359: ExternKernelSchedulerNode(MultiOutput)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: MultiOutput
    buf359.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op359.node.kernel = None


op360: ExternKernelSchedulerNode(MultiOutput)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: MultiOutput
    buf360.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op360.node.kernel = None


op361: ExternKernelSchedulerNode(MultiOutput)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: MultiOutput
    buf361.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op361.node.kernel = None


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 73728})]
op362.unmet_dependencies = 
    [   MemoryDep('buf359', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf360', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf361', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (73728, 640)
op362.sizes = ([32, 2304], [640])
buf361_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf360_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf359_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op362_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf361', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf360', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf359', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf362', get_index_6, reduction)
        return None


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 2304})]
op363.unmet_dependencies = [MemoryDep('buf362', c0 + 2304*c1, {c0: 2304, c1: 32})]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf363.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (2304, 32)
op363.sizes = ([2304], [32])
buf362_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf363_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op363_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf362', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf363', get_index_1, reduction)
        return None


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 47185920})]
op364.unmet_dependencies = 
    [   MemoryDep('buf359', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf360', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf361', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf364.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (47185920, 1)
op364.sizes = ([1024, 20, 3, 768], [])
buf361_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf360_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf359_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf364_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op364_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf361', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf360', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf359', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf364', get_index_6, add_1, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf339', mode=None), StarDep(name='buf364', mode=None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: ExternKernelSchedulerNode(ExternKernelOut)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf338', mode=None), StarDep(name='buf364', mode=None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ExternKernelOut
    buf366.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op366.node.kernel = extern_kernels.mm


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 1769472})]
op367.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 1769472})]
op367.met_dependencies = []
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf367.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (1769472, 1)
op367.sizes = ([1769472], [])
buf365_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf367_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op367_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf367', get_index_1, to_dtype, None)
        return store


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 20480})]
op368.unmet_dependencies = [MemoryDep('buf366', c0, {c0: 15728640})]
op368.met_dependencies = [MemoryDep('primals_89', c1, {c0: 20480, c1: 768})]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf368.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (20480, 768)
op368.sizes = ([20480], [768])
buf366_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op368_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_89', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf368', get_index_2, reduction)
        return None


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 20480})]
op369.unmet_dependencies = 
    [   MemoryDep('buf335', c0, {c0: 20480}),
        MemoryDep('buf336', c0, {c0: 20480}),
        MemoryDep('buf366', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op369.met_dependencies = 
    [   MemoryDep('add_59', c0, {c0: 15728640}),
        MemoryDep('primals_89', c1, {c0: 20480, c1: 768})]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf369.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (20480, 768)
op369.sizes = ([20, 1024], [768])
buf366_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_59_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op369_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_89', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_59', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf335', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf336', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf369', get_index_5, reduction)
        return None


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 61440})]
op370.unmet_dependencies = 
    [   MemoryDep('buf335', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf336', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf366', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op370.met_dependencies = [MemoryDep('add_59', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf370.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (61440, 256)
op370.sizes = ([80, 768], [256])
buf366_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_59_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op370_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_59', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf335', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf336', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf370', get_index_4, reduction)
        return None


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 768})]
op371.unmet_dependencies = [MemoryDep('buf370', c0 + 768*c1, {c0: 768, c1: 80})]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf371.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (768, 80)
op371.sizes = ([768], [80])
buf370_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf371_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op371_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf371', get_index_1, reduction)
        return None


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 61440})]
op372.unmet_dependencies = [   MemoryDep('buf366', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (61440, 256)
op372.sizes = ([80, 768], [256])
buf366_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op372_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf372', get_index_1, reduction)
        return None


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 768})]
op373.unmet_dependencies = [MemoryDep('buf372', c0 + 768*c1, {c0: 768, c1: 80})]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf373.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (768, 80)
op373.sizes = ([768], [80])
buf372_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf373_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op373_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf373', get_index_1, reduction)
        return None


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 15728640})]
op374.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 15728640}),
        MemoryDep('buf335', c0, {c0: 20480}),
        MemoryDep('buf336', c0, {c0: 20480}),
        MemoryDep('buf366', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf368', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf369', c0, {c0: 20480})]
op374.met_dependencies = 
    [   MemoryDep('add_59', c0, {c0: 15728640}),
        MemoryDep('primals_89', c1, {c0: 20480, c1: 768})]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (15728640, 1)
op374.sizes = ([20, 1024, 768], [])
buf331_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf336_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf366_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_89_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf368_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_59_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf335_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf369_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op374_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf336', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf366', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_89', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf368', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_59', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf335', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf336', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf369', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf374', get_index_9, add_2, None)
        return store


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 15728640})]
op375.unmet_dependencies = []
op375.met_dependencies = [MemoryDep('inductor_seeds_default', 6, {})]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (15728640, 1)
op375.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf375_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op375_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 6
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 6)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf375', get_index_1, rand, None)
        return store


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 15728640})]
op376.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 15728640}),
        MemoryDep('buf375', c0, {c0: 15728640})]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (15728640, 1)
op376.sizes = ([15728640], [])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf375_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf376_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op376_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf375', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf376', get_index_2, mul_1, None)
        return store


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 1179648})]
op377.unmet_dependencies = []
op377.met_dependencies = [MemoryDep('primals_87', c0, {c0: 1179648})]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (1179648, 1)
op377.sizes = ([1179648], [])
primals_87_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf377_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op377_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_87', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf377', get_index_1, to_dtype, None)
        return store


op378: ExternKernelSchedulerNode(ExternKernelOut)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf376', mode=None), StarDep(name='buf377', mode=None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ExternKernelOut
    buf378.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf378.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False)]
]
op378.node.kernel = extern_kernels.mm


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 20480})]
op379.unmet_dependencies = []
op379.met_dependencies = [MemoryDep('add_55', c0, {c0: 15728640})]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
    ]
]
op379.group.device = cuda:0
op379.group.iteration = (20480, 768)
op379.sizes = ([20480], [768])
add_55_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op379_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_55', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf379', get_index_1, getitem)
        return store_reduction


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 20480})]
op380.unmet_dependencies = []
op380.met_dependencies = [MemoryDep('add_55', c0, {c0: 15728640})]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf380.users = [
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
    ]
]
op380.group.device = cuda:0
op380.group.iteration = (20480, 768)
op380.sizes = ([20480], [768])
add_55_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op380_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_55', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf380', get_index_1, getitem_1)
        return store_reduction


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 15728640})]
op382.unmet_dependencies = [MemoryDep('buf379', c0, {c0: 20480}), MemoryDep('buf380', c0, {c0: 20480})]
op382.met_dependencies = 
    [   MemoryDep('add_55', c0, {c0: 15728640}),
        MemoryDep('primals_83', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_84', c1, {c0: 20480, c1: 768})]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf382.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False),
    ]
]
op382.group.device = cuda:0
op382.group.iteration = (15728640, 1)
op382.sizes = ([20480, 768], [])
add_55_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_84_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf382_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op382_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf379', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf380', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_83', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_84', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf382', get_index_5, to_dtype, None)
        return store


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 1179648})]
op383.unmet_dependencies = []
op383.met_dependencies = [MemoryDep('primals_85', c0, {c0: 1179648})]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf383.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op383.group.device = cuda:0
op383.group.iteration = (1179648, 1)
op383.sizes = ([1179648], [])
primals_85_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf383_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op383_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_85', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf383', get_index_1, to_dtype, None)
        return store


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf382', mode=None), StarDep(name='buf383', mode=None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False),
    ]
]
op384.node.kernel = extern_kernels.mm


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 31457280})]
op385.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 31457280})]
op385.met_dependencies = [MemoryDep('primals_86', c1, {c0: 20480, c1: 1536})]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (31457280, 1)
op385.sizes = ([20480, 1536], [])
buf384_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf385_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op385_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_86', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf384', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_86', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf385', get_index_4, to_dtype_4, None)
        return store


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf376', mode=None), StarDep(name='buf385', mode=None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op389'), can_inplace=True, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 61440})]
op387.unmet_dependencies = [MemoryDep('buf376', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf387.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (61440, 256)
op387.sizes = ([80, 768], [256])
buf376_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf387_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op387_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf387', get_index_1, reduction)
        return None


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 768})]
op388.unmet_dependencies = [MemoryDep('buf387', c0 + 768*c1, {c0: 768, c1: 80})]
op388.met_dependencies = []
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf388.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (768, 80)
op388.sizes = ([768], [80])
buf387_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf388_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op388_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf388', get_index_1, reduction)
        return None


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 1179648})]
op389.unmet_dependencies = [MemoryDep('buf386', c0, {c0: 1179648})]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf389.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (1179648, 1)
op389.sizes = ([1179648], [])
buf386_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf389_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op389_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf389', get_index_1, to_dtype, None)
        return store


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 31457280})]
op390.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 31457280}),
        MemoryDep('buf384', c0, {c0: 31457280})]
op390.met_dependencies = [MemoryDep('primals_86', c1, {c0: 20480, c1: 1536})]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf390.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
    ]
]
op390.group.device = cuda:0
op390.group.iteration = (31457280, 1)
op390.sizes = ([20480, 1536], [])
buf378_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf384_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_86_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf390_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op390_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_86', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf384', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_86', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf384', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_86', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf384', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_86', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf390', get_index_9, to_dtype_9, None)
        return store


op391: ExternKernelSchedulerNode(ExternKernelOut)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf383', mode=None), StarDep(name='buf390', mode=None)]
op391.met_dependencies = []
op391.outputs = [
    buf391: ExternKernelOut
    buf391.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False),
    ]
]
op391.node.kernel = extern_kernels.mm


op392: ExternKernelSchedulerNode(ExternKernelOut)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf382', mode=None), StarDep(name='buf390', mode=None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ExternKernelOut
    buf392.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf392.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False)]
]
op392.node.kernel = extern_kernels.mm


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 61440})]
op393.unmet_dependencies = [MemoryDep('buf390', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (61440, 512)
op393.sizes = ([40, 1536], [512])
buf390_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op393_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf393', get_index_1, reduction)
        return None


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 1536})]
op394.unmet_dependencies = [MemoryDep('buf393', c0 + 1536*c1, {c0: 1536, c1: 40})]
op394.met_dependencies = []
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf394.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (1536, 40)
op394.sizes = ([1536], [40])
buf393_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf394_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op394_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf394', get_index_1, reduction)
        return None


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 1179648})]
op395.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 1179648})]
op395.met_dependencies = []
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf395.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (1179648, 1)
op395.sizes = ([1179648], [])
buf392_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf395_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op395_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf395', get_index_1, to_dtype, None)
        return store


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 20480})]
op396.unmet_dependencies = [MemoryDep('buf391', c0, {c0: 15728640})]
op396.met_dependencies = [MemoryDep('primals_83', c1, {c0: 20480, c1: 768})]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf396.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (20480, 768)
op396.sizes = ([20480], [768])
buf391_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf396_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op396_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_83', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf396', get_index_2, reduction)
        return None


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 20480})]
op397.unmet_dependencies = 
    [   MemoryDep('buf379', c0, {c0: 20480}),
        MemoryDep('buf380', c0, {c0: 20480}),
        MemoryDep('buf391', c0, {c0: 15728640})]
op397.met_dependencies = 
    [   MemoryDep('add_55', c0, {c0: 15728640}),
        MemoryDep('primals_83', c1, {c0: 20480, c1: 768})]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf397.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (20480, 768)
op397.sizes = ([20480], [768])
buf391_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_55_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf397_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op397_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_83', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_55', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf379', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf380', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf397', get_index_5, reduction)
        return None


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 61440})]
op398.unmet_dependencies = 
    [   MemoryDep('buf379', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf380', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf391', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op398.met_dependencies = [MemoryDep('add_55', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (61440, 256)
op398.sizes = ([80, 768], [256])
buf391_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_55_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf398_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op398_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_55', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf379', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf380', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf398', get_index_4, reduction)
        return None


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 768})]
op399.unmet_dependencies = [MemoryDep('buf398', c0 + 768*c1, {c0: 768, c1: 80})]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf399.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (768, 80)
op399.sizes = ([768], [80])
buf398_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf399_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op399_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf399', get_index_1, reduction)
        return None


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 61440})]
op400.unmet_dependencies = [MemoryDep('buf391', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op400.met_dependencies = []
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf400.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (61440, 256)
op400.sizes = ([80, 768], [256])
buf391_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf400_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op400_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf400', get_index_1, reduction)
        return None


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 768})]
op401.unmet_dependencies = [MemoryDep('buf400', c0 + 768*c1, {c0: 768, c1: 80})]
op401.met_dependencies = []
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf401.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (768, 80)
op401.sizes = ([768], [80])
buf400_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf401_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op401_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf401', get_index_1, reduction)
        return None


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 15728640})]
op402.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 15728640}),
        MemoryDep('buf379', c0, {c0: 20480}),
        MemoryDep('buf380', c0, {c0: 20480}),
        MemoryDep('buf391', c0, {c0: 15728640}),
        MemoryDep('buf396', c0, {c0: 20480}),
        MemoryDep('buf397', c0, {c0: 20480})]
op402.met_dependencies = 
    [   MemoryDep('add_55', c0, {c0: 15728640}),
        MemoryDep('primals_83', c1, {c0: 20480, c1: 768})]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf402.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=True, is_weak=False),
    ]
]
op402.group.device = cuda:0
op402.group.iteration = (15728640, 1)
op402.sizes = ([20480, 768], [])
buf374_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf380_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf391_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_83_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf396_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_55_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf379_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf397_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op402_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf380', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf391', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_83', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf396', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_55', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf379', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf380', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf397', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf402', get_index_9, add_2, None)
        return store


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 15728640})]
op403.unmet_dependencies = [   MemoryDep('buf402', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf403.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
    ]
]
op403.group.device = cuda:0
op403.group.iteration = (15728640, 1)
op403.sizes = ([20480, 768], [])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf403_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op403_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf403', get_index_1, to_dtype, None)
        return store


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 589824})]
op404.unmet_dependencies = []
op404.met_dependencies = [MemoryDep('primals_81', c0, {c0: 589824})]
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf404.users = [NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (589824, 1)
op404.sizes = ([589824], [])
primals_81_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf404_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op404_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_81', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf404', get_index_1, to_dtype, None)
        return store


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf403', mode=None), StarDep(name='buf404', mode=None)]
op405.met_dependencies = []
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op405.node.kernel = extern_kernels.mm


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 20480})]
op406.unmet_dependencies = []
op406.met_dependencies = [MemoryDep('add_51', c0, {c0: 15728640})]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (20480, 768)
op406.sizes = ([20480], [768])
add_51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op406_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_51', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf406', get_index_1, getitem)
        return store_reduction


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 20480})]
op407.unmet_dependencies = []
op407.met_dependencies = [MemoryDep('add_51', c0, {c0: 15728640})]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf407.users = [
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
    ]
]
op407.group.device = cuda:0
op407.group.iteration = (20480, 768)
op407.sizes = ([20480], [768])
add_51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op407_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_51', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf407', get_index_1, getitem_1)
        return store_reduction


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 1769472})]
op409.unmet_dependencies = []
op409.met_dependencies = [MemoryDep('primals_80', c0, {c0: 1769472})]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf409.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False),
    ]
]
op409.group.device = cuda:0
op409.group.iteration = (1769472, 1)
op409.sizes = ([1769472], [])
primals_80_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf409_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op409_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_80', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf409', get_index_1, to_dtype, None)
        return store


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op410.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 20480}), MemoryDep('buf407', c0, {c0: 20480})]
op410.met_dependencies = 
    [   MemoryDep('add_51', c0, {c0: 15728640}),
        MemoryDep('primals_77', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_78', c1, {c0: 20480, c1: 768})]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf410.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
    ]
]
op410.group.device = cuda:0
op410.group.iteration = (15728640, 1)
op410.sizes = ([20, 1024, 768], [])
add_51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_77_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_78_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf410_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op410_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf406', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf407', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_77', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_78', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf410', get_index_5, to_dtype, None)
        return store


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf409', mode=None), StarDep(name='buf410', mode=None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.node.kernel = extern_kernels.mm


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 47185920})]
op412.unmet_dependencies = [MemoryDep('buf411', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op412.met_dependencies = [MemoryDep('primals_79', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf412.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
    ]
]
op412.group.device = cuda:0
op412.group.iteration = (47185920, 1)
op412.sizes = ([3, 20480, 768], [])
buf411_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_79_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op412_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_79', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf412', get_index_2, add, None)
        return store


op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 15728640})]
op413.unmet_dependencies = [   MemoryDep('buf412', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (15728640, 1)
op413.sizes = ([1024, 20, 768], [])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf413_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op413_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf413', get_index_1, load, None)
        return store


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 15728640})]
op414.unmet_dependencies = [   MemoryDep('buf412', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (15728640, 1)
op414.sizes = ([1024, 20, 768], [])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf414_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op414_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf414', get_index_1, load, None)
        return store


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 15728640})]
op415.unmet_dependencies = [   MemoryDep('buf412', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op415.met_dependencies = []
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (15728640, 1)
op415.sizes = ([1024, 20, 768], [])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf415_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op415_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf415', get_index_1, load, None)
        return store


op416: ExternKernelSchedulerNode(FallbackKernel)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = 
    [   StarDep(name='buf413', mode=None),
        StarDep(name='buf414', mode=None),
        StarDep(name='buf415', mode=None)]
op416.met_dependencies = [StarDep(name='bwd_rng_state_6', mode=None)]
op416.outputs = [
    buf416: FallbackKernel
    buf416.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf416.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False),
    ]
]
op416.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op417: ExternKernelSchedulerNode(MultiOutput)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: MultiOutput
    buf417.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False),
    ]
]
op417.node.kernel = None


op418: ExternKernelSchedulerNode(MultiOutput)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: MultiOutput
    buf418.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op418.node.kernel = None


op419: ExternKernelSchedulerNode(MultiOutput)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: MultiOutput
    buf419.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op419.node.kernel = None


op420: ExternKernelSchedulerNode(MultiOutput)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: MultiOutput
    buf420.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf420.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op420.node.kernel = None


op422: ExternKernelSchedulerNode(ExternKernelOut)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf403', mode=None), StarDep(name='buf417', mode=None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ExternKernelOut
    buf422.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf422.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False)]
]
op422.node.kernel = extern_kernels.mm


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 61440})]
op423.unmet_dependencies = [MemoryDep('buf403', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf423.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (61440, 256)
op423.sizes = ([80, 768], [256])
buf403_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf423_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op423_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf423', get_index_1, reduction)
        return None


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 768})]
op424.unmet_dependencies = [MemoryDep('buf423', c0 + 768*c1, {c0: 768, c1: 80})]
op424.met_dependencies = []
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf424.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (768, 80)
op424.sizes = ([768], [80])
buf423_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf424_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op424_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf423', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf424', get_index_1, reduction)
        return None


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 589824})]
op425.unmet_dependencies = [MemoryDep('buf422', c0, {c0: 589824})]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf425.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (589824, 1)
op425.sizes = ([589824], [])
buf422_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf425_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op425_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf425', get_index_1, to_dtype, None)
        return store


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 15728640})]
op426.unmet_dependencies = [   MemoryDep('buf412', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (15728640, 1)
op426.sizes = ([1024, 20, 768], [])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf426_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op426_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf426', get_index_1, load, None)
        return store


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 15728640})]
op427.unmet_dependencies = [   MemoryDep('buf412', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op427.met_dependencies = []
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (15728640, 1)
op427.sizes = ([1024, 20, 768], [])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf427_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op427_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf427', get_index_1, load, None)
        return store


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 15728640})]
op428.unmet_dependencies = [   MemoryDep('buf412', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op428.met_dependencies = []
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf428.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (15728640, 1)
op428.sizes = ([1024, 20, 768], [])
buf412_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf428_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op428_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf428', get_index_1, load, None)
        return store


op429: ExternKernelSchedulerNode(FallbackKernel)
op429.writes = [StarDep(name='buf429', mode=None)]
op429.unmet_dependencies = 
    [   StarDep(name='buf405', mode=None),
        StarDep(name='buf417', mode=None),
        StarDep(name='buf418', mode=None),
        StarDep(name='buf419', mode=None),
        StarDep(name='buf420', mode=None),
        StarDep(name='buf426', mode=None),
        StarDep(name='buf427', mode=None),
        StarDep(name='buf428', mode=None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: FallbackKernel
    buf429.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf429.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op429.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op430: ExternKernelSchedulerNode(MultiOutput)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: MultiOutput
    buf430.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op430.node.kernel = None


op431: ExternKernelSchedulerNode(MultiOutput)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: MultiOutput
    buf431.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op431.node.kernel = None


op432: ExternKernelSchedulerNode(MultiOutput)
op432.writes = [StarDep(name='buf432', mode=None)]
op432.unmet_dependencies = [StarDep(name='buf429', mode=None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: MultiOutput
    buf432.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op432.node.kernel = None


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 73728})]
op433.unmet_dependencies = 
    [   MemoryDep('buf430', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf431', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf432', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (73728, 640)
op433.sizes = ([32, 2304], [640])
buf432_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf431_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf430_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf433_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op433_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf432', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf431', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf430', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf433', get_index_6, reduction)
        return None


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 2304})]
op434.unmet_dependencies = [MemoryDep('buf433', c0 + 2304*c1, {c0: 2304, c1: 32})]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf434.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (2304, 32)
op434.sizes = ([2304], [32])
buf433_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf434_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op434_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf434', get_index_1, reduction)
        return None


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 47185920})]
op435.unmet_dependencies = 
    [   MemoryDep('buf430', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf431', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf432', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf435.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False),
    ]
]
op435.group.device = cuda:0
op435.group.iteration = (47185920, 1)
op435.sizes = ([1024, 20, 3, 768], [])
buf432_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf431_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf430_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf435_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op435_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf432', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf431', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf430', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf435', get_index_6, add_1, None)
        return store


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf410', mode=None), StarDep(name='buf435', mode=None)]
op436.met_dependencies = []
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf436.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
]
op436.node.kernel = extern_kernels.mm


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf409', mode=None), StarDep(name='buf435', mode=None)]
op437.met_dependencies = []
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf437.users = [
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
    ]
]
op437.node.kernel = extern_kernels.mm


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 1769472})]
op438.unmet_dependencies = [MemoryDep('buf436', c0, {c0: 1769472})]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf438.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (1769472, 1)
op438.sizes = ([1769472], [])
buf436_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf438_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op438_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf438', get_index_1, to_dtype, None)
        return store


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 20480})]
op439.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 15728640})]
op439.met_dependencies = [MemoryDep('primals_77', c1, {c0: 20480, c1: 768})]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf439.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (20480, 768)
op439.sizes = ([20480], [768])
buf437_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_77_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op439_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_77', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf439', get_index_2, reduction)
        return None


op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 20480})]
op440.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 20480}),
        MemoryDep('buf407', c0, {c0: 20480}),
        MemoryDep('buf437', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op440.met_dependencies = 
    [   MemoryDep('add_51', c0, {c0: 15728640}),
        MemoryDep('primals_77', c1, {c0: 20480, c1: 768})]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf440.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (20480, 768)
op440.sizes = ([20, 1024], [768])
buf437_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_77_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf440_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op440_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_77', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_51', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf406', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf407', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf440', get_index_5, reduction)
        return None


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 61440})]
op441.unmet_dependencies = 
    [   MemoryDep('buf406', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf407', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf437', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op441.met_dependencies = [MemoryDep('add_51', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf441.users = [NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (61440, 256)
op441.sizes = ([80, 768], [256])
buf437_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf441_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op441_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_51', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf406', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf407', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf441', get_index_4, reduction)
        return None


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 768})]
op442.unmet_dependencies = [MemoryDep('buf441', c0 + 768*c1, {c0: 768, c1: 80})]
op442.met_dependencies = []
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf442.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (768, 80)
op442.sizes = ([768], [80])
buf441_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf442_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op442_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf442', get_index_1, reduction)
        return None


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 61440})]
op443.unmet_dependencies = [   MemoryDep('buf437', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op443.met_dependencies = []
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (61440, 256)
op443.sizes = ([80, 768], [256])
buf437_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf443_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op443_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf443', get_index_1, reduction)
        return None


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 768})]
op444.unmet_dependencies = [MemoryDep('buf443', c0 + 768*c1, {c0: 768, c1: 80})]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf444.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (768, 80)
op444.sizes = ([768], [80])
buf443_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf444_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op444_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf444', get_index_1, reduction)
        return None


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 15728640})]
op445.unmet_dependencies = 
    [   MemoryDep('buf402', c0, {c0: 15728640}),
        MemoryDep('buf406', c0, {c0: 20480}),
        MemoryDep('buf407', c0, {c0: 20480}),
        MemoryDep('buf437', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf439', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf440', c0, {c0: 20480})]
op445.met_dependencies = 
    [   MemoryDep('add_51', c0, {c0: 15728640}),
        MemoryDep('primals_77', c1, {c0: 20480, c1: 768})]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False),
    ]
]
op445.group.device = cuda:0
op445.group.iteration = (15728640, 1)
op445.sizes = ([20, 1024, 768], [])
buf402_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf407_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf437_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_77_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf439_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_51_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf406_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf440_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf445_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op445_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf407', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf437', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_77', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf439', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_51', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf406', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf407', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf440', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf445', get_index_9, add_2, None)
        return store


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 15728640})]
op446.unmet_dependencies = []
op446.met_dependencies = [MemoryDep('inductor_seeds_default', 5, {})]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (15728640, 1)
op446.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf446_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op446_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 5
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 5)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf446', get_index_1, rand, None)
        return store


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 15728640})]
op447.unmet_dependencies = 
    [   MemoryDep('buf445', c0, {c0: 15728640}),
        MemoryDep('buf446', c0, {c0: 15728640})]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
    ]
]
op447.group.device = cuda:0
op447.group.iteration = (15728640, 1)
op447.sizes = ([15728640], [])
buf445_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf446_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf447_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op447_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf446', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf447', get_index_2, mul_1, None)
        return store


op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 1179648})]
op448.unmet_dependencies = []
op448.met_dependencies = [MemoryDep('primals_75', c0, {c0: 1179648})]
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf448.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (1179648, 1)
op448.sizes = ([1179648], [])
primals_75_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf448_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op448_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_75', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf448', get_index_1, to_dtype, None)
        return store


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf447', mode=None), StarDep(name='buf448', mode=None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False)]
]
op449.node.kernel = extern_kernels.mm


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 20480})]
op450.unmet_dependencies = []
op450.met_dependencies = [MemoryDep('add_47', c0, {c0: 15728640})]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf450.users = [
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
    ]
]
op450.group.device = cuda:0
op450.group.iteration = (20480, 768)
op450.sizes = ([20480], [768])
add_47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op450_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf450', get_index_1, getitem)
        return store_reduction


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 20480})]
op451.unmet_dependencies = []
op451.met_dependencies = [MemoryDep('add_47', c0, {c0: 15728640})]
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
    ]
]
op451.group.device = cuda:0
op451.group.iteration = (20480, 768)
op451.sizes = ([20480], [768])
add_47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op451_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_47', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf451', get_index_1, getitem_1)
        return store_reduction


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 15728640})]
op453.unmet_dependencies = [MemoryDep('buf450', c0, {c0: 20480}), MemoryDep('buf451', c0, {c0: 20480})]
op453.met_dependencies = 
    [   MemoryDep('add_47', c0, {c0: 15728640}),
        MemoryDep('primals_71', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_72', c1, {c0: 20480, c1: 768})]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf453.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (15728640, 1)
op453.sizes = ([20480, 768], [])
add_47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_72_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf453_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op453_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf450', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf451', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_71', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_72', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf453', get_index_5, to_dtype, None)
        return store


op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 1179648})]
op454.unmet_dependencies = []
op454.met_dependencies = [MemoryDep('primals_73', c0, {c0: 1179648})]
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf454.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (1179648, 1)
op454.sizes = ([1179648], [])
primals_73_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf454_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op454_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_73', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf454', get_index_1, to_dtype, None)
        return store


op455: ExternKernelSchedulerNode(ExternKernelOut)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf453', mode=None), StarDep(name='buf454', mode=None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ExternKernelOut
    buf455.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf455.users = [
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False),
    ]
]
op455.node.kernel = extern_kernels.mm


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 31457280})]
op456.unmet_dependencies = [MemoryDep('buf455', c0, {c0: 31457280})]
op456.met_dependencies = [MemoryDep('primals_74', c1, {c0: 20480, c1: 1536})]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf456.users = [NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (31457280, 1)
op456.sizes = ([20480, 1536], [])
buf455_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf456_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op456_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_74', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf455', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_74', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf456', get_index_4, to_dtype_4, None)
        return store


op457: ExternKernelSchedulerNode(ExternKernelOut)
op457.writes = [StarDep(name='buf457', mode=None)]
op457.unmet_dependencies = [StarDep(name='buf447', mode=None), StarDep(name='buf456', mode=None)]
op457.met_dependencies = []
op457.outputs = [
    buf457: ExternKernelOut
    buf457.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf457.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False)]
]
op457.node.kernel = extern_kernels.mm


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 61440})]
op458.unmet_dependencies = [MemoryDep('buf447', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op458.met_dependencies = []
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf458.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (61440, 256)
op458.sizes = ([80, 768], [256])
buf447_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf458_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op458_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf458', get_index_1, reduction)
        return None


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 768})]
op459.unmet_dependencies = [MemoryDep('buf458', c0 + 768*c1, {c0: 768, c1: 80})]
op459.met_dependencies = []
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf459.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (768, 80)
op459.sizes = ([768], [80])
buf458_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf459_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op459_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf459', get_index_1, reduction)
        return None


op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 1179648})]
op460.unmet_dependencies = [MemoryDep('buf457', c0, {c0: 1179648})]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf460.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (1179648, 1)
op460.sizes = ([1179648], [])
buf457_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf460_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op460_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf457', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf460', get_index_1, to_dtype, None)
        return store


op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 31457280})]
op461.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 31457280}),
        MemoryDep('buf455', c0, {c0: 31457280})]
op461.met_dependencies = [MemoryDep('primals_74', c1, {c0: 20480, c1: 1536})]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf461.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
    ]
]
op461.group.device = cuda:0
op461.group.iteration = (31457280, 1)
op461.sizes = ([20480, 1536], [])
buf449_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf455_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_74_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf461_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op461_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf455', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_74', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf455', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_74', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf455', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_74', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf455', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_74', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf461', get_index_9, to_dtype_9, None)
        return store


op462: ExternKernelSchedulerNode(ExternKernelOut)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf454', mode=None), StarDep(name='buf461', mode=None)]
op462.met_dependencies = []
op462.outputs = [
    buf462: ExternKernelOut
    buf462.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False),
    ]
]
op462.node.kernel = extern_kernels.mm


op463: ExternKernelSchedulerNode(ExternKernelOut)
op463.writes = [StarDep(name='buf463', mode=None)]
op463.unmet_dependencies = [StarDep(name='buf453', mode=None), StarDep(name='buf461', mode=None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ExternKernelOut
    buf463.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf463.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False)]
]
op463.node.kernel = extern_kernels.mm


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 61440})]
op464.unmet_dependencies = [MemoryDep('buf461', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op464.met_dependencies = []
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf464.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (61440, 512)
op464.sizes = ([40, 1536], [512])
buf461_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf464_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op464_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf464', get_index_1, reduction)
        return None


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 1536})]
op465.unmet_dependencies = [MemoryDep('buf464', c0 + 1536*c1, {c0: 1536, c1: 40})]
op465.met_dependencies = []
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf465.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (1536, 40)
op465.sizes = ([1536], [40])
buf464_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf465_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op465_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf465', get_index_1, reduction)
        return None


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 1179648})]
op466.unmet_dependencies = [MemoryDep('buf463', c0, {c0: 1179648})]
op466.met_dependencies = []
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf466.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (1179648, 1)
op466.sizes = ([1179648], [])
buf463_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf466_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op466_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf466', get_index_1, to_dtype, None)
        return store


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 20480})]
op467.unmet_dependencies = [MemoryDep('buf462', c0, {c0: 15728640})]
op467.met_dependencies = [MemoryDep('primals_71', c1, {c0: 20480, c1: 768})]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf467.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (20480, 768)
op467.sizes = ([20480], [768])
buf462_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf467_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op467_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf467', get_index_2, reduction)
        return None


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 20480})]
op468.unmet_dependencies = 
    [   MemoryDep('buf450', c0, {c0: 20480}),
        MemoryDep('buf451', c0, {c0: 20480}),
        MemoryDep('buf462', c0, {c0: 15728640})]
op468.met_dependencies = 
    [   MemoryDep('add_47', c0, {c0: 15728640}),
        MemoryDep('primals_71', c1, {c0: 20480, c1: 768})]
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf468.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (20480, 768)
op468.sizes = ([20480], [768])
buf462_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf468_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op468_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_71', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_47', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf450', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf451', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf468', get_index_5, reduction)
        return None


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 61440})]
op469.unmet_dependencies = 
    [   MemoryDep('buf450', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf451', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf462', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op469.met_dependencies = [MemoryDep('add_47', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf469.users = [NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (61440, 256)
op469.sizes = ([80, 768], [256])
buf462_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf469_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op469_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_47', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf450', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf451', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf469', get_index_4, reduction)
        return None


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 768})]
op470.unmet_dependencies = [MemoryDep('buf469', c0 + 768*c1, {c0: 768, c1: 80})]
op470.met_dependencies = []
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf470.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (768, 80)
op470.sizes = ([768], [80])
buf469_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf470_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op470_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf470', get_index_1, reduction)
        return None


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 61440})]
op471.unmet_dependencies = [MemoryDep('buf462', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op471.met_dependencies = []
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf471.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (61440, 256)
op471.sizes = ([80, 768], [256])
buf462_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf471_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op471_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf471', get_index_1, reduction)
        return None


op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 768})]
op472.unmet_dependencies = [MemoryDep('buf471', c0 + 768*c1, {c0: 768, c1: 80})]
op472.met_dependencies = []
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf472.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (768, 80)
op472.sizes = ([768], [80])
buf471_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf472_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op472_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf472', get_index_1, reduction)
        return None


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 15728640})]
op473.unmet_dependencies = 
    [   MemoryDep('buf445', c0, {c0: 15728640}),
        MemoryDep('buf450', c0, {c0: 20480}),
        MemoryDep('buf451', c0, {c0: 20480}),
        MemoryDep('buf462', c0, {c0: 15728640}),
        MemoryDep('buf467', c0, {c0: 20480}),
        MemoryDep('buf468', c0, {c0: 20480})]
op473.met_dependencies = 
    [   MemoryDep('add_47', c0, {c0: 15728640}),
        MemoryDep('primals_71', c1, {c0: 20480, c1: 768})]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (15728640, 1)
op473.sizes = ([20480, 768], [])
buf445_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf451_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf462_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_71_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf467_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_47_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf450_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf468_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf473_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op473_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf451', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf462', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_71', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf467', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_47', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf450', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf451', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf468', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf473', get_index_9, add_2, None)
        return store


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 15728640})]
op474.unmet_dependencies = [   MemoryDep('buf473', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op474.met_dependencies = []
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf474.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
    ]
]
op474.group.device = cuda:0
op474.group.iteration = (15728640, 1)
op474.sizes = ([20480, 768], [])
buf473_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf474_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op474_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf474', get_index_1, to_dtype, None)
        return store


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 589824})]
op475.unmet_dependencies = []
op475.met_dependencies = [MemoryDep('primals_69', c0, {c0: 589824})]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (589824, 1)
op475.sizes = ([589824], [])
primals_69_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf475_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op475_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_69', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf475', get_index_1, to_dtype, None)
        return store


op476: ExternKernelSchedulerNode(ExternKernelOut)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf474', mode=None), StarDep(name='buf475', mode=None)]
op476.met_dependencies = []
op476.outputs = [
    buf476: ExternKernelOut
    buf476.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf476.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op476.node.kernel = extern_kernels.mm


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 20480})]
op477.unmet_dependencies = []
op477.met_dependencies = [MemoryDep('add_43', c0, {c0: 15728640})]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf477.users = [
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
    ]
]
op477.group.device = cuda:0
op477.group.iteration = (20480, 768)
op477.sizes = ([20480], [768])
add_43_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op477_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_43', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf477', get_index_1, getitem)
        return store_reduction


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 20480})]
op478.unmet_dependencies = []
op478.met_dependencies = [MemoryDep('add_43', c0, {c0: 15728640})]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf478.users = [
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
    ]
]
op478.group.device = cuda:0
op478.group.iteration = (20480, 768)
op478.sizes = ([20480], [768])
add_43_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf478_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op478_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_43', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf478', get_index_1, getitem_1)
        return store_reduction


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 1769472})]
op480.unmet_dependencies = []
op480.met_dependencies = [MemoryDep('primals_68', c0, {c0: 1769472})]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf480.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
    ]
]
op480.group.device = cuda:0
op480.group.iteration = (1769472, 1)
op480.sizes = ([1769472], [])
primals_68_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf480_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op480_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_68', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf480', get_index_1, to_dtype, None)
        return store


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op481.unmet_dependencies = [MemoryDep('buf477', c0, {c0: 20480}), MemoryDep('buf478', c0, {c0: 20480})]
op481.met_dependencies = 
    [   MemoryDep('add_43', c0, {c0: 15728640}),
        MemoryDep('primals_65', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_66', c1, {c0: 20480, c1: 768})]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf481.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
    ]
]
op481.group.device = cuda:0
op481.group.iteration = (15728640, 1)
op481.sizes = ([20, 1024, 768], [])
add_43_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf478_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_65_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_66_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf481_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op481_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf477', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf478', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_65', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_66', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf481', get_index_5, to_dtype, None)
        return store


op482: ExternKernelSchedulerNode(ExternKernelOut)
op482.writes = [StarDep(name='buf482', mode=None)]
op482.unmet_dependencies = [StarDep(name='buf480', mode=None), StarDep(name='buf481', mode=None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ExternKernelOut
    buf482.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf482.users = [NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.node.kernel = extern_kernels.mm


op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 47185920})]
op483.unmet_dependencies = [MemoryDep('buf482', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op483.met_dependencies = [MemoryDep('primals_67', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (47185920, 1)
op483.sizes = ([3, 20480, 768], [])
buf482_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_67_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op483_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_67', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf483', get_index_2, add, None)
        return store


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 15728640})]
op484.unmet_dependencies = [   MemoryDep('buf483', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf484.users = [NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (15728640, 1)
op484.sizes = ([1024, 20, 768], [])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf484_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op484_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf484', get_index_1, load, None)
        return store


op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 15728640})]
op485.unmet_dependencies = [   MemoryDep('buf483', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf485.users = [NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (15728640, 1)
op485.sizes = ([1024, 20, 768], [])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf485_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op485_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf485', get_index_1, load, None)
        return store


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 15728640})]
op486.unmet_dependencies = [   MemoryDep('buf483', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (15728640, 1)
op486.sizes = ([1024, 20, 768], [])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf486_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op486_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf486', get_index_1, load, None)
        return store


op487: ExternKernelSchedulerNode(FallbackKernel)
op487.writes = [StarDep(name='buf487', mode=None)]
op487.unmet_dependencies = 
    [   StarDep(name='buf484', mode=None),
        StarDep(name='buf485', mode=None),
        StarDep(name='buf486', mode=None)]
op487.met_dependencies = [StarDep(name='bwd_rng_state_5', mode=None)]
op487.outputs = [
    buf487: FallbackKernel
    buf487.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf487.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False),
    ]
]
op487.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op488: ExternKernelSchedulerNode(MultiOutput)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf487', mode=None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: MultiOutput
    buf488.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf488.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False),
    ]
]
op488.node.kernel = None


op489: ExternKernelSchedulerNode(MultiOutput)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf487', mode=None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: MultiOutput
    buf489.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op489.node.kernel = None


op490: ExternKernelSchedulerNode(MultiOutput)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf487', mode=None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: MultiOutput
    buf490.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op490.node.kernel = None


op491: ExternKernelSchedulerNode(MultiOutput)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf487', mode=None)]
op491.met_dependencies = []
op491.outputs = [
    buf491: MultiOutput
    buf491.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf491.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op491.node.kernel = None


op493: ExternKernelSchedulerNode(ExternKernelOut)
op493.writes = [StarDep(name='buf493', mode=None)]
op493.unmet_dependencies = [StarDep(name='buf474', mode=None), StarDep(name='buf488', mode=None)]
op493.met_dependencies = []
op493.outputs = [
    buf493: ExternKernelOut
    buf493.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf493.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False)]
]
op493.node.kernel = extern_kernels.mm


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 61440})]
op494.unmet_dependencies = [MemoryDep('buf474', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op494.met_dependencies = []
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf494.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (61440, 256)
op494.sizes = ([80, 768], [256])
buf474_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf494_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op494_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf494', get_index_1, reduction)
        return None


op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 768})]
op495.unmet_dependencies = [MemoryDep('buf494', c0 + 768*c1, {c0: 768, c1: 80})]
op495.met_dependencies = []
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf495.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (768, 80)
op495.sizes = ([768], [80])
buf494_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf495_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op495_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf494', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf495', get_index_1, reduction)
        return None


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 589824})]
op496.unmet_dependencies = [MemoryDep('buf493', c0, {c0: 589824})]
op496.met_dependencies = []
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf496.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (589824, 1)
op496.sizes = ([589824], [])
buf493_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf496_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op496_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf496', get_index_1, to_dtype, None)
        return store


op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 15728640})]
op497.unmet_dependencies = [   MemoryDep('buf483', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op497.met_dependencies = []
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf497.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (15728640, 1)
op497.sizes = ([1024, 20, 768], [])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf497_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op497_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf497', get_index_1, load, None)
        return store


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 15728640})]
op498.unmet_dependencies = [   MemoryDep('buf483', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op498.met_dependencies = []
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf498.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (15728640, 1)
op498.sizes = ([1024, 20, 768], [])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf498_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op498_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf498', get_index_1, load, None)
        return store


op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 15728640})]
op499.unmet_dependencies = [   MemoryDep('buf483', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op499.met_dependencies = []
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf499.users = [NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (15728640, 1)
op499.sizes = ([1024, 20, 768], [])
buf483_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf499_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op499_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf499', get_index_1, load, None)
        return store


op500: ExternKernelSchedulerNode(FallbackKernel)
op500.writes = [StarDep(name='buf500', mode=None)]
op500.unmet_dependencies = 
    [   StarDep(name='buf476', mode=None),
        StarDep(name='buf488', mode=None),
        StarDep(name='buf489', mode=None),
        StarDep(name='buf490', mode=None),
        StarDep(name='buf491', mode=None),
        StarDep(name='buf497', mode=None),
        StarDep(name='buf498', mode=None),
        StarDep(name='buf499', mode=None)]
op500.met_dependencies = []
op500.outputs = [
    buf500: FallbackKernel
    buf500.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf500.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
    ]
]
op500.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op501: ExternKernelSchedulerNode(MultiOutput)
op501.writes = [StarDep(name='buf501', mode=None)]
op501.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op501.met_dependencies = []
op501.outputs = [
    buf501: MultiOutput
    buf501.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf501.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op501.node.kernel = None


op502: ExternKernelSchedulerNode(MultiOutput)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: MultiOutput
    buf502.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf502.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op502.node.kernel = None


op503: ExternKernelSchedulerNode(MultiOutput)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: MultiOutput
    buf503.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op503.node.kernel = None


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 73728})]
op504.unmet_dependencies = 
    [   MemoryDep('buf501', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf502', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf503', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op504.met_dependencies = []
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf504.users = [NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (73728, 640)
op504.sizes = ([32, 2304], [640])
buf503_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf502_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf501_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf504_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op504_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf503', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf502', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf501', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf504', get_index_6, reduction)
        return None


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 2304})]
op505.unmet_dependencies = [MemoryDep('buf504', c0 + 2304*c1, {c0: 2304, c1: 32})]
op505.met_dependencies = []
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf505.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (2304, 32)
op505.sizes = ([2304], [32])
buf504_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf505_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op505_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf505', get_index_1, reduction)
        return None


op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 47185920})]
op506.unmet_dependencies = 
    [   MemoryDep('buf501', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf502', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf503', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op506.met_dependencies = []
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (47185920, 1)
op506.sizes = ([1024, 20, 3, 768], [])
buf503_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf502_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf501_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf506_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op506_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf503', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf502', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf501', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf506', get_index_6, add_1, None)
        return store


op507: ExternKernelSchedulerNode(ExternKernelOut)
op507.writes = [StarDep(name='buf507', mode=None)]
op507.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf506', mode=None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ExternKernelOut
    buf507.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf507.users = [NodeUser(node=SchedulerNode(name='op509'), can_inplace=True, is_weak=False)]
]
op507.node.kernel = extern_kernels.mm


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf480', mode=None), StarDep(name='buf506', mode=None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf508.users = [
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
    ]
]
op508.node.kernel = extern_kernels.mm


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 1769472})]
op509.unmet_dependencies = [MemoryDep('buf507', c0, {c0: 1769472})]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf509.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (1769472, 1)
op509.sizes = ([1769472], [])
buf507_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf509_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op509_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf509', get_index_1, to_dtype, None)
        return store


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 20480})]
op510.unmet_dependencies = [MemoryDep('buf508', c0, {c0: 15728640})]
op510.met_dependencies = [MemoryDep('primals_65', c1, {c0: 20480, c1: 768})]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf510.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (20480, 768)
op510.sizes = ([20480], [768])
buf508_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_65_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf510_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op510_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_65', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf510', get_index_2, reduction)
        return None


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 20480})]
op511.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 20480}),
        MemoryDep('buf478', c0, {c0: 20480}),
        MemoryDep('buf508', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op511.met_dependencies = 
    [   MemoryDep('add_43', c0, {c0: 15728640}),
        MemoryDep('primals_65', c1, {c0: 20480, c1: 768})]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf511.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (20480, 768)
op511.sizes = ([20, 1024], [768])
buf508_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_65_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_43_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf478_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf511_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op511_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_65', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_43', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf477', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf478', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf511', get_index_5, reduction)
        return None


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 61440})]
op512.unmet_dependencies = 
    [   MemoryDep('buf477', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf478', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf508', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op512.met_dependencies = [MemoryDep('add_43', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf512.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (61440, 256)
op512.sizes = ([80, 768], [256])
buf508_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_43_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf478_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf512_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op512_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_43', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf477', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf478', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf512', get_index_4, reduction)
        return None


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 768})]
op513.unmet_dependencies = [MemoryDep('buf512', c0 + 768*c1, {c0: 768, c1: 80})]
op513.met_dependencies = []
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf513.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (768, 80)
op513.sizes = ([768], [80])
buf512_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf513_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op513_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf513', get_index_1, reduction)
        return None


op514: SchedulerNode(ComputedBuffer)
op514.writes = [MemoryDep('buf514', c0, {c0: 61440})]
op514.unmet_dependencies = [   MemoryDep('buf508', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op514.met_dependencies = []
op514.outputs = [
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf514.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.group.device = cuda:0
op514.group.iteration = (61440, 256)
op514.sizes = ([80, 768], [256])
buf508_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf514_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op514_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf514', get_index_1, reduction)
        return None


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 768})]
op515.unmet_dependencies = [MemoryDep('buf514', c0 + 768*c1, {c0: 768, c1: 80})]
op515.met_dependencies = []
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf515.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op515.group.device = cuda:0
op515.group.iteration = (768, 80)
op515.sizes = ([768], [80])
buf514_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf515_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op515_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf515', get_index_1, reduction)
        return None


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 15728640})]
op516.unmet_dependencies = 
    [   MemoryDep('buf473', c0, {c0: 15728640}),
        MemoryDep('buf477', c0, {c0: 20480}),
        MemoryDep('buf478', c0, {c0: 20480}),
        MemoryDep('buf508', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf510', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf511', c0, {c0: 20480})]
op516.met_dependencies = 
    [   MemoryDep('add_43', c0, {c0: 15728640}),
        MemoryDep('primals_65', c1, {c0: 20480, c1: 768})]
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf516.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
    ]
]
op516.group.device = cuda:0
op516.group.iteration = (15728640, 1)
op516.sizes = ([20, 1024, 768], [])
buf473_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf478_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf508_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_65_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf510_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_43_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf477_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf511_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf516_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op516_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf478', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf508', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_65', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf510', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_43', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf477', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf478', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf511', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf516', get_index_9, add_2, None)
        return store


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 15728640})]
op517.unmet_dependencies = []
op517.met_dependencies = [MemoryDep('inductor_seeds_default', 4, {})]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf517.users = [NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (15728640, 1)
op517.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf517_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op517_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 4
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 4)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf517', get_index_1, rand, None)
        return store


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 15728640})]
op518.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 15728640}),
        MemoryDep('buf517', c0, {c0: 15728640})]
op518.met_dependencies = []
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf518.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
    ]
]
op518.group.device = cuda:0
op518.group.iteration = (15728640, 1)
op518.sizes = ([15728640], [])
buf516_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf517_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf518_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op518_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf517', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf518', get_index_2, mul_1, None)
        return store


op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 1179648})]
op519.unmet_dependencies = []
op519.met_dependencies = [MemoryDep('primals_63', c0, {c0: 1179648})]
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf519.users = [NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (1179648, 1)
op519.sizes = ([1179648], [])
primals_63_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf519_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op519_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_63', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf519', get_index_1, to_dtype, None)
        return store


op520: ExternKernelSchedulerNode(ExternKernelOut)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = [StarDep(name='buf518', mode=None), StarDep(name='buf519', mode=None)]
op520.met_dependencies = []
op520.outputs = [
    buf520: ExternKernelOut
    buf520.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf520.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=True, is_weak=False)]
]
op520.node.kernel = extern_kernels.mm


op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 20480})]
op521.unmet_dependencies = []
op521.met_dependencies = [MemoryDep('add_39', c0, {c0: 15728640})]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf521.users = [
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
    ]
]
op521.group.device = cuda:0
op521.group.iteration = (20480, 768)
op521.sizes = ([20480], [768])
add_39_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf521_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op521_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_39', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf521', get_index_1, getitem)
        return store_reduction


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 20480})]
op522.unmet_dependencies = []
op522.met_dependencies = [MemoryDep('add_39', c0, {c0: 15728640})]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf522.users = [
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
    ]
]
op522.group.device = cuda:0
op522.group.iteration = (20480, 768)
op522.sizes = ([20480], [768])
add_39_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf522_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op522_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_39', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf522', get_index_1, getitem_1)
        return store_reduction


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 15728640})]
op524.unmet_dependencies = [MemoryDep('buf521', c0, {c0: 20480}), MemoryDep('buf522', c0, {c0: 20480})]
op524.met_dependencies = 
    [   MemoryDep('add_39', c0, {c0: 15728640}),
        MemoryDep('primals_59', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_60', c1, {c0: 20480, c1: 768})]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf524.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False),
    ]
]
op524.group.device = cuda:0
op524.group.iteration = (15728640, 1)
op524.sizes = ([20480, 768], [])
add_39_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf521_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf522_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_60_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf524_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op524_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf521', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf522', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_59', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_60', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf524', get_index_5, to_dtype, None)
        return store


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 1179648})]
op525.unmet_dependencies = []
op525.met_dependencies = [MemoryDep('primals_61', c0, {c0: 1179648})]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf525.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
    ]
]
op525.group.device = cuda:0
op525.group.iteration = (1179648, 1)
op525.sizes = ([1179648], [])
primals_61_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf525_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op525_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_61', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf525', get_index_1, to_dtype, None)
        return store


op526: ExternKernelSchedulerNode(ExternKernelOut)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf524', mode=None), StarDep(name='buf525', mode=None)]
op526.met_dependencies = []
op526.outputs = [
    buf526: ExternKernelOut
    buf526.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=True, is_weak=False),
    ]
]
op526.node.kernel = extern_kernels.mm


op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 31457280})]
op527.unmet_dependencies = [MemoryDep('buf526', c0, {c0: 31457280})]
op527.met_dependencies = [MemoryDep('primals_62', c1, {c0: 20480, c1: 1536})]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op527.group.device = cuda:0
op527.group.iteration = (31457280, 1)
op527.sizes = ([20480, 1536], [])
buf526_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf527_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op527_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_62', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf526', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_62', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf527', get_index_4, to_dtype_4, None)
        return store


op528: ExternKernelSchedulerNode(ExternKernelOut)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf518', mode=None), StarDep(name='buf527', mode=None)]
op528.met_dependencies = []
op528.outputs = [
    buf528: ExternKernelOut
    buf528.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf528.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False)]
]
op528.node.kernel = extern_kernels.mm


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 61440})]
op529.unmet_dependencies = [MemoryDep('buf518', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op529.met_dependencies = []
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf529.users = [NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (61440, 256)
op529.sizes = ([80, 768], [256])
buf518_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf529_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op529_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf529', get_index_1, reduction)
        return None


op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', c0, {c0: 768})]
op530.unmet_dependencies = [MemoryDep('buf529', c0 + 768*c1, {c0: 768, c1: 80})]
op530.met_dependencies = []
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf530.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (768, 80)
op530.sizes = ([768], [80])
buf529_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf530_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op530_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf530', get_index_1, reduction)
        return None


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 1179648})]
op531.unmet_dependencies = [MemoryDep('buf528', c0, {c0: 1179648})]
op531.met_dependencies = []
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf531.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op531.group.device = cuda:0
op531.group.iteration = (1179648, 1)
op531.sizes = ([1179648], [])
buf528_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf531_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op531_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf531', get_index_1, to_dtype, None)
        return store


op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 31457280})]
op532.unmet_dependencies = 
    [   MemoryDep('buf520', c0, {c0: 31457280}),
        MemoryDep('buf526', c0, {c0: 31457280})]
op532.met_dependencies = [MemoryDep('primals_62', c1, {c0: 20480, c1: 1536})]
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf532.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False),
    ]
]
op532.group.device = cuda:0
op532.group.iteration = (31457280, 1)
op532.sizes = ([20480, 1536], [])
buf520_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf526_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_62_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf532_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op532_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf526', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_62', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf526', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_62', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf526', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_62', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf526', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_62', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf532', get_index_9, to_dtype_9, None)
        return store


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf525', mode=None), StarDep(name='buf532', mode=None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf533.users = [
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
    ]
]
op533.node.kernel = extern_kernels.mm


op534: ExternKernelSchedulerNode(ExternKernelOut)
op534.writes = [StarDep(name='buf534', mode=None)]
op534.unmet_dependencies = [StarDep(name='buf524', mode=None), StarDep(name='buf532', mode=None)]
op534.met_dependencies = []
op534.outputs = [
    buf534: ExternKernelOut
    buf534.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf534.users = [NodeUser(node=SchedulerNode(name='op537'), can_inplace=True, is_weak=False)]
]
op534.node.kernel = extern_kernels.mm


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 61440})]
op535.unmet_dependencies = [MemoryDep('buf532', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op535.met_dependencies = []
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf535.users = [NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (61440, 512)
op535.sizes = ([40, 1536], [512])
buf532_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf535_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op535_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf532', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf535', get_index_1, reduction)
        return None


op536: SchedulerNode(ComputedBuffer)
op536.writes = [MemoryDep('buf536', c0, {c0: 1536})]
op536.unmet_dependencies = [MemoryDep('buf535', c0 + 1536*c1, {c0: 1536, c1: 40})]
op536.met_dependencies = []
op536.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf536.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op536.group.device = cuda:0
op536.group.iteration = (1536, 40)
op536.sizes = ([1536], [40])
buf535_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf536_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op536_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf535', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf536', get_index_1, reduction)
        return None


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 1179648})]
op537.unmet_dependencies = [MemoryDep('buf534', c0, {c0: 1179648})]
op537.met_dependencies = []
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf537.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (1179648, 1)
op537.sizes = ([1179648], [])
buf534_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf537_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op537_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf534', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf537', get_index_1, to_dtype, None)
        return store


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 20480})]
op538.unmet_dependencies = [MemoryDep('buf533', c0, {c0: 15728640})]
op538.met_dependencies = [MemoryDep('primals_59', c1, {c0: 20480, c1: 768})]
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf538.users = [NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (20480, 768)
op538.sizes = ([20480], [768])
buf533_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf538_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op538_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_59', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf538', get_index_2, reduction)
        return None


op539: SchedulerNode(ComputedBuffer)
op539.writes = [MemoryDep('buf539', c0, {c0: 20480})]
op539.unmet_dependencies = 
    [   MemoryDep('buf521', c0, {c0: 20480}),
        MemoryDep('buf522', c0, {c0: 20480}),
        MemoryDep('buf533', c0, {c0: 15728640})]
op539.met_dependencies = 
    [   MemoryDep('add_39', c0, {c0: 15728640}),
        MemoryDep('primals_59', c1, {c0: 20480, c1: 768})]
op539.outputs = [
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf539.users = [NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op539.group.device = cuda:0
op539.group.iteration = (20480, 768)
op539.sizes = ([20480], [768])
buf533_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_39_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf521_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf522_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf539_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op539_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_59', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_39', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf521', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf522', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf539', get_index_5, reduction)
        return None


op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 61440})]
op540.unmet_dependencies = 
    [   MemoryDep('buf521', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf522', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf533', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op540.met_dependencies = [MemoryDep('add_39', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf540.users = [NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (61440, 256)
op540.sizes = ([80, 768], [256])
buf533_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_39_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf521_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf522_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf540_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op540_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_39', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf521', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf522', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf540', get_index_4, reduction)
        return None


op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 768})]
op541.unmet_dependencies = [MemoryDep('buf540', c0 + 768*c1, {c0: 768, c1: 80})]
op541.met_dependencies = []
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf541.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op541.group.device = cuda:0
op541.group.iteration = (768, 80)
op541.sizes = ([768], [80])
buf540_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf541_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op541_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf541', get_index_1, reduction)
        return None


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 61440})]
op542.unmet_dependencies = [MemoryDep('buf533', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op542.met_dependencies = []
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf542.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (61440, 256)
op542.sizes = ([80, 768], [256])
buf533_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf542_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op542_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf542', get_index_1, reduction)
        return None


op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 768})]
op543.unmet_dependencies = [MemoryDep('buf542', c0 + 768*c1, {c0: 768, c1: 80})]
op543.met_dependencies = []
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf543.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (768, 80)
op543.sizes = ([768], [80])
buf542_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf543_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op543_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf543', get_index_1, reduction)
        return None


op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 15728640})]
op544.unmet_dependencies = 
    [   MemoryDep('buf516', c0, {c0: 15728640}),
        MemoryDep('buf521', c0, {c0: 20480}),
        MemoryDep('buf522', c0, {c0: 20480}),
        MemoryDep('buf533', c0, {c0: 15728640}),
        MemoryDep('buf538', c0, {c0: 20480}),
        MemoryDep('buf539', c0, {c0: 20480})]
op544.met_dependencies = 
    [   MemoryDep('add_39', c0, {c0: 15728640}),
        MemoryDep('primals_59', c1, {c0: 20480, c1: 768})]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf544.users = [
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=True, is_weak=False),
    ]
]
op544.group.device = cuda:0
op544.group.iteration = (15728640, 1)
op544.sizes = ([20480, 768], [])
buf516_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf522_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf533_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_59_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf538_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_39_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf521_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf539_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf544_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op544_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf522', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf533', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_59', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf538', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_39', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf521', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf522', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf539', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf544', get_index_9, add_2, None)
        return store


op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 15728640})]
op545.unmet_dependencies = [   MemoryDep('buf544', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op545.met_dependencies = []
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf545.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
    ]
]
op545.group.device = cuda:0
op545.group.iteration = (15728640, 1)
op545.sizes = ([20480, 768], [])
buf544_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf545_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op545_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf545', get_index_1, to_dtype, None)
        return store


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 589824})]
op546.unmet_dependencies = []
op546.met_dependencies = [MemoryDep('primals_57', c0, {c0: 589824})]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (589824, 1)
op546.sizes = ([589824], [])
primals_57_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf546_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op546_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_57', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf546', get_index_1, to_dtype, None)
        return store


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf545', mode=None), StarDep(name='buf546', mode=None)]
op547.met_dependencies = []
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf547.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op547.node.kernel = extern_kernels.mm


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 20480})]
op548.unmet_dependencies = []
op548.met_dependencies = [MemoryDep('add_35', c0, {c0: 15728640})]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf548.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
    ]
]
op548.group.device = cuda:0
op548.group.iteration = (20480, 768)
op548.sizes = ([20480], [768])
add_35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf548_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op548_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf548', get_index_1, getitem)
        return store_reduction


op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 20480})]
op549.unmet_dependencies = []
op549.met_dependencies = [MemoryDep('add_35', c0, {c0: 15728640})]
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf549.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
    ]
]
op549.group.device = cuda:0
op549.group.iteration = (20480, 768)
op549.sizes = ([20480], [768])
add_35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf549_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op549_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf549', get_index_1, getitem_1)
        return store_reduction


op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 1769472})]
op551.unmet_dependencies = []
op551.met_dependencies = [MemoryDep('primals_56', c0, {c0: 1769472})]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf551.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (1769472, 1)
op551.sizes = ([1769472], [])
primals_56_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf551_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op551_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_56', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf551', get_index_1, to_dtype, None)
        return store


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op552.unmet_dependencies = [MemoryDep('buf548', c0, {c0: 20480}), MemoryDep('buf549', c0, {c0: 20480})]
op552.met_dependencies = 
    [   MemoryDep('add_35', c0, {c0: 15728640}),
        MemoryDep('primals_53', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_54', c1, {c0: 20480, c1: 768})]
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf552.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
    ]
]
op552.group.device = cuda:0
op552.group.iteration = (15728640, 1)
op552.sizes = ([20, 1024, 768], [])
add_35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf548_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf549_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_54_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf552_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op552_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf548', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf549', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_53', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_54', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf552', get_index_5, to_dtype, None)
        return store


op553: ExternKernelSchedulerNode(ExternKernelOut)
op553.writes = [StarDep(name='buf553', mode=None)]
op553.unmet_dependencies = [StarDep(name='buf551', mode=None), StarDep(name='buf552', mode=None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: ExternKernelOut
    buf553.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf553.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op553.node.kernel = extern_kernels.mm


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 47185920})]
op554.unmet_dependencies = [MemoryDep('buf553', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op554.met_dependencies = [MemoryDep('primals_55', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf554.users = [
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
    ]
]
op554.group.device = cuda:0
op554.group.iteration = (47185920, 1)
op554.sizes = ([3, 20480, 768], [])
buf553_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_55_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op554_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_55', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf554', get_index_2, add, None)
        return store


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 15728640})]
op555.unmet_dependencies = [   MemoryDep('buf554', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op555.met_dependencies = []
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf555.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (15728640, 1)
op555.sizes = ([1024, 20, 768], [])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf555_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op555_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf555', get_index_1, load, None)
        return store


op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 15728640})]
op556.unmet_dependencies = [   MemoryDep('buf554', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op556.met_dependencies = []
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf556.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op556.group.device = cuda:0
op556.group.iteration = (15728640, 1)
op556.sizes = ([1024, 20, 768], [])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf556_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op556_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf556', get_index_1, load, None)
        return store


op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 15728640})]
op557.unmet_dependencies = [   MemoryDep('buf554', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op557.met_dependencies = []
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (15728640, 1)
op557.sizes = ([1024, 20, 768], [])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf557_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op557_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf557', get_index_1, load, None)
        return store


op558: ExternKernelSchedulerNode(FallbackKernel)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = 
    [   StarDep(name='buf555', mode=None),
        StarDep(name='buf556', mode=None),
        StarDep(name='buf557', mode=None)]
op558.met_dependencies = [StarDep(name='bwd_rng_state_4', mode=None)]
op558.outputs = [
    buf558: FallbackKernel
    buf558.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf558.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op562'), can_inplace=False, is_weak=False),
    ]
]
op558.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op559: ExternKernelSchedulerNode(MultiOutput)
op559.writes = [StarDep(name='buf559', mode=None)]
op559.unmet_dependencies = [StarDep(name='buf558', mode=None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: MultiOutput
    buf559.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf559.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False),
    ]
]
op559.node.kernel = None


op560: ExternKernelSchedulerNode(MultiOutput)
op560.writes = [StarDep(name='buf560', mode=None)]
op560.unmet_dependencies = [StarDep(name='buf558', mode=None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: MultiOutput
    buf560.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf560.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op560.node.kernel = None


op561: ExternKernelSchedulerNode(MultiOutput)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf558', mode=None)]
op561.met_dependencies = []
op561.outputs = [
    buf561: MultiOutput
    buf561.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf561.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op561.node.kernel = None


op562: ExternKernelSchedulerNode(MultiOutput)
op562.writes = [StarDep(name='buf562', mode=None)]
op562.unmet_dependencies = [StarDep(name='buf558', mode=None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: MultiOutput
    buf562.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf562.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op562.node.kernel = None


op564: ExternKernelSchedulerNode(ExternKernelOut)
op564.writes = [StarDep(name='buf564', mode=None)]
op564.unmet_dependencies = [StarDep(name='buf545', mode=None), StarDep(name='buf559', mode=None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ExternKernelOut
    buf564.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf564.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=True, is_weak=False)]
]
op564.node.kernel = extern_kernels.mm


op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 61440})]
op565.unmet_dependencies = [MemoryDep('buf545', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf565.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (61440, 256)
op565.sizes = ([80, 768], [256])
buf545_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf565_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op565_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf565', get_index_1, reduction)
        return None


op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 768})]
op566.unmet_dependencies = [MemoryDep('buf565', c0 + 768*c1, {c0: 768, c1: 80})]
op566.met_dependencies = []
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf566.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op566.group.device = cuda:0
op566.group.iteration = (768, 80)
op566.sizes = ([768], [80])
buf565_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf566_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op566_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf565', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf566', get_index_1, reduction)
        return None


op567: SchedulerNode(ComputedBuffer)
op567.writes = [MemoryDep('buf567', c0, {c0: 589824})]
op567.unmet_dependencies = [MemoryDep('buf564', c0, {c0: 589824})]
op567.met_dependencies = []
op567.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf567.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op567.group.device = cuda:0
op567.group.iteration = (589824, 1)
op567.sizes = ([589824], [])
buf564_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf567_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op567_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf567', get_index_1, to_dtype, None)
        return store


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 15728640})]
op568.unmet_dependencies = [   MemoryDep('buf554', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op568.met_dependencies = []
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf568.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (15728640, 1)
op568.sizes = ([1024, 20, 768], [])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf568_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op568_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf568', get_index_1, load, None)
        return store


op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 15728640})]
op569.unmet_dependencies = [   MemoryDep('buf554', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op569.met_dependencies = []
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf569.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (15728640, 1)
op569.sizes = ([1024, 20, 768], [])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf569_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op569_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf569', get_index_1, load, None)
        return store


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 15728640})]
op570.unmet_dependencies = [   MemoryDep('buf554', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op570.met_dependencies = []
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf570.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op570.group.device = cuda:0
op570.group.iteration = (15728640, 1)
op570.sizes = ([1024, 20, 768], [])
buf554_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf570_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op570_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf570', get_index_1, load, None)
        return store


op571: ExternKernelSchedulerNode(FallbackKernel)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = 
    [   StarDep(name='buf547', mode=None),
        StarDep(name='buf559', mode=None),
        StarDep(name='buf560', mode=None),
        StarDep(name='buf561', mode=None),
        StarDep(name='buf562', mode=None),
        StarDep(name='buf568', mode=None),
        StarDep(name='buf569', mode=None),
        StarDep(name='buf570', mode=None)]
op571.met_dependencies = []
op571.outputs = [
    buf571: FallbackKernel
    buf571.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf571.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False),
    ]
]
op571.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op572: ExternKernelSchedulerNode(MultiOutput)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op572.met_dependencies = []
op572.outputs = [
    buf572: MultiOutput
    buf572.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf572.users = [
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
    ]
]
op572.node.kernel = None


op573: ExternKernelSchedulerNode(MultiOutput)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op573.met_dependencies = []
op573.outputs = [
    buf573: MultiOutput
    buf573.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf573.users = [
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
    ]
]
op573.node.kernel = None


op574: ExternKernelSchedulerNode(MultiOutput)
op574.writes = [StarDep(name='buf574', mode=None)]
op574.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op574.met_dependencies = []
op574.outputs = [
    buf574: MultiOutput
    buf574.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf574.users = [
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
    ]
]
op574.node.kernel = None


op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 73728})]
op575.unmet_dependencies = 
    [   MemoryDep('buf572', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf573', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf574', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op575.met_dependencies = []
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf575.users = [NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (73728, 640)
op575.sizes = ([32, 2304], [640])
buf574_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf573_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf572_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf575_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op575_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf574', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf573', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf572', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf575', get_index_6, reduction)
        return None


op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 2304})]
op576.unmet_dependencies = [MemoryDep('buf575', c0 + 2304*c1, {c0: 2304, c1: 32})]
op576.met_dependencies = []
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf576.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (2304, 32)
op576.sizes = ([2304], [32])
buf575_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf576_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op576_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf576', get_index_1, reduction)
        return None


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 47185920})]
op577.unmet_dependencies = 
    [   MemoryDep('buf572', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf573', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf574', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op577.met_dependencies = []
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf577.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False),
    ]
]
op577.group.device = cuda:0
op577.group.iteration = (47185920, 1)
op577.sizes = ([1024, 20, 3, 768], [])
buf574_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf573_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf572_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf577_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op577_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf574', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf573', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf572', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf577', get_index_6, add_1, None)
        return store


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf552', mode=None), StarDep(name='buf577', mode=None)]
op578.met_dependencies = []
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf578.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=True, is_weak=False)]
]
op578.node.kernel = extern_kernels.mm


op579: ExternKernelSchedulerNode(ExternKernelOut)
op579.writes = [StarDep(name='buf579', mode=None)]
op579.unmet_dependencies = [StarDep(name='buf551', mode=None), StarDep(name='buf577', mode=None)]
op579.met_dependencies = []
op579.outputs = [
    buf579: ExternKernelOut
    buf579.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf579.users = [
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
    ]
]
op579.node.kernel = extern_kernels.mm


op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 1769472})]
op580.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 1769472})]
op580.met_dependencies = []
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf580.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (1769472, 1)
op580.sizes = ([1769472], [])
buf578_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf580_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op580_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf580', get_index_1, to_dtype, None)
        return store


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 20480})]
op581.unmet_dependencies = [MemoryDep('buf579', c0, {c0: 15728640})]
op581.met_dependencies = [MemoryDep('primals_53', c1, {c0: 20480, c1: 768})]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf581.users = [NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op581.group.device = cuda:0
op581.group.iteration = (20480, 768)
op581.sizes = ([20480], [768])
buf579_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf581_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op581_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_53', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf581', get_index_2, reduction)
        return None


op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 20480})]
op582.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 20480}),
        MemoryDep('buf549', c0, {c0: 20480}),
        MemoryDep('buf579', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op582.met_dependencies = 
    [   MemoryDep('add_35', c0, {c0: 15728640}),
        MemoryDep('primals_53', c1, {c0: 20480, c1: 768})]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf582.users = [NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (20480, 768)
op582.sizes = ([20, 1024], [768])
buf579_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf548_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf549_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf582_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op582_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_53', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_35', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf548', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf549', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf582', get_index_5, reduction)
        return None


op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 61440})]
op583.unmet_dependencies = 
    [   MemoryDep('buf548', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf549', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf579', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op583.met_dependencies = [MemoryDep('add_35', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf583.users = [NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op583.group.device = cuda:0
op583.group.iteration = (61440, 256)
op583.sizes = ([80, 768], [256])
buf579_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf548_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf549_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf583_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op583_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_35', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf548', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf549', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf583', get_index_4, reduction)
        return None


op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 768})]
op584.unmet_dependencies = [MemoryDep('buf583', c0 + 768*c1, {c0: 768, c1: 80})]
op584.met_dependencies = []
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf584.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op584.group.device = cuda:0
op584.group.iteration = (768, 80)
op584.sizes = ([768], [80])
buf583_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf584_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op584_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf584', get_index_1, reduction)
        return None


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 61440})]
op585.unmet_dependencies = [   MemoryDep('buf579', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op585.met_dependencies = []
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf585.users = [NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (61440, 256)
op585.sizes = ([80, 768], [256])
buf579_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf585_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op585_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf585', get_index_1, reduction)
        return None


op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 768})]
op586.unmet_dependencies = [MemoryDep('buf585', c0 + 768*c1, {c0: 768, c1: 80})]
op586.met_dependencies = []
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf586.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (768, 80)
op586.sizes = ([768], [80])
buf585_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf586_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op586_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf585', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf586', get_index_1, reduction)
        return None


op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 15728640})]
op587.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 15728640}),
        MemoryDep('buf548', c0, {c0: 20480}),
        MemoryDep('buf549', c0, {c0: 20480}),
        MemoryDep('buf579', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf581', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf582', c0, {c0: 20480})]
op587.met_dependencies = 
    [   MemoryDep('add_35', c0, {c0: 15728640}),
        MemoryDep('primals_53', c1, {c0: 20480, c1: 768})]
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf587.users = [
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=True, is_weak=False),
    ]
]
op587.group.device = cuda:0
op587.group.iteration = (15728640, 1)
op587.sizes = ([20, 1024, 768], [])
buf544_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf549_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf579_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_53_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf581_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_35_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf548_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf582_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf587_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op587_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf544', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf549', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf579', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_53', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf581', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_35', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf548', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf549', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf582', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf587', get_index_9, add_2, None)
        return store


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 15728640})]
op588.unmet_dependencies = []
op588.met_dependencies = [MemoryDep('inductor_seeds_default', 3, {})]
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf588.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (15728640, 1)
op588.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf588_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op588_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 3
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 3)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf588', get_index_1, rand, None)
        return store


op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 15728640})]
op589.unmet_dependencies = 
    [   MemoryDep('buf587', c0, {c0: 15728640}),
        MemoryDep('buf588', c0, {c0: 15728640})]
op589.met_dependencies = []
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf589.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
    ]
]
op589.group.device = cuda:0
op589.group.iteration = (15728640, 1)
op589.sizes = ([15728640], [])
buf587_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf588_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf589_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op589_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf588', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf589', get_index_2, mul_1, None)
        return store


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 1179648})]
op590.unmet_dependencies = []
op590.met_dependencies = [MemoryDep('primals_51', c0, {c0: 1179648})]
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf590.users = [NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (1179648, 1)
op590.sizes = ([1179648], [])
primals_51_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf590_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op590_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_51', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf590', get_index_1, to_dtype, None)
        return store


op591: ExternKernelSchedulerNode(ExternKernelOut)
op591.writes = [StarDep(name='buf591', mode=None)]
op591.unmet_dependencies = [StarDep(name='buf589', mode=None), StarDep(name='buf590', mode=None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ExternKernelOut
    buf591.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf591.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False)]
]
op591.node.kernel = extern_kernels.mm


op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 20480})]
op592.unmet_dependencies = []
op592.met_dependencies = [MemoryDep('add_31', c0, {c0: 15728640})]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False),
    ]
]
op592.group.device = cuda:0
op592.group.iteration = (20480, 768)
op592.sizes = ([20480], [768])
add_31_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op592_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_31', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf592', get_index_1, getitem)
        return store_reduction


op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 20480})]
op593.unmet_dependencies = []
op593.met_dependencies = [MemoryDep('add_31', c0, {c0: 15728640})]
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf593.users = [
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False),
    ]
]
op593.group.device = cuda:0
op593.group.iteration = (20480, 768)
op593.sizes = ([20480], [768])
add_31_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op593_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_31', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf593', get_index_1, getitem_1)
        return store_reduction


op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 15728640})]
op595.unmet_dependencies = [MemoryDep('buf592', c0, {c0: 20480}), MemoryDep('buf593', c0, {c0: 20480})]
op595.met_dependencies = 
    [   MemoryDep('add_31', c0, {c0: 15728640}),
        MemoryDep('primals_47', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_48', c1, {c0: 20480, c1: 768})]
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf595.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
    ]
]
op595.group.device = cuda:0
op595.group.iteration = (15728640, 1)
op595.sizes = ([20480, 768], [])
add_31_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_48_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf595_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op595_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf592', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf593', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_47', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_48', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf595', get_index_5, to_dtype, None)
        return store


op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 1179648})]
op596.unmet_dependencies = []
op596.met_dependencies = [MemoryDep('primals_49', c0, {c0: 1179648})]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf596.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False),
    ]
]
op596.group.device = cuda:0
op596.group.iteration = (1179648, 1)
op596.sizes = ([1179648], [])
primals_49_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf596_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op596_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_49', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf596', get_index_1, to_dtype, None)
        return store


op597: ExternKernelSchedulerNode(ExternKernelOut)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf595', mode=None), StarDep(name='buf596', mode=None)]
op597.met_dependencies = []
op597.outputs = [
    buf597: ExternKernelOut
    buf597.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf597.users = [
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op597.node.kernel = extern_kernels.mm


op598: SchedulerNode(ComputedBuffer)
op598.writes = [MemoryDep('buf598', c0, {c0: 31457280})]
op598.unmet_dependencies = [MemoryDep('buf597', c0, {c0: 31457280})]
op598.met_dependencies = [MemoryDep('primals_50', c1, {c0: 20480, c1: 1536})]
op598.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf598.users = [NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op598.group.device = cuda:0
op598.group.iteration = (31457280, 1)
op598.sizes = ([20480, 1536], [])
buf597_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf598_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op598_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf597', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_50', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_50', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf598', get_index_4, to_dtype_4, None)
        return store


op599: ExternKernelSchedulerNode(ExternKernelOut)
op599.writes = [StarDep(name='buf599', mode=None)]
op599.unmet_dependencies = [StarDep(name='buf589', mode=None), StarDep(name='buf598', mode=None)]
op599.met_dependencies = []
op599.outputs = [
    buf599: ExternKernelOut
    buf599.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf599.users = [NodeUser(node=SchedulerNode(name='op602'), can_inplace=True, is_weak=False)]
]
op599.node.kernel = extern_kernels.mm


op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 61440})]
op600.unmet_dependencies = [MemoryDep('buf589', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op600.met_dependencies = []
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf600.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (61440, 256)
op600.sizes = ([80, 768], [256])
buf589_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf600_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op600_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf600', get_index_1, reduction)
        return None


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 768})]
op601.unmet_dependencies = [MemoryDep('buf600', c0 + 768*c1, {c0: 768, c1: 80})]
op601.met_dependencies = []
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf601.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (768, 80)
op601.sizes = ([768], [80])
buf600_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf601_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op601_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf600', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf601', get_index_1, reduction)
        return None


op602: SchedulerNode(ComputedBuffer)
op602.writes = [MemoryDep('buf602', c0, {c0: 1179648})]
op602.unmet_dependencies = [MemoryDep('buf599', c0, {c0: 1179648})]
op602.met_dependencies = []
op602.outputs = [
    buf602: ComputedBuffer
    buf602.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf602.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op602.group.device = cuda:0
op602.group.iteration = (1179648, 1)
op602.sizes = ([1179648], [])
buf599_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf602_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op602_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf602', get_index_1, to_dtype, None)
        return store


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 31457280})]
op603.unmet_dependencies = 
    [   MemoryDep('buf591', c0, {c0: 31457280}),
        MemoryDep('buf597', c0, {c0: 31457280})]
op603.met_dependencies = [MemoryDep('primals_50', c1, {c0: 20480, c1: 1536})]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf603.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
    ]
]
op603.group.device = cuda:0
op603.group.iteration = (31457280, 1)
op603.sizes = ([20480, 1536], [])
buf591_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf597_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_50_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf603_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op603_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf591', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf597', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_50', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf597', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_50', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf597', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_50', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf597', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_50', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf603', get_index_9, to_dtype_9, None)
        return store


op604: ExternKernelSchedulerNode(ExternKernelOut)
op604.writes = [StarDep(name='buf604', mode=None)]
op604.unmet_dependencies = [StarDep(name='buf596', mode=None), StarDep(name='buf603', mode=None)]
op604.met_dependencies = []
op604.outputs = [
    buf604: ExternKernelOut
    buf604.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf604.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=True, is_weak=False),
    ]
]
op604.node.kernel = extern_kernels.mm


op605: ExternKernelSchedulerNode(ExternKernelOut)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf595', mode=None), StarDep(name='buf603', mode=None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ExternKernelOut
    buf605.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf605.users = [NodeUser(node=SchedulerNode(name='op608'), can_inplace=True, is_weak=False)]
]
op605.node.kernel = extern_kernels.mm


op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 61440})]
op606.unmet_dependencies = [MemoryDep('buf603', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op606.met_dependencies = []
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf606.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (61440, 512)
op606.sizes = ([40, 1536], [512])
buf603_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf606_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op606_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf606', get_index_1, reduction)
        return None


op607: SchedulerNode(ComputedBuffer)
op607.writes = [MemoryDep('buf607', c0, {c0: 1536})]
op607.unmet_dependencies = [MemoryDep('buf606', c0 + 1536*c1, {c0: 1536, c1: 40})]
op607.met_dependencies = []
op607.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf607.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op607.group.device = cuda:0
op607.group.iteration = (1536, 40)
op607.sizes = ([1536], [40])
buf606_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf607_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op607_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf606', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf607', get_index_1, reduction)
        return None


op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 1179648})]
op608.unmet_dependencies = [MemoryDep('buf605', c0, {c0: 1179648})]
op608.met_dependencies = []
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf608.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op608.group.device = cuda:0
op608.group.iteration = (1179648, 1)
op608.sizes = ([1179648], [])
buf605_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf608_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op608_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf605', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf608', get_index_1, to_dtype, None)
        return store


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 20480})]
op609.unmet_dependencies = [MemoryDep('buf604', c0, {c0: 15728640})]
op609.met_dependencies = [MemoryDep('primals_47', c1, {c0: 20480, c1: 768})]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf609.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (20480, 768)
op609.sizes = ([20480], [768])
buf604_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf609_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op609_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf609', get_index_2, reduction)
        return None


op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 20480})]
op610.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 20480}),
        MemoryDep('buf593', c0, {c0: 20480}),
        MemoryDep('buf604', c0, {c0: 15728640})]
op610.met_dependencies = 
    [   MemoryDep('add_31', c0, {c0: 15728640}),
        MemoryDep('primals_47', c1, {c0: 20480, c1: 768})]
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf610.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op610.group.device = cuda:0
op610.group.iteration = (20480, 768)
op610.sizes = ([20480], [768])
buf604_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_31_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf610_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op610_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_47', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_31', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf592', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf593', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf610', get_index_5, reduction)
        return None


op611: SchedulerNode(ComputedBuffer)
op611.writes = [MemoryDep('buf611', c0, {c0: 61440})]
op611.unmet_dependencies = 
    [   MemoryDep('buf592', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf593', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf604', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op611.met_dependencies = [MemoryDep('add_31', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op611.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf611.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
]
op611.group.device = cuda:0
op611.group.iteration = (61440, 256)
op611.sizes = ([80, 768], [256])
buf604_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_31_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf611_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op611_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf592', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf593', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf611', get_index_4, reduction)
        return None


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 768})]
op612.unmet_dependencies = [MemoryDep('buf611', c0 + 768*c1, {c0: 768, c1: 80})]
op612.met_dependencies = []
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf612.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (768, 80)
op612.sizes = ([768], [80])
buf611_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf612_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op612_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf612', get_index_1, reduction)
        return None


op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', c0, {c0: 61440})]
op613.unmet_dependencies = [MemoryDep('buf604', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op613.met_dependencies = []
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf613.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (61440, 256)
op613.sizes = ([80, 768], [256])
buf604_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf613_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op613_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf613', get_index_1, reduction)
        return None


op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 768})]
op614.unmet_dependencies = [MemoryDep('buf613', c0 + 768*c1, {c0: 768, c1: 80})]
op614.met_dependencies = []
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf614.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op614.group.device = cuda:0
op614.group.iteration = (768, 80)
op614.sizes = ([768], [80])
buf613_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf614_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op614_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf613', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf614', get_index_1, reduction)
        return None


op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 15728640})]
op615.unmet_dependencies = 
    [   MemoryDep('buf587', c0, {c0: 15728640}),
        MemoryDep('buf592', c0, {c0: 20480}),
        MemoryDep('buf593', c0, {c0: 20480}),
        MemoryDep('buf604', c0, {c0: 15728640}),
        MemoryDep('buf609', c0, {c0: 20480}),
        MemoryDep('buf610', c0, {c0: 20480})]
op615.met_dependencies = 
    [   MemoryDep('add_31', c0, {c0: 15728640}),
        MemoryDep('primals_47', c1, {c0: 20480, c1: 768})]
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf615.users = [
        NodeUser(node=SchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False),
    ]
]
op615.group.device = cuda:0
op615.group.iteration = (15728640, 1)
op615.sizes = ([20480, 768], [])
buf587_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf593_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf604_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_47_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf609_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_31_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf592_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf610_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf615_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op615_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf593', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf604', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_47', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf609', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_31', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf592', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf593', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf610', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf615', get_index_9, add_2, None)
        return store


op616: SchedulerNode(ComputedBuffer)
op616.writes = [MemoryDep('buf616', c0, {c0: 15728640})]
op616.unmet_dependencies = [   MemoryDep('buf615', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op616.met_dependencies = []
op616.outputs = [
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf616.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
    ]
]
op616.group.device = cuda:0
op616.group.iteration = (15728640, 1)
op616.sizes = ([20480, 768], [])
buf615_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf616_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op616_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf616', get_index_1, to_dtype, None)
        return store


op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 589824})]
op617.unmet_dependencies = []
op617.met_dependencies = [MemoryDep('primals_45', c0, {c0: 589824})]
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf617.users = [NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op617.group.device = cuda:0
op617.group.iteration = (589824, 1)
op617.sizes = ([589824], [])
primals_45_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf617_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op617_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_45', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf617', get_index_1, to_dtype, None)
        return store


op618: ExternKernelSchedulerNode(ExternKernelOut)
op618.writes = [StarDep(name='buf618', mode=None)]
op618.unmet_dependencies = [StarDep(name='buf616', mode=None), StarDep(name='buf617', mode=None)]
op618.met_dependencies = []
op618.outputs = [
    buf618: ExternKernelOut
    buf618.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op618.node.kernel = extern_kernels.mm


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 20480})]
op619.unmet_dependencies = []
op619.met_dependencies = [MemoryDep('add_27', c0, {c0: 15728640})]
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf619.users = [
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False),
    ]
]
op619.group.device = cuda:0
op619.group.iteration = (20480, 768)
op619.sizes = ([20480], [768])
add_27_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf619_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op619_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_27', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf619', get_index_1, getitem)
        return store_reduction


op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 20480})]
op620.unmet_dependencies = []
op620.met_dependencies = [MemoryDep('add_27', c0, {c0: 15728640})]
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf620.users = [
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False),
    ]
]
op620.group.device = cuda:0
op620.group.iteration = (20480, 768)
op620.sizes = ([20480], [768])
add_27_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf620_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op620_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_27', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf620', get_index_1, getitem_1)
        return store_reduction


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 1769472})]
op622.unmet_dependencies = []
op622.met_dependencies = [MemoryDep('primals_44', c0, {c0: 1769472})]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf622.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False),
    ]
]
op622.group.device = cuda:0
op622.group.iteration = (1769472, 1)
op622.sizes = ([1769472], [])
primals_44_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf622_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op622_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_44', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf622', get_index_1, to_dtype, None)
        return store


op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op623.unmet_dependencies = [MemoryDep('buf619', c0, {c0: 20480}), MemoryDep('buf620', c0, {c0: 20480})]
op623.met_dependencies = 
    [   MemoryDep('add_27', c0, {c0: 15728640}),
        MemoryDep('primals_41', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_42', c1, {c0: 20480, c1: 768})]
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf623.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False),
    ]
]
op623.group.device = cuda:0
op623.group.iteration = (15728640, 1)
op623.sizes = ([20, 1024, 768], [])
add_27_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf619_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf620_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_42_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf623_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op623_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf619', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf620', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_41', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_42', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf623', get_index_5, to_dtype, None)
        return store


op624: ExternKernelSchedulerNode(ExternKernelOut)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf622', mode=None), StarDep(name='buf623', mode=None)]
op624.met_dependencies = []
op624.outputs = [
    buf624: ExternKernelOut
    buf624.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf624.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
]
op624.node.kernel = extern_kernels.mm


op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 47185920})]
op625.unmet_dependencies = [MemoryDep('buf624', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op625.met_dependencies = [MemoryDep('primals_43', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf625.users = [
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
    ]
]
op625.group.device = cuda:0
op625.group.iteration = (47185920, 1)
op625.sizes = ([3, 20480, 768], [])
buf624_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_43_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op625_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf624', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_43', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf625', get_index_2, add, None)
        return store


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 15728640})]
op626.unmet_dependencies = [   MemoryDep('buf625', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op626.met_dependencies = []
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf626.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (15728640, 1)
op626.sizes = ([1024, 20, 768], [])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf626_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op626_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf626', get_index_1, load, None)
        return store


op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 15728640})]
op627.unmet_dependencies = [   MemoryDep('buf625', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op627.met_dependencies = []
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf627.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op627.group.device = cuda:0
op627.group.iteration = (15728640, 1)
op627.sizes = ([1024, 20, 768], [])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf627_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op627_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf627', get_index_1, load, None)
        return store


op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 15728640})]
op628.unmet_dependencies = [   MemoryDep('buf625', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op628.met_dependencies = []
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf628.users = [NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (15728640, 1)
op628.sizes = ([1024, 20, 768], [])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf628_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op628_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf628', get_index_1, load, None)
        return store


op629: ExternKernelSchedulerNode(FallbackKernel)
op629.writes = [StarDep(name='buf629', mode=None)]
op629.unmet_dependencies = 
    [   StarDep(name='buf626', mode=None),
        StarDep(name='buf627', mode=None),
        StarDep(name='buf628', mode=None)]
op629.met_dependencies = [StarDep(name='bwd_rng_state_3', mode=None)]
op629.outputs = [
    buf629: FallbackKernel
    buf629.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf629.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op629.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op630: ExternKernelSchedulerNode(MultiOutput)
op630.writes = [StarDep(name='buf630', mode=None)]
op630.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op630.met_dependencies = []
op630.outputs = [
    buf630: MultiOutput
    buf630.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf630.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
]
op630.node.kernel = None


op631: ExternKernelSchedulerNode(MultiOutput)
op631.writes = [StarDep(name='buf631', mode=None)]
op631.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op631.met_dependencies = []
op631.outputs = [
    buf631: MultiOutput
    buf631.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op631.node.kernel = None


op632: ExternKernelSchedulerNode(MultiOutput)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op632.met_dependencies = []
op632.outputs = [
    buf632: MultiOutput
    buf632.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op632.node.kernel = None


op633: ExternKernelSchedulerNode(MultiOutput)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op633.met_dependencies = []
op633.outputs = [
    buf633: MultiOutput
    buf633.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf633.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op633.node.kernel = None


op635: ExternKernelSchedulerNode(ExternKernelOut)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf616', mode=None), StarDep(name='buf630', mode=None)]
op635.met_dependencies = []
op635.outputs = [
    buf635: ExternKernelOut
    buf635.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf635.users = [NodeUser(node=SchedulerNode(name='op638'), can_inplace=True, is_weak=False)]
]
op635.node.kernel = extern_kernels.mm


op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 61440})]
op636.unmet_dependencies = [MemoryDep('buf616', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op636.met_dependencies = []
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf636.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False)]
]
op636.group.device = cuda:0
op636.group.iteration = (61440, 256)
op636.sizes = ([80, 768], [256])
buf616_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf636_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op636_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf616', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf636', get_index_1, reduction)
        return None


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 768})]
op637.unmet_dependencies = [MemoryDep('buf636', c0 + 768*c1, {c0: 768, c1: 80})]
op637.met_dependencies = []
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf637.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (768, 80)
op637.sizes = ([768], [80])
buf636_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf637_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op637_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf637', get_index_1, reduction)
        return None


op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', c0, {c0: 589824})]
op638.unmet_dependencies = [MemoryDep('buf635', c0, {c0: 589824})]
op638.met_dependencies = []
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf638.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op638.group.device = cuda:0
op638.group.iteration = (589824, 1)
op638.sizes = ([589824], [])
buf635_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf638_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op638_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf635', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf638', get_index_1, to_dtype, None)
        return store


op639: SchedulerNode(ComputedBuffer)
op639.writes = [MemoryDep('buf639', c0, {c0: 15728640})]
op639.unmet_dependencies = [   MemoryDep('buf625', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op639.met_dependencies = []
op639.outputs = [
    buf639: ComputedBuffer
    buf639.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf639.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op639.group.device = cuda:0
op639.group.iteration = (15728640, 1)
op639.sizes = ([1024, 20, 768], [])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf639_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op639_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf639', get_index_1, load, None)
        return store


op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 15728640})]
op640.unmet_dependencies = [   MemoryDep('buf625', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op640.met_dependencies = []
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf640.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op640.group.device = cuda:0
op640.group.iteration = (15728640, 1)
op640.sizes = ([1024, 20, 768], [])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf640_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op640_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf640', get_index_1, load, None)
        return store


op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 15728640})]
op641.unmet_dependencies = [   MemoryDep('buf625', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op641.met_dependencies = []
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf641.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (15728640, 1)
op641.sizes = ([1024, 20, 768], [])
buf625_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf641_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op641_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf641', get_index_1, load, None)
        return store


op642: ExternKernelSchedulerNode(FallbackKernel)
op642.writes = [StarDep(name='buf642', mode=None)]
op642.unmet_dependencies = 
    [   StarDep(name='buf618', mode=None),
        StarDep(name='buf630', mode=None),
        StarDep(name='buf631', mode=None),
        StarDep(name='buf632', mode=None),
        StarDep(name='buf633', mode=None),
        StarDep(name='buf639', mode=None),
        StarDep(name='buf640', mode=None),
        StarDep(name='buf641', mode=None)]
op642.met_dependencies = []
op642.outputs = [
    buf642: FallbackKernel
    buf642.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf642.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op643'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False),
    ]
]
op642.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op643: ExternKernelSchedulerNode(MultiOutput)
op643.writes = [StarDep(name='buf643', mode=None)]
op643.unmet_dependencies = [StarDep(name='buf642', mode=None)]
op643.met_dependencies = []
op643.outputs = [
    buf643: MultiOutput
    buf643.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf643.users = [
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
    ]
]
op643.node.kernel = None


op644: ExternKernelSchedulerNode(MultiOutput)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf642', mode=None)]
op644.met_dependencies = []
op644.outputs = [
    buf644: MultiOutput
    buf644.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf644.users = [
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
    ]
]
op644.node.kernel = None


op645: ExternKernelSchedulerNode(MultiOutput)
op645.writes = [StarDep(name='buf645', mode=None)]
op645.unmet_dependencies = [StarDep(name='buf642', mode=None)]
op645.met_dependencies = []
op645.outputs = [
    buf645: MultiOutput
    buf645.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf645.users = [
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
    ]
]
op645.node.kernel = None


op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 73728})]
op646.unmet_dependencies = 
    [   MemoryDep('buf643', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf644', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf645', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op646.met_dependencies = []
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf646.users = [NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (73728, 640)
op646.sizes = ([32, 2304], [640])
buf645_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf644_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf643_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf646_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op646_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf645', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf644', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf643', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf646', get_index_6, reduction)
        return None


op647: SchedulerNode(ComputedBuffer)
op647.writes = [MemoryDep('buf647', c0, {c0: 2304})]
op647.unmet_dependencies = [MemoryDep('buf646', c0 + 2304*c1, {c0: 2304, c1: 32})]
op647.met_dependencies = []
op647.outputs = [
    buf647: ComputedBuffer
    buf647.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf647.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op647.group.device = cuda:0
op647.group.iteration = (2304, 32)
op647.sizes = ([2304], [32])
buf646_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf647_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op647_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf646', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf647', get_index_1, reduction)
        return None


op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 47185920})]
op648.unmet_dependencies = 
    [   MemoryDep('buf643', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf644', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf645', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op648.met_dependencies = []
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf648.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False),
    ]
]
op648.group.device = cuda:0
op648.group.iteration = (47185920, 1)
op648.sizes = ([1024, 20, 3, 768], [])
buf645_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf644_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf643_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf648_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op648_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf645', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf644', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf643', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf648', get_index_6, add_1, None)
        return store


op649: ExternKernelSchedulerNode(ExternKernelOut)
op649.writes = [StarDep(name='buf649', mode=None)]
op649.unmet_dependencies = [StarDep(name='buf623', mode=None), StarDep(name='buf648', mode=None)]
op649.met_dependencies = []
op649.outputs = [
    buf649: ExternKernelOut
    buf649.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf649.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=True, is_weak=False)]
]
op649.node.kernel = extern_kernels.mm


op650: ExternKernelSchedulerNode(ExternKernelOut)
op650.writes = [StarDep(name='buf650', mode=None)]
op650.unmet_dependencies = [StarDep(name='buf622', mode=None), StarDep(name='buf648', mode=None)]
op650.met_dependencies = []
op650.outputs = [
    buf650: ExternKernelOut
    buf650.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf650.users = [
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False),
    ]
]
op650.node.kernel = extern_kernels.mm


op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 1769472})]
op651.unmet_dependencies = [MemoryDep('buf649', c0, {c0: 1769472})]
op651.met_dependencies = []
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf651.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op651.group.device = cuda:0
op651.group.iteration = (1769472, 1)
op651.sizes = ([1769472], [])
buf649_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf651_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op651_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf649', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf651', get_index_1, to_dtype, None)
        return store


op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 20480})]
op652.unmet_dependencies = [MemoryDep('buf650', c0, {c0: 15728640})]
op652.met_dependencies = [MemoryDep('primals_41', c1, {c0: 20480, c1: 768})]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf652.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (20480, 768)
op652.sizes = ([20480], [768])
buf650_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf652_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op652_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_41', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf652', get_index_2, reduction)
        return None


op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 20480})]
op653.unmet_dependencies = 
    [   MemoryDep('buf619', c0, {c0: 20480}),
        MemoryDep('buf620', c0, {c0: 20480}),
        MemoryDep('buf650', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op653.met_dependencies = 
    [   MemoryDep('add_27', c0, {c0: 15728640}),
        MemoryDep('primals_41', c1, {c0: 20480, c1: 768})]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf653.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op653.group.device = cuda:0
op653.group.iteration = (20480, 768)
op653.sizes = ([20, 1024], [768])
buf650_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_27_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf619_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf620_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf653_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op653_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_41', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_27', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf619', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf620', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf653', get_index_5, reduction)
        return None


op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 61440})]
op654.unmet_dependencies = 
    [   MemoryDep('buf619', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf620', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf650', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op654.met_dependencies = [MemoryDep('add_27', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf654.users = [NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (61440, 256)
op654.sizes = ([80, 768], [256])
buf650_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_27_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf619_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf620_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf654_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op654_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_27', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf619', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf620', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf654', get_index_4, reduction)
        return None


op655: SchedulerNode(ComputedBuffer)
op655.writes = [MemoryDep('buf655', c0, {c0: 768})]
op655.unmet_dependencies = [MemoryDep('buf654', c0 + 768*c1, {c0: 768, c1: 80})]
op655.met_dependencies = []
op655.outputs = [
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf655.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op655.group.device = cuda:0
op655.group.iteration = (768, 80)
op655.sizes = ([768], [80])
buf654_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf655_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op655_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf654', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf655', get_index_1, reduction)
        return None


op656: SchedulerNode(ComputedBuffer)
op656.writes = [MemoryDep('buf656', c0, {c0: 61440})]
op656.unmet_dependencies = [   MemoryDep('buf650', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op656.met_dependencies = []
op656.outputs = [
    buf656: ComputedBuffer
    buf656.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf656.users = [NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op656.group.device = cuda:0
op656.group.iteration = (61440, 256)
op656.sizes = ([80, 768], [256])
buf650_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf656_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op656_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf656', get_index_1, reduction)
        return None


op657: SchedulerNode(ComputedBuffer)
op657.writes = [MemoryDep('buf657', c0, {c0: 768})]
op657.unmet_dependencies = [MemoryDep('buf656', c0 + 768*c1, {c0: 768, c1: 80})]
op657.met_dependencies = []
op657.outputs = [
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf657.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op657.group.device = cuda:0
op657.group.iteration = (768, 80)
op657.sizes = ([768], [80])
buf656_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf657_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op657_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf656', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf657', get_index_1, reduction)
        return None


op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 15728640})]
op658.unmet_dependencies = 
    [   MemoryDep('buf615', c0, {c0: 15728640}),
        MemoryDep('buf619', c0, {c0: 20480}),
        MemoryDep('buf620', c0, {c0: 20480}),
        MemoryDep('buf650', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf652', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf653', c0, {c0: 20480})]
op658.met_dependencies = 
    [   MemoryDep('add_27', c0, {c0: 15728640}),
        MemoryDep('primals_41', c1, {c0: 20480, c1: 768})]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf658.users = [
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op658.group.device = cuda:0
op658.group.iteration = (15728640, 1)
op658.sizes = ([20, 1024, 768], [])
buf615_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf620_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf650_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_41_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf652_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_27_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf619_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf653_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op658_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf620', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf650', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_41', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf652', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_27', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf619', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf620', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf653', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf658', get_index_9, add_2, None)
        return store


op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', c0, {c0: 15728640})]
op659.unmet_dependencies = []
op659.met_dependencies = [MemoryDep('inductor_seeds_default', 2, {})]
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf659.users = [NodeUser(node=SchedulerNode(name='op660'), can_inplace=True, is_weak=False)]
]
op659.group.device = cuda:0
op659.group.iteration = (15728640, 1)
op659.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf659_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op659_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 2
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 2)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf659', get_index_1, rand, None)
        return store


op660: SchedulerNode(ComputedBuffer)
op660.writes = [MemoryDep('buf660', c0, {c0: 15728640})]
op660.unmet_dependencies = 
    [   MemoryDep('buf658', c0, {c0: 15728640}),
        MemoryDep('buf659', c0, {c0: 15728640})]
op660.met_dependencies = []
op660.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf660.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op670'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op671'), can_inplace=False, is_weak=False),
    ]
]
op660.group.device = cuda:0
op660.group.iteration = (15728640, 1)
op660.sizes = ([15728640], [])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf659_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf660_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op660_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf658', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf659', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf660', get_index_2, mul_1, None)
        return store


op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 1179648})]
op661.unmet_dependencies = []
op661.met_dependencies = [MemoryDep('primals_39', c0, {c0: 1179648})]
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf661.users = [NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False)]
]
op661.group.device = cuda:0
op661.group.iteration = (1179648, 1)
op661.sizes = ([1179648], [])
primals_39_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf661_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op661_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_39', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf661', get_index_1, to_dtype, None)
        return store


op662: ExternKernelSchedulerNode(ExternKernelOut)
op662.writes = [StarDep(name='buf662', mode=None)]
op662.unmet_dependencies = [StarDep(name='buf660', mode=None), StarDep(name='buf661', mode=None)]
op662.met_dependencies = []
op662.outputs = [
    buf662: ExternKernelOut
    buf662.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf662.users = [NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False)]
]
op662.node.kernel = extern_kernels.mm


op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 20480})]
op663.unmet_dependencies = []
op663.met_dependencies = [MemoryDep('add_23', c0, {c0: 15728640})]
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf663.users = [
        NodeUser(node=SchedulerNode(name='op666'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False),
    ]
]
op663.group.device = cuda:0
op663.group.iteration = (20480, 768)
op663.sizes = ([20480], [768])
add_23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf663_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op663_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf663', get_index_1, getitem)
        return store_reduction


op664: SchedulerNode(ComputedBuffer)
op664.writes = [MemoryDep('buf664', c0, {c0: 20480})]
op664.unmet_dependencies = []
op664.met_dependencies = [MemoryDep('add_23', c0, {c0: 15728640})]
op664.outputs = [
    buf664: ComputedBuffer
    buf664.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf664.users = [
        NodeUser(node=SchedulerNode(name='op666'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False),
    ]
]
op664.group.device = cuda:0
op664.group.iteration = (20480, 768)
op664.sizes = ([20480], [768])
add_23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf664_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op664_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_23', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf664', get_index_1, getitem_1)
        return store_reduction


op666: SchedulerNode(ComputedBuffer)
op666.writes = [MemoryDep('buf666', c0, {c0: 15728640})]
op666.unmet_dependencies = [MemoryDep('buf663', c0, {c0: 20480}), MemoryDep('buf664', c0, {c0: 20480})]
op666.met_dependencies = 
    [   MemoryDep('add_23', c0, {c0: 15728640}),
        MemoryDep('primals_35', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_36', c1, {c0: 20480, c1: 768})]
op666.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf666.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False),
    ]
]
op666.group.device = cuda:0
op666.group.iteration = (15728640, 1)
op666.sizes = ([20480, 768], [])
add_23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf663_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf664_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_36_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf666_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op666_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf663', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf664', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_35', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_36', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf666', get_index_5, to_dtype, None)
        return store


op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 1179648})]
op667.unmet_dependencies = []
op667.met_dependencies = [MemoryDep('primals_37', c0, {c0: 1179648})]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf667.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False),
    ]
]
op667.group.device = cuda:0
op667.group.iteration = (1179648, 1)
op667.sizes = ([1179648], [])
primals_37_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf667_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op667_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_37', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf667', get_index_1, to_dtype, None)
        return store


op668: ExternKernelSchedulerNode(ExternKernelOut)
op668.writes = [StarDep(name='buf668', mode=None)]
op668.unmet_dependencies = [StarDep(name='buf666', mode=None), StarDep(name='buf667', mode=None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ExternKernelOut
    buf668.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf668.users = [
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False),
    ]
]
op668.node.kernel = extern_kernels.mm


op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 31457280})]
op669.unmet_dependencies = [MemoryDep('buf668', c0, {c0: 31457280})]
op669.met_dependencies = [MemoryDep('primals_38', c1, {c0: 20480, c1: 1536})]
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf669.users = [NodeUser(node=ExternKernelSchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (31457280, 1)
op669.sizes = ([20480, 1536], [])
buf668_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf669_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op669_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf668', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_38', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf668', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_38', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf669', get_index_4, to_dtype_4, None)
        return store


op670: ExternKernelSchedulerNode(ExternKernelOut)
op670.writes = [StarDep(name='buf670', mode=None)]
op670.unmet_dependencies = [StarDep(name='buf660', mode=None), StarDep(name='buf669', mode=None)]
op670.met_dependencies = []
op670.outputs = [
    buf670: ExternKernelOut
    buf670.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf670.users = [NodeUser(node=SchedulerNode(name='op673'), can_inplace=True, is_weak=False)]
]
op670.node.kernel = extern_kernels.mm


op671: SchedulerNode(ComputedBuffer)
op671.writes = [MemoryDep('buf671', c0, {c0: 61440})]
op671.unmet_dependencies = [MemoryDep('buf660', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op671.met_dependencies = []
op671.outputs = [
    buf671: ComputedBuffer
    buf671.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf671.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False)]
]
op671.group.device = cuda:0
op671.group.iteration = (61440, 256)
op671.sizes = ([80, 768], [256])
buf660_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf671_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op671_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf671', get_index_1, reduction)
        return None


op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 768})]
op672.unmet_dependencies = [MemoryDep('buf671', c0 + 768*c1, {c0: 768, c1: 80})]
op672.met_dependencies = []
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf672.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op672.group.device = cuda:0
op672.group.iteration = (768, 80)
op672.sizes = ([768], [80])
buf671_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf672_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op672_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf672', get_index_1, reduction)
        return None


op673: SchedulerNode(ComputedBuffer)
op673.writes = [MemoryDep('buf673', c0, {c0: 1179648})]
op673.unmet_dependencies = [MemoryDep('buf670', c0, {c0: 1179648})]
op673.met_dependencies = []
op673.outputs = [
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf673.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op673.group.device = cuda:0
op673.group.iteration = (1179648, 1)
op673.sizes = ([1179648], [])
buf670_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf673_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op673_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf670', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf673', get_index_1, to_dtype, None)
        return store


op674: SchedulerNode(ComputedBuffer)
op674.writes = [MemoryDep('buf674', c0, {c0: 31457280})]
op674.unmet_dependencies = 
    [   MemoryDep('buf662', c0, {c0: 31457280}),
        MemoryDep('buf668', c0, {c0: 31457280})]
op674.met_dependencies = [MemoryDep('primals_38', c1, {c0: 20480, c1: 1536})]
op674.outputs = [
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf674.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
]
op674.group.device = cuda:0
op674.group.iteration = (31457280, 1)
op674.sizes = ([20480, 1536], [])
buf662_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf668_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_38_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf674_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op674_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf662', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf668', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_38', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf668', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_38', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf668', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_38', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf668', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_38', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf674', get_index_9, to_dtype_9, None)
        return store


op675: ExternKernelSchedulerNode(ExternKernelOut)
op675.writes = [StarDep(name='buf675', mode=None)]
op675.unmet_dependencies = [StarDep(name='buf667', mode=None), StarDep(name='buf674', mode=None)]
op675.met_dependencies = []
op675.outputs = [
    buf675: ExternKernelOut
    buf675.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf675.users = [
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False),
    ]
]
op675.node.kernel = extern_kernels.mm


op676: ExternKernelSchedulerNode(ExternKernelOut)
op676.writes = [StarDep(name='buf676', mode=None)]
op676.unmet_dependencies = [StarDep(name='buf666', mode=None), StarDep(name='buf674', mode=None)]
op676.met_dependencies = []
op676.outputs = [
    buf676: ExternKernelOut
    buf676.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf676.users = [NodeUser(node=SchedulerNode(name='op679'), can_inplace=True, is_weak=False)]
]
op676.node.kernel = extern_kernels.mm


op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 61440})]
op677.unmet_dependencies = [MemoryDep('buf674', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op677.met_dependencies = []
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf677.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False)]
]
op677.group.device = cuda:0
op677.group.iteration = (61440, 512)
op677.sizes = ([40, 1536], [512])
buf674_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf677_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op677_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf674', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf677', get_index_1, reduction)
        return None


op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', c0, {c0: 1536})]
op678.unmet_dependencies = [MemoryDep('buf677', c0 + 1536*c1, {c0: 1536, c1: 40})]
op678.met_dependencies = []
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf678.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op678.group.device = cuda:0
op678.group.iteration = (1536, 40)
op678.sizes = ([1536], [40])
buf677_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf678_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op678_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf677', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf678', get_index_1, reduction)
        return None


op679: SchedulerNode(ComputedBuffer)
op679.writes = [MemoryDep('buf679', c0, {c0: 1179648})]
op679.unmet_dependencies = [MemoryDep('buf676', c0, {c0: 1179648})]
op679.met_dependencies = []
op679.outputs = [
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf679.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op679.group.device = cuda:0
op679.group.iteration = (1179648, 1)
op679.sizes = ([1179648], [])
buf676_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf679_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op679_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf679', get_index_1, to_dtype, None)
        return store


op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 20480})]
op680.unmet_dependencies = [MemoryDep('buf675', c0, {c0: 15728640})]
op680.met_dependencies = [MemoryDep('primals_35', c1, {c0: 20480, c1: 768})]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf680.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op680.group.device = cuda:0
op680.group.iteration = (20480, 768)
op680.sizes = ([20480], [768])
buf675_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op680_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_35', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf680', get_index_2, reduction)
        return None


op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', c0, {c0: 20480})]
op681.unmet_dependencies = 
    [   MemoryDep('buf663', c0, {c0: 20480}),
        MemoryDep('buf664', c0, {c0: 20480}),
        MemoryDep('buf675', c0, {c0: 15728640})]
op681.met_dependencies = 
    [   MemoryDep('add_23', c0, {c0: 15728640}),
        MemoryDep('primals_35', c1, {c0: 20480, c1: 768})]
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf681.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False)]
]
op681.group.device = cuda:0
op681.group.iteration = (20480, 768)
op681.sizes = ([20480], [768])
buf675_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf663_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf664_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf681_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op681_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_35', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_23', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf663', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf664', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf681', get_index_5, reduction)
        return None


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 61440})]
op682.unmet_dependencies = 
    [   MemoryDep('buf663', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf664', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf675', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op682.met_dependencies = [MemoryDep('add_23', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf682.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (61440, 256)
op682.sizes = ([80, 768], [256])
buf675_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf663_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf664_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf682_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op682_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf663', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf664', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf682', get_index_4, reduction)
        return None


op683: SchedulerNode(ComputedBuffer)
op683.writes = [MemoryDep('buf683', c0, {c0: 768})]
op683.unmet_dependencies = [MemoryDep('buf682', c0 + 768*c1, {c0: 768, c1: 80})]
op683.met_dependencies = []
op683.outputs = [
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf683.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op683.group.device = cuda:0
op683.group.iteration = (768, 80)
op683.sizes = ([768], [80])
buf682_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf683_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op683_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf682', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf683', get_index_1, reduction)
        return None


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 61440})]
op684.unmet_dependencies = [MemoryDep('buf675', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op684.met_dependencies = []
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf684.users = [NodeUser(node=SchedulerNode(name='op685'), can_inplace=False, is_weak=False)]
]
op684.group.device = cuda:0
op684.group.iteration = (61440, 256)
op684.sizes = ([80, 768], [256])
buf675_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf684_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op684_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf684', get_index_1, reduction)
        return None


op685: SchedulerNode(ComputedBuffer)
op685.writes = [MemoryDep('buf685', c0, {c0: 768})]
op685.unmet_dependencies = [MemoryDep('buf684', c0 + 768*c1, {c0: 768, c1: 80})]
op685.met_dependencies = []
op685.outputs = [
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf685.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op685.group.device = cuda:0
op685.group.iteration = (768, 80)
op685.sizes = ([768], [80])
buf684_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf685_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op685_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf684', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf685', get_index_1, reduction)
        return None


op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 15728640})]
op686.unmet_dependencies = 
    [   MemoryDep('buf658', c0, {c0: 15728640}),
        MemoryDep('buf663', c0, {c0: 20480}),
        MemoryDep('buf664', c0, {c0: 20480}),
        MemoryDep('buf675', c0, {c0: 15728640}),
        MemoryDep('buf680', c0, {c0: 20480}),
        MemoryDep('buf681', c0, {c0: 20480})]
op686.met_dependencies = 
    [   MemoryDep('add_23', c0, {c0: 15728640}),
        MemoryDep('primals_35', c1, {c0: 20480, c1: 768})]
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf686.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=True, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (15728640, 1)
op686.sizes = ([20480, 768], [])
buf658_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf664_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf675_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_35_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf680_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_23_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf663_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf681_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf686_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op686_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf658', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf664', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf675', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_35', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf680', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_23', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf663', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf664', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf681', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf686', get_index_9, add_2, None)
        return store


op687: SchedulerNode(ComputedBuffer)
op687.writes = [MemoryDep('buf687', c0, {c0: 15728640})]
op687.unmet_dependencies = [   MemoryDep('buf686', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op687.met_dependencies = []
op687.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf687.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False),
    ]
]
op687.group.device = cuda:0
op687.group.iteration = (15728640, 1)
op687.sizes = ([20480, 768], [])
buf686_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf687_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op687_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf687', get_index_1, to_dtype, None)
        return store


op688: SchedulerNode(ComputedBuffer)
op688.writes = [MemoryDep('buf688', c0, {c0: 589824})]
op688.unmet_dependencies = []
op688.met_dependencies = [MemoryDep('primals_33', c0, {c0: 589824})]
op688.outputs = [
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf688.users = [NodeUser(node=ExternKernelSchedulerNode(name='op689'), can_inplace=False, is_weak=False)]
]
op688.group.device = cuda:0
op688.group.iteration = (589824, 1)
op688.sizes = ([589824], [])
primals_33_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf688_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op688_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_33', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf688', get_index_1, to_dtype, None)
        return store


op689: ExternKernelSchedulerNode(ExternKernelOut)
op689.writes = [StarDep(name='buf689', mode=None)]
op689.unmet_dependencies = [StarDep(name='buf687', mode=None), StarDep(name='buf688', mode=None)]
op689.met_dependencies = []
op689.outputs = [
    buf689: ExternKernelOut
    buf689.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf689.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op689.node.kernel = extern_kernels.mm


op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', c0, {c0: 20480})]
op690.unmet_dependencies = []
op690.met_dependencies = [MemoryDep('add_19', c0, {c0: 15728640})]
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf690.users = [
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
    ]
]
op690.group.device = cuda:0
op690.group.iteration = (20480, 768)
op690.sizes = ([20480], [768])
add_19_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf690_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op690_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_19', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf690', get_index_1, getitem)
        return store_reduction


op691: SchedulerNode(ComputedBuffer)
op691.writes = [MemoryDep('buf691', c0, {c0: 20480})]
op691.unmet_dependencies = []
op691.met_dependencies = [MemoryDep('add_19', c0, {c0: 15728640})]
op691.outputs = [
    buf691: ComputedBuffer
    buf691.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf691.users = [
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
    ]
]
op691.group.device = cuda:0
op691.group.iteration = (20480, 768)
op691.sizes = ([20480], [768])
add_19_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op691_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_19', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf691', get_index_1, getitem_1)
        return store_reduction


op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 1769472})]
op693.unmet_dependencies = []
op693.met_dependencies = [MemoryDep('primals_32', c0, {c0: 1769472})]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf693.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op693.group.device = cuda:0
op693.group.iteration = (1769472, 1)
op693.sizes = ([1769472], [])
primals_32_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf693_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op693_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_32', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf693', get_index_1, to_dtype, None)
        return store


op694: SchedulerNode(ComputedBuffer)
op694.writes = [MemoryDep('buf694', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op694.unmet_dependencies = [MemoryDep('buf690', c0, {c0: 20480}), MemoryDep('buf691', c0, {c0: 20480})]
op694.met_dependencies = 
    [   MemoryDep('add_19', c0, {c0: 15728640}),
        MemoryDep('primals_29', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_30', c1, {c0: 20480, c1: 768})]
op694.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf694.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False),
    ]
]
op694.group.device = cuda:0
op694.group.iteration = (15728640, 1)
op694.sizes = ([20, 1024, 768], [])
add_19_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf690_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_30_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf694_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op694_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf690', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf691', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_29', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_30', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf694', get_index_5, to_dtype, None)
        return store


op695: ExternKernelSchedulerNode(ExternKernelOut)
op695.writes = [StarDep(name='buf695', mode=None)]
op695.unmet_dependencies = [StarDep(name='buf693', mode=None), StarDep(name='buf694', mode=None)]
op695.met_dependencies = []
op695.outputs = [
    buf695: ExternKernelOut
    buf695.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf695.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op695.node.kernel = extern_kernels.mm


op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 47185920})]
op696.unmet_dependencies = [MemoryDep('buf695', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op696.met_dependencies = [MemoryDep('primals_31', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf696.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False),
    ]
]
op696.group.device = cuda:0
op696.group.iteration = (47185920, 1)
op696.sizes = ([3, 20480, 768], [])
buf695_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_31_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op696_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf695', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_31', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf696', get_index_2, add, None)
        return store


op697: SchedulerNode(ComputedBuffer)
op697.writes = [MemoryDep('buf697', c0, {c0: 15728640})]
op697.unmet_dependencies = [   MemoryDep('buf696', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op697.met_dependencies = []
op697.outputs = [
    buf697: ComputedBuffer
    buf697.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf697.users = [NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op697.group.device = cuda:0
op697.group.iteration = (15728640, 1)
op697.sizes = ([1024, 20, 768], [])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf697_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op697_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf697', get_index_1, load, None)
        return store


op698: SchedulerNode(ComputedBuffer)
op698.writes = [MemoryDep('buf698', c0, {c0: 15728640})]
op698.unmet_dependencies = [   MemoryDep('buf696', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op698.met_dependencies = []
op698.outputs = [
    buf698: ComputedBuffer
    buf698.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf698.users = [NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op698.group.device = cuda:0
op698.group.iteration = (15728640, 1)
op698.sizes = ([1024, 20, 768], [])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf698_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op698_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf698', get_index_1, load, None)
        return store


op699: SchedulerNode(ComputedBuffer)
op699.writes = [MemoryDep('buf699', c0, {c0: 15728640})]
op699.unmet_dependencies = [   MemoryDep('buf696', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op699.met_dependencies = []
op699.outputs = [
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf699.users = [NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op699.group.device = cuda:0
op699.group.iteration = (15728640, 1)
op699.sizes = ([1024, 20, 768], [])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf699_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op699_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf699', get_index_1, load, None)
        return store


op700: ExternKernelSchedulerNode(FallbackKernel)
op700.writes = [StarDep(name='buf700', mode=None)]
op700.unmet_dependencies = 
    [   StarDep(name='buf697', mode=None),
        StarDep(name='buf698', mode=None),
        StarDep(name='buf699', mode=None)]
op700.met_dependencies = [StarDep(name='bwd_rng_state_2', mode=None)]
op700.outputs = [
    buf700: FallbackKernel
    buf700.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf700.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op704'), can_inplace=False, is_weak=False),
    ]
]
op700.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op701: ExternKernelSchedulerNode(MultiOutput)
op701.writes = [StarDep(name='buf701', mode=None)]
op701.unmet_dependencies = [StarDep(name='buf700', mode=None)]
op701.met_dependencies = []
op701.outputs = [
    buf701: MultiOutput
    buf701.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf701.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False),
    ]
]
op701.node.kernel = None


op702: ExternKernelSchedulerNode(MultiOutput)
op702.writes = [StarDep(name='buf702', mode=None)]
op702.unmet_dependencies = [StarDep(name='buf700', mode=None)]
op702.met_dependencies = []
op702.outputs = [
    buf702: MultiOutput
    buf702.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf702.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op702.node.kernel = None


op703: ExternKernelSchedulerNode(MultiOutput)
op703.writes = [StarDep(name='buf703', mode=None)]
op703.unmet_dependencies = [StarDep(name='buf700', mode=None)]
op703.met_dependencies = []
op703.outputs = [
    buf703: MultiOutput
    buf703.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf703.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op703.node.kernel = None


op704: ExternKernelSchedulerNode(MultiOutput)
op704.writes = [StarDep(name='buf704', mode=None)]
op704.unmet_dependencies = [StarDep(name='buf700', mode=None)]
op704.met_dependencies = []
op704.outputs = [
    buf704: MultiOutput
    buf704.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf704.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op704.node.kernel = None


op706: ExternKernelSchedulerNode(ExternKernelOut)
op706.writes = [StarDep(name='buf706', mode=None)]
op706.unmet_dependencies = [StarDep(name='buf687', mode=None), StarDep(name='buf701', mode=None)]
op706.met_dependencies = []
op706.outputs = [
    buf706: ExternKernelOut
    buf706.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf706.users = [NodeUser(node=SchedulerNode(name='op709'), can_inplace=True, is_weak=False)]
]
op706.node.kernel = extern_kernels.mm


op707: SchedulerNode(ComputedBuffer)
op707.writes = [MemoryDep('buf707', c0, {c0: 61440})]
op707.unmet_dependencies = [MemoryDep('buf687', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op707.met_dependencies = []
op707.outputs = [
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf707.users = [NodeUser(node=SchedulerNode(name='op708'), can_inplace=False, is_weak=False)]
]
op707.group.device = cuda:0
op707.group.iteration = (61440, 256)
op707.sizes = ([80, 768], [256])
buf687_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf707_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op707_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf687', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf707', get_index_1, reduction)
        return None


op708: SchedulerNode(ComputedBuffer)
op708.writes = [MemoryDep('buf708', c0, {c0: 768})]
op708.unmet_dependencies = [MemoryDep('buf707', c0 + 768*c1, {c0: 768, c1: 80})]
op708.met_dependencies = []
op708.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf708.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op708.group.device = cuda:0
op708.group.iteration = (768, 80)
op708.sizes = ([768], [80])
buf707_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf708_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op708_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf707', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf708', get_index_1, reduction)
        return None


op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 589824})]
op709.unmet_dependencies = [MemoryDep('buf706', c0, {c0: 589824})]
op709.met_dependencies = []
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf709.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op709.group.device = cuda:0
op709.group.iteration = (589824, 1)
op709.sizes = ([589824], [])
buf706_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf709_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op709_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf709', get_index_1, to_dtype, None)
        return store


op710: SchedulerNode(ComputedBuffer)
op710.writes = [MemoryDep('buf710', c0, {c0: 15728640})]
op710.unmet_dependencies = [   MemoryDep('buf696', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op710.met_dependencies = []
op710.outputs = [
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf710.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op710.group.device = cuda:0
op710.group.iteration = (15728640, 1)
op710.sizes = ([1024, 20, 768], [])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf710_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op710_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf710', get_index_1, load, None)
        return store


op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', c0, {c0: 15728640})]
op711.unmet_dependencies = [   MemoryDep('buf696', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op711.met_dependencies = []
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf711.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op711.group.device = cuda:0
op711.group.iteration = (15728640, 1)
op711.sizes = ([1024, 20, 768], [])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf711_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op711_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf711', get_index_1, load, None)
        return store


op712: SchedulerNode(ComputedBuffer)
op712.writes = [MemoryDep('buf712', c0, {c0: 15728640})]
op712.unmet_dependencies = [   MemoryDep('buf696', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op712.met_dependencies = []
op712.outputs = [
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf712.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op712.group.device = cuda:0
op712.group.iteration = (15728640, 1)
op712.sizes = ([1024, 20, 768], [])
buf696_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf712_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op712_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf696', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf712', get_index_1, load, None)
        return store


op713: ExternKernelSchedulerNode(FallbackKernel)
op713.writes = [StarDep(name='buf713', mode=None)]
op713.unmet_dependencies = 
    [   StarDep(name='buf689', mode=None),
        StarDep(name='buf701', mode=None),
        StarDep(name='buf702', mode=None),
        StarDep(name='buf703', mode=None),
        StarDep(name='buf704', mode=None),
        StarDep(name='buf710', mode=None),
        StarDep(name='buf711', mode=None),
        StarDep(name='buf712', mode=None)]
op713.met_dependencies = []
op713.outputs = [
    buf713: FallbackKernel
    buf713.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf713.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op714'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op716'), can_inplace=False, is_weak=False),
    ]
]
op713.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op714: ExternKernelSchedulerNode(MultiOutput)
op714.writes = [StarDep(name='buf714', mode=None)]
op714.unmet_dependencies = [StarDep(name='buf713', mode=None)]
op714.met_dependencies = []
op714.outputs = [
    buf714: MultiOutput
    buf714.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf714.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
    ]
]
op714.node.kernel = None


op715: ExternKernelSchedulerNode(MultiOutput)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf713', mode=None)]
op715.met_dependencies = []
op715.outputs = [
    buf715: MultiOutput
    buf715.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf715.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
    ]
]
op715.node.kernel = None


op716: ExternKernelSchedulerNode(MultiOutput)
op716.writes = [StarDep(name='buf716', mode=None)]
op716.unmet_dependencies = [StarDep(name='buf713', mode=None)]
op716.met_dependencies = []
op716.outputs = [
    buf716: MultiOutput
    buf716.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf716.users = [
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
    ]
]
op716.node.kernel = None


op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 73728})]
op717.unmet_dependencies = 
    [   MemoryDep('buf714', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf715', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf716', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op717.met_dependencies = []
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf717.users = [NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
]
op717.group.device = cuda:0
op717.group.iteration = (73728, 640)
op717.sizes = ([32, 2304], [640])
buf716_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf715_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf714_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf717_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op717_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf716', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf715', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf714', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf717', get_index_6, reduction)
        return None


op718: SchedulerNode(ComputedBuffer)
op718.writes = [MemoryDep('buf718', c0, {c0: 2304})]
op718.unmet_dependencies = [MemoryDep('buf717', c0 + 2304*c1, {c0: 2304, c1: 32})]
op718.met_dependencies = []
op718.outputs = [
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf718.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op718.group.device = cuda:0
op718.group.iteration = (2304, 32)
op718.sizes = ([2304], [32])
buf717_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf718_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op718_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf717', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf718', get_index_1, reduction)
        return None


op719: SchedulerNode(ComputedBuffer)
op719.writes = [MemoryDep('buf719', c0, {c0: 47185920})]
op719.unmet_dependencies = 
    [   MemoryDep('buf714', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf715', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf716', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op719.met_dependencies = []
op719.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf719.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op719.group.device = cuda:0
op719.group.iteration = (47185920, 1)
op719.sizes = ([1024, 20, 3, 768], [])
buf716_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf715_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf714_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf719_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op719_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf716', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf715', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf714', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf719', get_index_6, add_1, None)
        return store


op720: ExternKernelSchedulerNode(ExternKernelOut)
op720.writes = [StarDep(name='buf720', mode=None)]
op720.unmet_dependencies = [StarDep(name='buf694', mode=None), StarDep(name='buf719', mode=None)]
op720.met_dependencies = []
op720.outputs = [
    buf720: ExternKernelOut
    buf720.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf720.users = [NodeUser(node=SchedulerNode(name='op722'), can_inplace=True, is_weak=False)]
]
op720.node.kernel = extern_kernels.mm


op721: ExternKernelSchedulerNode(ExternKernelOut)
op721.writes = [StarDep(name='buf721', mode=None)]
op721.unmet_dependencies = [StarDep(name='buf693', mode=None), StarDep(name='buf719', mode=None)]
op721.met_dependencies = []
op721.outputs = [
    buf721: ExternKernelOut
    buf721.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf721.users = [
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op727'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
    ]
]
op721.node.kernel = extern_kernels.mm


op722: SchedulerNode(ComputedBuffer)
op722.writes = [MemoryDep('buf722', c0, {c0: 1769472})]
op722.unmet_dependencies = [MemoryDep('buf720', c0, {c0: 1769472})]
op722.met_dependencies = []
op722.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf722.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op722.group.device = cuda:0
op722.group.iteration = (1769472, 1)
op722.sizes = ([1769472], [])
buf720_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf722_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op722_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf720', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf722', get_index_1, to_dtype, None)
        return store


op723: SchedulerNode(ComputedBuffer)
op723.writes = [MemoryDep('buf723', c0, {c0: 20480})]
op723.unmet_dependencies = [MemoryDep('buf721', c0, {c0: 15728640})]
op723.met_dependencies = [MemoryDep('primals_29', c1, {c0: 20480, c1: 768})]
op723.outputs = [
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf723.users = [NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False)]
]
op723.group.device = cuda:0
op723.group.iteration = (20480, 768)
op723.sizes = ([20480], [768])
buf721_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf723_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op723_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_29', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf723', get_index_2, reduction)
        return None


op724: SchedulerNode(ComputedBuffer)
op724.writes = [MemoryDep('buf724', c0, {c0: 20480})]
op724.unmet_dependencies = 
    [   MemoryDep('buf690', c0, {c0: 20480}),
        MemoryDep('buf691', c0, {c0: 20480}),
        MemoryDep('buf721', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op724.met_dependencies = 
    [   MemoryDep('add_19', c0, {c0: 15728640}),
        MemoryDep('primals_29', c1, {c0: 20480, c1: 768})]
op724.outputs = [
    buf724: ComputedBuffer
    buf724.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf724.users = [NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False)]
]
op724.group.device = cuda:0
op724.group.iteration = (20480, 768)
op724.sizes = ([20, 1024], [768])
buf721_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_19_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf690_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf724_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op724_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_29', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_19', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf690', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf691', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf724', get_index_5, reduction)
        return None


op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 61440})]
op725.unmet_dependencies = 
    [   MemoryDep('buf690', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf691', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf721', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op725.met_dependencies = [MemoryDep('add_19', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf725.users = [NodeUser(node=SchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op725.group.device = cuda:0
op725.group.iteration = (61440, 256)
op725.sizes = ([80, 768], [256])
buf721_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_19_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf690_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf725_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op725_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_19', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf690', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf691', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf725', get_index_4, reduction)
        return None


op726: SchedulerNode(ComputedBuffer)
op726.writes = [MemoryDep('buf726', c0, {c0: 768})]
op726.unmet_dependencies = [MemoryDep('buf725', c0 + 768*c1, {c0: 768, c1: 80})]
op726.met_dependencies = []
op726.outputs = [
    buf726: ComputedBuffer
    buf726.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf726.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op726.group.device = cuda:0
op726.group.iteration = (768, 80)
op726.sizes = ([768], [80])
buf725_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf726_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op726_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf725', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf726', get_index_1, reduction)
        return None


op727: SchedulerNode(ComputedBuffer)
op727.writes = [MemoryDep('buf727', c0, {c0: 61440})]
op727.unmet_dependencies = [   MemoryDep('buf721', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op727.met_dependencies = []
op727.outputs = [
    buf727: ComputedBuffer
    buf727.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf727.users = [NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op727.group.device = cuda:0
op727.group.iteration = (61440, 256)
op727.sizes = ([80, 768], [256])
buf721_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf727_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op727_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf721', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf727', get_index_1, reduction)
        return None


op728: SchedulerNode(ComputedBuffer)
op728.writes = [MemoryDep('buf728', c0, {c0: 768})]
op728.unmet_dependencies = [MemoryDep('buf727', c0 + 768*c1, {c0: 768, c1: 80})]
op728.met_dependencies = []
op728.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf728.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op728.group.device = cuda:0
op728.group.iteration = (768, 80)
op728.sizes = ([768], [80])
buf727_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf728_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op728_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf727', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf728', get_index_1, reduction)
        return None


op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', c0, {c0: 15728640})]
op729.unmet_dependencies = 
    [   MemoryDep('buf686', c0, {c0: 15728640}),
        MemoryDep('buf690', c0, {c0: 20480}),
        MemoryDep('buf691', c0, {c0: 20480}),
        MemoryDep('buf721', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf723', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf724', c0, {c0: 20480})]
op729.met_dependencies = 
    [   MemoryDep('add_19', c0, {c0: 15728640}),
        MemoryDep('primals_29', c1, {c0: 20480, c1: 768})]
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf729.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op757'), can_inplace=True, is_weak=False),
    ]
]
op729.group.device = cuda:0
op729.group.iteration = (15728640, 1)
op729.sizes = ([20, 1024, 768], [])
buf686_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf691_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf721_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_29_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf723_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_19_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf690_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf724_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf729_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op729_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf686', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf691', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf721', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_29', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf723', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_19', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf690', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf691', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf724', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf729', get_index_9, add_2, None)
        return store


op730: SchedulerNode(ComputedBuffer)
op730.writes = [MemoryDep('buf730', c0, {c0: 15728640})]
op730.unmet_dependencies = []
op730.met_dependencies = [MemoryDep('inductor_seeds_default', 1, {})]
op730.outputs = [
    buf730: ComputedBuffer
    buf730.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf730.users = [NodeUser(node=SchedulerNode(name='op731'), can_inplace=True, is_weak=False)]
]
op730.group.device = cuda:0
op730.group.iteration = (15728640, 1)
op730.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf730_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op730_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 1
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 1)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf730', get_index_1, rand, None)
        return store


op731: SchedulerNode(ComputedBuffer)
op731.writes = [MemoryDep('buf731', c0, {c0: 15728640})]
op731.unmet_dependencies = 
    [   MemoryDep('buf729', c0, {c0: 15728640}),
        MemoryDep('buf730', c0, {c0: 15728640})]
op731.met_dependencies = []
op731.outputs = [
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf731.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
    ]
]
op731.group.device = cuda:0
op731.group.iteration = (15728640, 1)
op731.sizes = ([15728640], [])
buf729_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf730_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf731_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op731_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf729', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf730', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf731', get_index_2, mul_1, None)
        return store


op732: SchedulerNode(ComputedBuffer)
op732.writes = [MemoryDep('buf732', c0, {c0: 1179648})]
op732.unmet_dependencies = []
op732.met_dependencies = [MemoryDep('primals_27', c0, {c0: 1179648})]
op732.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf732.users = [NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False)]
]
op732.group.device = cuda:0
op732.group.iteration = (1179648, 1)
op732.sizes = ([1179648], [])
primals_27_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf732_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op732_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_27', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf732', get_index_1, to_dtype, None)
        return store


op733: ExternKernelSchedulerNode(ExternKernelOut)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf731', mode=None), StarDep(name='buf732', mode=None)]
op733.met_dependencies = []
op733.outputs = [
    buf733: ExternKernelOut
    buf733.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf733.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=True, is_weak=False)]
]
op733.node.kernel = extern_kernels.mm


op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 20480})]
op734.unmet_dependencies = []
op734.met_dependencies = [MemoryDep('add_15', c0, {c0: 15728640})]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf734.users = [
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op757'), can_inplace=False, is_weak=False),
    ]
]
op734.group.device = cuda:0
op734.group.iteration = (20480, 768)
op734.sizes = ([20480], [768])
add_15_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf734_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op734_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_15', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf734', get_index_1, getitem)
        return store_reduction


op735: SchedulerNode(ComputedBuffer)
op735.writes = [MemoryDep('buf735', c0, {c0: 20480})]
op735.unmet_dependencies = []
op735.met_dependencies = [MemoryDep('add_15', c0, {c0: 15728640})]
op735.outputs = [
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf735.users = [
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op757'), can_inplace=False, is_weak=False),
    ]
]
op735.group.device = cuda:0
op735.group.iteration = (20480, 768)
op735.sizes = ([20480], [768])
add_15_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf735_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op735_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_15', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf735', get_index_1, getitem_1)
        return store_reduction


op737: SchedulerNode(ComputedBuffer)
op737.writes = [MemoryDep('buf737', c0, {c0: 15728640})]
op737.unmet_dependencies = [MemoryDep('buf734', c0, {c0: 20480}), MemoryDep('buf735', c0, {c0: 20480})]
op737.met_dependencies = 
    [   MemoryDep('add_15', c0, {c0: 15728640}),
        MemoryDep('primals_23', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_24', c1, {c0: 20480, c1: 768})]
op737.outputs = [
    buf737: ComputedBuffer
    buf737.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf737.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False),
    ]
]
op737.group.device = cuda:0
op737.group.iteration = (15728640, 1)
op737.sizes = ([20480, 768], [])
add_15_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf734_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf735_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_24_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf737_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op737_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf734', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf735', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_23', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_24', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf737', get_index_5, to_dtype, None)
        return store


op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 1179648})]
op738.unmet_dependencies = []
op738.met_dependencies = [MemoryDep('primals_25', c0, {c0: 1179648})]
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf738.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
]
op738.group.device = cuda:0
op738.group.iteration = (1179648, 1)
op738.sizes = ([1179648], [])
primals_25_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf738_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op738_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_25', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf738', get_index_1, to_dtype, None)
        return store


op739: ExternKernelSchedulerNode(ExternKernelOut)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf737', mode=None), StarDep(name='buf738', mode=None)]
op739.met_dependencies = []
op739.outputs = [
    buf739: ExternKernelOut
    buf739.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf739.users = [
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=True, is_weak=False),
    ]
]
op739.node.kernel = extern_kernels.mm


op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', c0, {c0: 31457280})]
op740.unmet_dependencies = [MemoryDep('buf739', c0, {c0: 31457280})]
op740.met_dependencies = [MemoryDep('primals_26', c1, {c0: 20480, c1: 1536})]
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf740.users = [NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False)]
]
op740.group.device = cuda:0
op740.group.iteration = (31457280, 1)
op740.sizes = ([20480, 1536], [])
buf739_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf740_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op740_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_26', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf739', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_26', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf740', get_index_4, to_dtype_4, None)
        return store


op741: ExternKernelSchedulerNode(ExternKernelOut)
op741.writes = [StarDep(name='buf741', mode=None)]
op741.unmet_dependencies = [StarDep(name='buf731', mode=None), StarDep(name='buf740', mode=None)]
op741.met_dependencies = []
op741.outputs = [
    buf741: ExternKernelOut
    buf741.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf741.users = [NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False)]
]
op741.node.kernel = extern_kernels.mm


op742: SchedulerNode(ComputedBuffer)
op742.writes = [MemoryDep('buf742', c0, {c0: 61440})]
op742.unmet_dependencies = [MemoryDep('buf731', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op742.met_dependencies = []
op742.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf742.users = [NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op742.group.device = cuda:0
op742.group.iteration = (61440, 256)
op742.sizes = ([80, 768], [256])
buf731_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf742_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op742_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf731', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf742', get_index_1, reduction)
        return None


op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 768})]
op743.unmet_dependencies = [MemoryDep('buf742', c0 + 768*c1, {c0: 768, c1: 80})]
op743.met_dependencies = []
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf743.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op743.group.device = cuda:0
op743.group.iteration = (768, 80)
op743.sizes = ([768], [80])
buf742_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf743_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op743_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf742', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf743', get_index_1, reduction)
        return None


op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 1179648})]
op744.unmet_dependencies = [MemoryDep('buf741', c0, {c0: 1179648})]
op744.met_dependencies = []
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf744.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op744.group.device = cuda:0
op744.group.iteration = (1179648, 1)
op744.sizes = ([1179648], [])
buf741_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf744_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op744_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf741', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf744', get_index_1, to_dtype, None)
        return store


op745: SchedulerNode(ComputedBuffer)
op745.writes = [MemoryDep('buf745', c0, {c0: 31457280})]
op745.unmet_dependencies = 
    [   MemoryDep('buf733', c0, {c0: 31457280}),
        MemoryDep('buf739', c0, {c0: 31457280})]
op745.met_dependencies = [MemoryDep('primals_26', c1, {c0: 20480, c1: 1536})]
op745.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf745.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op746'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
    ]
]
op745.group.device = cuda:0
op745.group.iteration = (31457280, 1)
op745.sizes = ([20480, 1536], [])
buf733_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf739_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_26_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf745_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op745_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf739', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_26', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf739', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_26', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf739', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_26', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf739', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_26', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf745', get_index_9, to_dtype_9, None)
        return store


op746: ExternKernelSchedulerNode(ExternKernelOut)
op746.writes = [StarDep(name='buf746', mode=None)]
op746.unmet_dependencies = [StarDep(name='buf738', mode=None), StarDep(name='buf745', mode=None)]
op746.met_dependencies = []
op746.outputs = [
    buf746: ExternKernelOut
    buf746.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf746.users = [
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op757'), can_inplace=True, is_weak=False),
    ]
]
op746.node.kernel = extern_kernels.mm


op747: ExternKernelSchedulerNode(ExternKernelOut)
op747.writes = [StarDep(name='buf747', mode=None)]
op747.unmet_dependencies = [StarDep(name='buf737', mode=None), StarDep(name='buf745', mode=None)]
op747.met_dependencies = []
op747.outputs = [
    buf747: ExternKernelOut
    buf747.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf747.users = [NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False)]
]
op747.node.kernel = extern_kernels.mm


op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 61440})]
op748.unmet_dependencies = [MemoryDep('buf745', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op748.met_dependencies = []
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf748.users = [NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False)]
]
op748.group.device = cuda:0
op748.group.iteration = (61440, 512)
op748.sizes = ([40, 1536], [512])
buf745_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf748_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op748_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf745', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf748', get_index_1, reduction)
        return None


op749: SchedulerNode(ComputedBuffer)
op749.writes = [MemoryDep('buf749', c0, {c0: 1536})]
op749.unmet_dependencies = [MemoryDep('buf748', c0 + 1536*c1, {c0: 1536, c1: 40})]
op749.met_dependencies = []
op749.outputs = [
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf749.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op749.group.device = cuda:0
op749.group.iteration = (1536, 40)
op749.sizes = ([1536], [40])
buf748_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf749_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op749_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf748', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf749', get_index_1, reduction)
        return None


op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 1179648})]
op750.unmet_dependencies = [MemoryDep('buf747', c0, {c0: 1179648})]
op750.met_dependencies = []
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf750.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op750.group.device = cuda:0
op750.group.iteration = (1179648, 1)
op750.sizes = ([1179648], [])
buf747_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf750_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op750_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf747', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf750', get_index_1, to_dtype, None)
        return store


op751: SchedulerNode(ComputedBuffer)
op751.writes = [MemoryDep('buf751', c0, {c0: 20480})]
op751.unmet_dependencies = [MemoryDep('buf746', c0, {c0: 15728640})]
op751.met_dependencies = [MemoryDep('primals_23', c1, {c0: 20480, c1: 768})]
op751.outputs = [
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf751.users = [NodeUser(node=SchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op751.group.device = cuda:0
op751.group.iteration = (20480, 768)
op751.sizes = ([20480], [768])
buf746_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf751_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op751_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_23', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf751', get_index_2, reduction)
        return None


op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', c0, {c0: 20480})]
op752.unmet_dependencies = 
    [   MemoryDep('buf734', c0, {c0: 20480}),
        MemoryDep('buf735', c0, {c0: 20480}),
        MemoryDep('buf746', c0, {c0: 15728640})]
op752.met_dependencies = 
    [   MemoryDep('add_15', c0, {c0: 15728640}),
        MemoryDep('primals_23', c1, {c0: 20480, c1: 768})]
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf752.users = [NodeUser(node=SchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op752.group.device = cuda:0
op752.group.iteration = (20480, 768)
op752.sizes = ([20480], [768])
buf746_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_15_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf734_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf735_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf752_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op752_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_23', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_15', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf734', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf735', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf752', get_index_5, reduction)
        return None


op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', c0, {c0: 61440})]
op753.unmet_dependencies = 
    [   MemoryDep('buf734', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf735', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf746', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op753.met_dependencies = [MemoryDep('add_15', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf753.users = [NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False)]
]
op753.group.device = cuda:0
op753.group.iteration = (61440, 256)
op753.sizes = ([80, 768], [256])
buf746_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_15_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf734_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf735_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf753_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op753_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_15', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf734', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf735', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf753', get_index_4, reduction)
        return None


op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 768})]
op754.unmet_dependencies = [MemoryDep('buf753', c0 + 768*c1, {c0: 768, c1: 80})]
op754.met_dependencies = []
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf754.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op754.group.device = cuda:0
op754.group.iteration = (768, 80)
op754.sizes = ([768], [80])
buf753_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf754_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op754_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf753', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf754', get_index_1, reduction)
        return None


op755: SchedulerNode(ComputedBuffer)
op755.writes = [MemoryDep('buf755', c0, {c0: 61440})]
op755.unmet_dependencies = [MemoryDep('buf746', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op755.met_dependencies = []
op755.outputs = [
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf755.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op755.group.device = cuda:0
op755.group.iteration = (61440, 256)
op755.sizes = ([80, 768], [256])
buf746_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf755_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op755_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf746', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf755', get_index_1, reduction)
        return None


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', c0, {c0: 768})]
op756.unmet_dependencies = [MemoryDep('buf755', c0 + 768*c1, {c0: 768, c1: 80})]
op756.met_dependencies = []
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf756.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (768, 80)
op756.sizes = ([768], [80])
buf755_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf756_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op756_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf755', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf756', get_index_1, reduction)
        return None


op757: SchedulerNode(ComputedBuffer)
op757.writes = [MemoryDep('buf757', c0, {c0: 15728640})]
op757.unmet_dependencies = 
    [   MemoryDep('buf729', c0, {c0: 15728640}),
        MemoryDep('buf734', c0, {c0: 20480}),
        MemoryDep('buf735', c0, {c0: 20480}),
        MemoryDep('buf746', c0, {c0: 15728640}),
        MemoryDep('buf751', c0, {c0: 20480}),
        MemoryDep('buf752', c0, {c0: 20480})]
op757.met_dependencies = 
    [   MemoryDep('add_15', c0, {c0: 15728640}),
        MemoryDep('primals_23', c1, {c0: 20480, c1: 768})]
op757.outputs = [
    buf757: ComputedBuffer
    buf757.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf757.users = [
        NodeUser(node=SchedulerNode(name='op758'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=True, is_weak=False),
    ]
]
op757.group.device = cuda:0
op757.group.iteration = (15728640, 1)
op757.sizes = ([20480, 768], [])
buf729_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf735_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf746_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_23_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf751_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_15_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf734_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf752_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf757_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op757_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf729', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf735', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf746', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_23', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf751', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_15', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf734', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf735', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf752', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf757', get_index_9, add_2, None)
        return store


op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', c0, {c0: 15728640})]
op758.unmet_dependencies = [   MemoryDep('buf757', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op758.met_dependencies = []
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf758.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False),
    ]
]
op758.group.device = cuda:0
op758.group.iteration = (15728640, 1)
op758.sizes = ([20480, 768], [])
buf757_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf758_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op758_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf757', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf758', get_index_1, to_dtype, None)
        return store


op759: SchedulerNode(ComputedBuffer)
op759.writes = [MemoryDep('buf759', c0, {c0: 589824})]
op759.unmet_dependencies = []
op759.met_dependencies = [MemoryDep('primals_21', c0, {c0: 589824})]
op759.outputs = [
    buf759: ComputedBuffer
    buf759.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf759.users = [NodeUser(node=ExternKernelSchedulerNode(name='op760'), can_inplace=False, is_weak=False)]
]
op759.group.device = cuda:0
op759.group.iteration = (589824, 1)
op759.sizes = ([589824], [])
primals_21_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf759_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op759_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_21', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf759', get_index_1, to_dtype, None)
        return store


op760: ExternKernelSchedulerNode(ExternKernelOut)
op760.writes = [StarDep(name='buf760', mode=None)]
op760.unmet_dependencies = [StarDep(name='buf758', mode=None), StarDep(name='buf759', mode=None)]
op760.met_dependencies = []
op760.outputs = [
    buf760: ExternKernelOut
    buf760.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf760.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op760.node.kernel = extern_kernels.mm


op761: SchedulerNode(ComputedBuffer)
op761.writes = [MemoryDep('buf761', c0, {c0: 20480})]
op761.unmet_dependencies = []
op761.met_dependencies = [MemoryDep('add_11', c0, {c0: 15728640})]
op761.outputs = [
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf761.users = [
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
    ]
]
op761.group.device = cuda:0
op761.group.iteration = (20480, 768)
op761.sizes = ([20480], [768])
add_11_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf761_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op761_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_11', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf761', get_index_1, getitem)
        return store_reduction


op762: SchedulerNode(ComputedBuffer)
op762.writes = [MemoryDep('buf762', c0, {c0: 20480})]
op762.unmet_dependencies = []
op762.met_dependencies = [MemoryDep('add_11', c0, {c0: 15728640})]
op762.outputs = [
    buf762: ComputedBuffer
    buf762.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf762.users = [
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
    ]
]
op762.group.device = cuda:0
op762.group.iteration = (20480, 768)
op762.sizes = ([20480], [768])
add_11_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op762_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_11', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf762', get_index_1, getitem_1)
        return store_reduction


op764: SchedulerNode(ComputedBuffer)
op764.writes = [MemoryDep('buf764', c0, {c0: 1769472})]
op764.unmet_dependencies = []
op764.met_dependencies = [MemoryDep('primals_20', c0, {c0: 1769472})]
op764.outputs = [
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf764.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False),
    ]
]
op764.group.device = cuda:0
op764.group.iteration = (1769472, 1)
op764.sizes = ([1769472], [])
primals_20_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf764_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op764_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_20', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf764', get_index_1, to_dtype, None)
        return store


op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op765.unmet_dependencies = [MemoryDep('buf761', c0, {c0: 20480}), MemoryDep('buf762', c0, {c0: 20480})]
op765.met_dependencies = 
    [   MemoryDep('add_11', c0, {c0: 15728640}),
        MemoryDep('primals_17', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_18', c1, {c0: 20480, c1: 768})]
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf765.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op791'), can_inplace=False, is_weak=False),
    ]
]
op765.group.device = cuda:0
op765.group.iteration = (15728640, 1)
op765.sizes = ([20, 1024, 768], [])
add_11_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf761_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_18_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf765_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op765_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = p2
    index3 = 768*p0 + 15360*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf761', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf762', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_17', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_18', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf765', get_index_5, to_dtype, None)
        return store


op766: ExternKernelSchedulerNode(ExternKernelOut)
op766.writes = [StarDep(name='buf766', mode=None)]
op766.unmet_dependencies = [StarDep(name='buf764', mode=None), StarDep(name='buf765', mode=None)]
op766.met_dependencies = []
op766.outputs = [
    buf766: ExternKernelOut
    buf766.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf766.users = [NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False)]
]
op766.node.kernel = extern_kernels.mm


op767: SchedulerNode(ComputedBuffer)
op767.writes = [MemoryDep('buf767', c0, {c0: 47185920})]
op767.unmet_dependencies = [MemoryDep('buf766', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op767.met_dependencies = [MemoryDep('primals_19', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op767.outputs = [
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf767.users = [
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op781'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False),
    ]
]
op767.group.device = cuda:0
op767.group.iteration = (47185920, 1)
op767.sizes = ([3, 20480, 768], [])
buf766_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_19_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op767_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf766', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_19', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf767', get_index_2, add, None)
        return store


op768: SchedulerNode(ComputedBuffer)
op768.writes = [MemoryDep('buf768', c0, {c0: 15728640})]
op768.unmet_dependencies = [   MemoryDep('buf767', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op768.met_dependencies = []
op768.outputs = [
    buf768: ComputedBuffer
    buf768.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf768.users = [NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False)]
]
op768.group.device = cuda:0
op768.group.iteration = (15728640, 1)
op768.sizes = ([1024, 20, 768], [])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf768_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op768_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf768', get_index_1, load, None)
        return store


op769: SchedulerNode(ComputedBuffer)
op769.writes = [MemoryDep('buf769', c0, {c0: 15728640})]
op769.unmet_dependencies = [   MemoryDep('buf767', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op769.met_dependencies = []
op769.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf769.users = [NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False)]
]
op769.group.device = cuda:0
op769.group.iteration = (15728640, 1)
op769.sizes = ([1024, 20, 768], [])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf769_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op769_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf769', get_index_1, load, None)
        return store


op770: SchedulerNode(ComputedBuffer)
op770.writes = [MemoryDep('buf770', c0, {c0: 15728640})]
op770.unmet_dependencies = [   MemoryDep('buf767', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op770.met_dependencies = []
op770.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf770.users = [NodeUser(node=ExternKernelSchedulerNode(name='op771'), can_inplace=False, is_weak=False)]
]
op770.group.device = cuda:0
op770.group.iteration = (15728640, 1)
op770.sizes = ([1024, 20, 768], [])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf770_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op770_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf770', get_index_1, load, None)
        return store


op771: ExternKernelSchedulerNode(FallbackKernel)
op771.writes = [StarDep(name='buf771', mode=None)]
op771.unmet_dependencies = 
    [   StarDep(name='buf768', mode=None),
        StarDep(name='buf769', mode=None),
        StarDep(name='buf770', mode=None)]
op771.met_dependencies = [StarDep(name='bwd_rng_state_1', mode=None)]
op771.outputs = [
    buf771: FallbackKernel
    buf771.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf771.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op773'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op774'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op775'), can_inplace=False, is_weak=False),
    ]
]
op771.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op772: ExternKernelSchedulerNode(MultiOutput)
op772.writes = [StarDep(name='buf772', mode=None)]
op772.unmet_dependencies = [StarDep(name='buf771', mode=None)]
op772.met_dependencies = []
op772.outputs = [
    buf772: MultiOutput
    buf772.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf772.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op777'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False),
    ]
]
op772.node.kernel = None


op773: ExternKernelSchedulerNode(MultiOutput)
op773.writes = [StarDep(name='buf773', mode=None)]
op773.unmet_dependencies = [StarDep(name='buf771', mode=None)]
op773.met_dependencies = []
op773.outputs = [
    buf773: MultiOutput
    buf773.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf773.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op773.node.kernel = None


op774: ExternKernelSchedulerNode(MultiOutput)
op774.writes = [StarDep(name='buf774', mode=None)]
op774.unmet_dependencies = [StarDep(name='buf771', mode=None)]
op774.met_dependencies = []
op774.outputs = [
    buf774: MultiOutput
    buf774.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf774.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op774.node.kernel = None


op775: ExternKernelSchedulerNode(MultiOutput)
op775.writes = [StarDep(name='buf775', mode=None)]
op775.unmet_dependencies = [StarDep(name='buf771', mode=None)]
op775.met_dependencies = []
op775.outputs = [
    buf775: MultiOutput
    buf775.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf775.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op775.node.kernel = None


op777: ExternKernelSchedulerNode(ExternKernelOut)
op777.writes = [StarDep(name='buf777', mode=None)]
op777.unmet_dependencies = [StarDep(name='buf758', mode=None), StarDep(name='buf772', mode=None)]
op777.met_dependencies = []
op777.outputs = [
    buf777: ExternKernelOut
    buf777.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf777.users = [NodeUser(node=SchedulerNode(name='op780'), can_inplace=True, is_weak=False)]
]
op777.node.kernel = extern_kernels.mm


op778: SchedulerNode(ComputedBuffer)
op778.writes = [MemoryDep('buf778', c0, {c0: 61440})]
op778.unmet_dependencies = [MemoryDep('buf758', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op778.met_dependencies = []
op778.outputs = [
    buf778: ComputedBuffer
    buf778.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf778.users = [NodeUser(node=SchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op778.group.device = cuda:0
op778.group.iteration = (61440, 256)
op778.sizes = ([80, 768], [256])
buf758_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf778_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op778_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf758', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf778', get_index_1, reduction)
        return None


op779: SchedulerNode(ComputedBuffer)
op779.writes = [MemoryDep('buf779', c0, {c0: 768})]
op779.unmet_dependencies = [MemoryDep('buf778', c0 + 768*c1, {c0: 768, c1: 80})]
op779.met_dependencies = []
op779.outputs = [
    buf779: ComputedBuffer
    buf779.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf779.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op779.group.device = cuda:0
op779.group.iteration = (768, 80)
op779.sizes = ([768], [80])
buf778_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf779_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op779_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf778', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf779', get_index_1, reduction)
        return None


op780: SchedulerNode(ComputedBuffer)
op780.writes = [MemoryDep('buf780', c0, {c0: 589824})]
op780.unmet_dependencies = [MemoryDep('buf777', c0, {c0: 589824})]
op780.met_dependencies = []
op780.outputs = [
    buf780: ComputedBuffer
    buf780.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf780.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op780.group.device = cuda:0
op780.group.iteration = (589824, 1)
op780.sizes = ([589824], [])
buf777_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf780_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op780_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf777', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf780', get_index_1, to_dtype, None)
        return store


op781: SchedulerNode(ComputedBuffer)
op781.writes = [MemoryDep('buf781', c0, {c0: 15728640})]
op781.unmet_dependencies = [   MemoryDep('buf767', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op781.met_dependencies = []
op781.outputs = [
    buf781: ComputedBuffer
    buf781.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf781.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op781.group.device = cuda:0
op781.group.iteration = (15728640, 1)
op781.sizes = ([1024, 20, 768], [])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf781_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op781_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf781', get_index_1, load, None)
        return store


op782: SchedulerNode(ComputedBuffer)
op782.writes = [MemoryDep('buf782', c0, {c0: 15728640})]
op782.unmet_dependencies = [   MemoryDep('buf767', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op782.met_dependencies = []
op782.outputs = [
    buf782: ComputedBuffer
    buf782.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf782.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op782.group.device = cuda:0
op782.group.iteration = (15728640, 1)
op782.sizes = ([1024, 20, 768], [])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf782_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op782_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf782', get_index_1, load, None)
        return store


op783: SchedulerNode(ComputedBuffer)
op783.writes = [MemoryDep('buf783', c0, {c0: 15728640})]
op783.unmet_dependencies = [   MemoryDep('buf767', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op783.met_dependencies = []
op783.outputs = [
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf783.users = [NodeUser(node=ExternKernelSchedulerNode(name='op784'), can_inplace=False, is_weak=False)]
]
op783.group.device = cuda:0
op783.group.iteration = (15728640, 1)
op783.sizes = ([1024, 20, 768], [])
buf767_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf783_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op783_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf767', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf783', get_index_1, load, None)
        return store


op784: ExternKernelSchedulerNode(FallbackKernel)
op784.writes = [StarDep(name='buf784', mode=None)]
op784.unmet_dependencies = 
    [   StarDep(name='buf760', mode=None),
        StarDep(name='buf772', mode=None),
        StarDep(name='buf773', mode=None),
        StarDep(name='buf774', mode=None),
        StarDep(name='buf775', mode=None),
        StarDep(name='buf781', mode=None),
        StarDep(name='buf782', mode=None),
        StarDep(name='buf783', mode=None)]
op784.met_dependencies = []
op784.outputs = [
    buf784: FallbackKernel
    buf784.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf784.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
]
op784.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op785: ExternKernelSchedulerNode(MultiOutput)
op785.writes = [StarDep(name='buf785', mode=None)]
op785.unmet_dependencies = [StarDep(name='buf784', mode=None)]
op785.met_dependencies = []
op785.outputs = [
    buf785: MultiOutput
    buf785.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf785.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op785.node.kernel = None


op786: ExternKernelSchedulerNode(MultiOutput)
op786.writes = [StarDep(name='buf786', mode=None)]
op786.unmet_dependencies = [StarDep(name='buf784', mode=None)]
op786.met_dependencies = []
op786.outputs = [
    buf786: MultiOutput
    buf786.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf786.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op786.node.kernel = None


op787: ExternKernelSchedulerNode(MultiOutput)
op787.writes = [StarDep(name='buf787', mode=None)]
op787.unmet_dependencies = [StarDep(name='buf784', mode=None)]
op787.met_dependencies = []
op787.outputs = [
    buf787: MultiOutput
    buf787.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf787.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op787.node.kernel = None


op788: SchedulerNode(ComputedBuffer)
op788.writes = [MemoryDep('buf788', c0, {c0: 73728})]
op788.unmet_dependencies = 
    [   MemoryDep('buf785', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf786', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf787', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op788.met_dependencies = []
op788.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf788.users = [NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False)]
]
op788.group.device = cuda:0
op788.group.iteration = (73728, 640)
op788.sizes = ([32, 2304], [640])
buf787_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf786_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf785_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf788_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op788_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf787', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf786', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf785', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf788', get_index_6, reduction)
        return None


op789: SchedulerNode(ComputedBuffer)
op789.writes = [MemoryDep('buf789', c0, {c0: 2304})]
op789.unmet_dependencies = [MemoryDep('buf788', c0 + 2304*c1, {c0: 2304, c1: 32})]
op789.met_dependencies = []
op789.outputs = [
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf789.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op789.group.device = cuda:0
op789.group.iteration = (2304, 32)
op789.sizes = ([2304], [32])
buf788_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf789_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op789_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf788', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf789', get_index_1, reduction)
        return None


op790: SchedulerNode(ComputedBuffer)
op790.writes = [MemoryDep('buf790', c0, {c0: 47185920})]
op790.unmet_dependencies = 
    [   MemoryDep('buf785', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf786', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf787', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op790.met_dependencies = []
op790.outputs = [
    buf790: ComputedBuffer
    buf790.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf790.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op791'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op792'), can_inplace=False, is_weak=False),
    ]
]
op790.group.device = cuda:0
op790.group.iteration = (47185920, 1)
op790.sizes = ([1024, 20, 3, 768], [])
buf787_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf786_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf785_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf790_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op790_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf787', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf786', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf785', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf790', get_index_6, add_1, None)
        return store


op791: ExternKernelSchedulerNode(ExternKernelOut)
op791.writes = [StarDep(name='buf791', mode=None)]
op791.unmet_dependencies = [StarDep(name='buf765', mode=None), StarDep(name='buf790', mode=None)]
op791.met_dependencies = []
op791.outputs = [
    buf791: ExternKernelOut
    buf791.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf791.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
]
op791.node.kernel = extern_kernels.mm


op792: ExternKernelSchedulerNode(ExternKernelOut)
op792.writes = [StarDep(name='buf792', mode=None)]
op792.unmet_dependencies = [StarDep(name='buf764', mode=None), StarDep(name='buf790', mode=None)]
op792.met_dependencies = []
op792.outputs = [
    buf792: ExternKernelOut
    buf792.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf792.users = [
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
    ]
]
op792.node.kernel = extern_kernels.mm


op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 1769472})]
op793.unmet_dependencies = [MemoryDep('buf791', c0, {c0: 1769472})]
op793.met_dependencies = []
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf793.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op793.group.device = cuda:0
op793.group.iteration = (1769472, 1)
op793.sizes = ([1769472], [])
buf791_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf793_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op793_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf791', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf793', get_index_1, to_dtype, None)
        return store


op794: SchedulerNode(ComputedBuffer)
op794.writes = [MemoryDep('buf794', c0, {c0: 20480})]
op794.unmet_dependencies = [MemoryDep('buf792', c0, {c0: 15728640})]
op794.met_dependencies = [MemoryDep('primals_17', c1, {c0: 20480, c1: 768})]
op794.outputs = [
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf794.users = [NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op794.group.device = cuda:0
op794.group.iteration = (20480, 768)
op794.sizes = ([20480], [768])
buf792_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf794_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op794_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf792', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_17', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf794', get_index_2, reduction)
        return None


op795: SchedulerNode(ComputedBuffer)
op795.writes = [MemoryDep('buf795', c0, {c0: 20480})]
op795.unmet_dependencies = 
    [   MemoryDep('buf761', c0, {c0: 20480}),
        MemoryDep('buf762', c0, {c0: 20480}),
        MemoryDep('buf792', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op795.met_dependencies = 
    [   MemoryDep('add_11', c0, {c0: 15728640}),
        MemoryDep('primals_17', c1, {c0: 20480, c1: 768})]
op795.outputs = [
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf795.users = [NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op795.group.device = cuda:0
op795.group.iteration = (20480, 768)
op795.sizes = ([20, 1024], [768])
buf792_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_11_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf761_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf795_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op795_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf792', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_17', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('add_11', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf761', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf762', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf795', get_index_5, reduction)
        return None


op796: SchedulerNode(ComputedBuffer)
op796.writes = [MemoryDep('buf796', c0, {c0: 61440})]
op796.unmet_dependencies = 
    [   MemoryDep('buf761', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf762', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf792', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op796.met_dependencies = [MemoryDep('add_11', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op796.outputs = [
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf796.users = [NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False)]
]
op796.group.device = cuda:0
op796.group.iteration = (61440, 256)
op796.sizes = ([80, 768], [256])
buf792_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_11_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf761_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf796_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op796_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 256*p0 + p2
    index3 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf792', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('add_11', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf761', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf762', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf796', get_index_4, reduction)
        return None


op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 768})]
op797.unmet_dependencies = [MemoryDep('buf796', c0 + 768*c1, {c0: 768, c1: 80})]
op797.met_dependencies = []
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf797.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op797.group.device = cuda:0
op797.group.iteration = (768, 80)
op797.sizes = ([768], [80])
buf796_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf797_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op797_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf796', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf797', get_index_1, reduction)
        return None


op798: SchedulerNode(ComputedBuffer)
op798.writes = [MemoryDep('buf798', c0, {c0: 61440})]
op798.unmet_dependencies = [   MemoryDep('buf792', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op798.met_dependencies = []
op798.outputs = [
    buf798: ComputedBuffer
    buf798.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf798.users = [NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False)]
]
op798.group.device = cuda:0
op798.group.iteration = (61440, 256)
op798.sizes = ([80, 768], [256])
buf792_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf798_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op798_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf792', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf798', get_index_1, reduction)
        return None


op799: SchedulerNode(ComputedBuffer)
op799.writes = [MemoryDep('buf799', c0, {c0: 768})]
op799.unmet_dependencies = [MemoryDep('buf798', c0 + 768*c1, {c0: 768, c1: 80})]
op799.met_dependencies = []
op799.outputs = [
    buf799: ComputedBuffer
    buf799.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf799.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op799.group.device = cuda:0
op799.group.iteration = (768, 80)
op799.sizes = ([768], [80])
buf798_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf799_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op799_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf798', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf799', get_index_1, reduction)
        return None


op800: SchedulerNode(ComputedBuffer)
op800.writes = [MemoryDep('buf800', c0, {c0: 15728640})]
op800.unmet_dependencies = 
    [   MemoryDep('buf757', c0, {c0: 15728640}),
        MemoryDep('buf761', c0, {c0: 20480}),
        MemoryDep('buf762', c0, {c0: 20480}),
        MemoryDep('buf792', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf794', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf795', c0, {c0: 20480})]
op800.met_dependencies = 
    [   MemoryDep('add_11', c0, {c0: 15728640}),
        MemoryDep('primals_17', c1, {c0: 20480, c1: 768})]
op800.outputs = [
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf800.users = [
        NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=True, is_weak=False),
    ]
]
op800.group.device = cuda:0
op800.group.iteration = (15728640, 1)
op800.sizes = ([20, 1024, 768], [])
buf757_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf762_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf792_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_17_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf794_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
add_11_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf761_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf795_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf800_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op800_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf757', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf762', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf792', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_17', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf794', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_11', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf761', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf762', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf795', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf800', get_index_9, add_2, None)
        return store


op801: SchedulerNode(ComputedBuffer)
op801.writes = [MemoryDep('buf801', c0, {c0: 15728640})]
op801.unmet_dependencies = []
op801.met_dependencies = [MemoryDep('inductor_seeds_default', 0, {})]
op801.outputs = [
    buf801: ComputedBuffer
    buf801.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf801.users = [NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False)]
]
op801.group.device = cuda:0
op801.group.iteration = (15728640, 1)
op801.sizes = ([15728640], [])
inductor_seeds_default_layout = FixedLayout('cuda:0', torch.int64, size=[12], stride=[1])
buf801_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op801_loop_body:
    var_ranges = {p0: 15728640}
    index0 = 0
    index1 = p0
    def body(self, ops):
        load_seed = ops.load_seed('inductor_seeds_default', 0)
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        rand = ops.rand(load_seed, index_expr)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf801', get_index_1, rand, None)
        return store


op802: SchedulerNode(ComputedBuffer)
op802.writes = [MemoryDep('buf802', c0, {c0: 15728640})]
op802.unmet_dependencies = 
    [   MemoryDep('buf800', c0, {c0: 15728640}),
        MemoryDep('buf801', c0, {c0: 15728640})]
op802.met_dependencies = []
op802.outputs = [
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf802.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op804'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op812'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op813'), can_inplace=False, is_weak=False),
    ]
]
op802.group.device = cuda:0
op802.group.iteration = (15728640, 1)
op802.sizes = ([15728640], [])
buf800_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf801_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf802_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op802_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf800', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf801', get_index_1)
        to_dtype_1 = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        constant = ops.constant(0.2, torch.float16)
        gt = ops.gt(to_dtype_1, constant)
        to_dtype_2 = ops.to_dtype(gt, torch.float16, src_dtype = torch.bool)
        constant_1 = ops.constant(1.25, torch.float16)
        mul = ops.mul(to_dtype_2, constant_1)
        mul_1 = ops.mul(to_dtype, mul)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf802', get_index_2, mul_1, None)
        return store


op803: SchedulerNode(ComputedBuffer)
op803.writes = [MemoryDep('buf803', c0, {c0: 1179648})]
op803.unmet_dependencies = []
op803.met_dependencies = [MemoryDep('primals_15', c0, {c0: 1179648})]
op803.outputs = [
    buf803: ComputedBuffer
    buf803.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf803.users = [NodeUser(node=ExternKernelSchedulerNode(name='op804'), can_inplace=False, is_weak=False)]
]
op803.group.device = cuda:0
op803.group.iteration = (1179648, 1)
op803.sizes = ([1179648], [])
primals_15_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
buf803_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
class op803_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_15', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf803', get_index_1, to_dtype, None)
        return store


op804: ExternKernelSchedulerNode(ExternKernelOut)
op804.writes = [StarDep(name='buf804', mode=None)]
op804.unmet_dependencies = [StarDep(name='buf802', mode=None), StarDep(name='buf803', mode=None)]
op804.met_dependencies = []
op804.outputs = [
    buf804: ExternKernelOut
    buf804.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf804.users = [NodeUser(node=SchedulerNode(name='op816'), can_inplace=True, is_weak=False)]
]
op804.node.kernel = extern_kernels.mm


op805: SchedulerNode(ComputedBuffer)
op805.writes = [MemoryDep('buf805', c0, {c0: 20480})]
op805.unmet_dependencies = []
op805.met_dependencies = [MemoryDep('add_7', c0, {c0: 15728640})]
op805.outputs = [
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf805.users = [
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op823'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op824'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False),
    ]
]
op805.group.device = cuda:0
op805.group.iteration = (20480, 768)
op805.sizes = ([20480], [768])
add_7_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op805_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf805', get_index_1, getitem)
        return store_reduction


op806: SchedulerNode(ComputedBuffer)
op806.writes = [MemoryDep('buf806', c0, {c0: 20480})]
op806.unmet_dependencies = []
op806.met_dependencies = [MemoryDep('add_7', c0, {c0: 15728640})]
op806.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf806.users = [
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op823'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op824'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False),
    ]
]
op806.group.device = cuda:0
op806.group.iteration = (20480, 768)
op806.sizes = ([20480], [768])
add_7_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf806_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op806_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf806', get_index_1, getitem_1)
        return store_reduction


op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 15728640})]
op808.unmet_dependencies = [MemoryDep('buf805', c0, {c0: 20480}), MemoryDep('buf806', c0, {c0: 20480})]
op808.met_dependencies = 
    [   MemoryDep('add_7', c0, {c0: 15728640}),
        MemoryDep('primals_11', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_12', c1, {c0: 20480, c1: 768})]
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf808.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op810'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op818'), can_inplace=False, is_weak=False),
    ]
]
op808.group.device = cuda:0
op808.group.iteration = (15728640, 1)
op808.sizes = ([20480, 768], [])
add_7_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf806_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_12_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf808_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op808_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('add_7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf805', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf806', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_11', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('primals_12', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        to_dtype = ops.to_dtype(add_1, torch.float16, src_dtype = torch.float32)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf808', get_index_5, to_dtype, None)
        return store


op809: SchedulerNode(ComputedBuffer)
op809.writes = [MemoryDep('buf809', c0, {c0: 1179648})]
op809.unmet_dependencies = []
op809.met_dependencies = [MemoryDep('primals_13', c0, {c0: 1179648})]
op809.outputs = [
    buf809: ComputedBuffer
    buf809.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
    buf809.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op810'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op817'), can_inplace=False, is_weak=False),
    ]
]
op809.group.device = cuda:0
op809.group.iteration = (1179648, 1)
op809.sizes = ([1179648], [])
primals_13_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
buf809_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1, 768])
class op809_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_13', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf809', get_index_1, to_dtype, None)
        return store


op810: ExternKernelSchedulerNode(ExternKernelOut)
op810.writes = [StarDep(name='buf810', mode=None)]
op810.unmet_dependencies = [StarDep(name='buf808', mode=None), StarDep(name='buf809', mode=None)]
op810.met_dependencies = []
op810.outputs = [
    buf810: ExternKernelOut
    buf810.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
    buf810.users = [
        NodeUser(node=SchedulerNode(name='op811'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op816'), can_inplace=True, is_weak=False),
    ]
]
op810.node.kernel = extern_kernels.mm


op811: SchedulerNode(ComputedBuffer)
op811.writes = [MemoryDep('buf811', c0, {c0: 31457280})]
op811.unmet_dependencies = [MemoryDep('buf810', c0, {c0: 31457280})]
op811.met_dependencies = [MemoryDep('primals_14', c1, {c0: 20480, c1: 1536})]
op811.outputs = [
    buf811: ComputedBuffer
    buf811.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf811.users = [NodeUser(node=ExternKernelSchedulerNode(name='op812'), can_inplace=False, is_weak=False)]
]
op811.group.device = cuda:0
op811.group.iteration = (31457280, 1)
op811.sizes = ([20480, 1536], [])
buf810_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf811_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op811_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf810', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_14', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(to_dtype_1, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf810', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('primals_14', get_index_3)
        to_dtype_2 = ops.to_dtype(load_3, torch.float16, src_dtype = torch.float32)
        add_1 = ops.add(load_2, to_dtype_2)
        to_dtype_3 = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(to_dtype_3, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        to_dtype_4 = ops.to_dtype(mul_2, torch.float16, src_dtype = torch.float32)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf811', get_index_4, to_dtype_4, None)
        return store


op812: ExternKernelSchedulerNode(ExternKernelOut)
op812.writes = [StarDep(name='buf812', mode=None)]
op812.unmet_dependencies = [StarDep(name='buf802', mode=None), StarDep(name='buf811', mode=None)]
op812.met_dependencies = []
op812.outputs = [
    buf812: ExternKernelOut
    buf812.layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
    buf812.users = [NodeUser(node=SchedulerNode(name='op815'), can_inplace=True, is_weak=False)]
]
op812.node.kernel = extern_kernels.mm


op813: SchedulerNode(ComputedBuffer)
op813.writes = [MemoryDep('buf813', c0, {c0: 61440})]
op813.unmet_dependencies = [MemoryDep('buf802', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op813.met_dependencies = []
op813.outputs = [
    buf813: ComputedBuffer
    buf813.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf813.users = [NodeUser(node=SchedulerNode(name='op814'), can_inplace=False, is_weak=False)]
]
op813.group.device = cuda:0
op813.group.iteration = (61440, 256)
op813.sizes = ([80, 768], [256])
buf802_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
buf813_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op813_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf802', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf813', get_index_1, reduction)
        return None


op814: SchedulerNode(ComputedBuffer)
op814.writes = [MemoryDep('buf814', c0, {c0: 768})]
op814.unmet_dependencies = [MemoryDep('buf813', c0 + 768*c1, {c0: 768, c1: 80})]
op814.met_dependencies = []
op814.outputs = [
    buf814: ComputedBuffer
    buf814.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf814.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op814.group.device = cuda:0
op814.group.iteration = (768, 80)
op814.sizes = ([768], [80])
buf813_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf814_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op814_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf813', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf814', get_index_1, reduction)
        return None


op815: SchedulerNode(ComputedBuffer)
op815.writes = [MemoryDep('buf815', c0, {c0: 1179648})]
op815.unmet_dependencies = [MemoryDep('buf812', c0, {c0: 1179648})]
op815.met_dependencies = []
op815.outputs = [
    buf815: ComputedBuffer
    buf815.layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
    buf815.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op815.group.device = cuda:0
op815.group.iteration = (1179648, 1)
op815.sizes = ([1179648], [])
buf812_layout = FixedLayout('cuda:0', torch.float16, size=[768, 1536], stride=[1536, 1])
buf815_layout = FixedLayout('cuda:0', torch.float32, size=[768, 1536], stride=[1536, 1])
class op815_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf812', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf815', get_index_1, to_dtype, None)
        return store


op816: SchedulerNode(ComputedBuffer)
op816.writes = [MemoryDep('buf816', c0, {c0: 31457280})]
op816.unmet_dependencies = 
    [   MemoryDep('buf804', c0, {c0: 31457280}),
        MemoryDep('buf810', c0, {c0: 31457280})]
op816.met_dependencies = [MemoryDep('primals_14', c1, {c0: 20480, c1: 1536})]
op816.outputs = [
    buf816: ComputedBuffer
    buf816.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
    buf816.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op817'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op818'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op819'), can_inplace=False, is_weak=False),
    ]
]
op816.group.device = cuda:0
op816.group.iteration = (31457280, 1)
op816.sizes = ([20480, 1536], [])
buf804_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
buf810_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 1536], stride=[1536, 1])
primals_14_layout = FixedLayout('cuda:0', torch.float32, size=[1536], stride=[1])
buf816_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
class op816_loop_body:
    var_ranges = {p0: 20480, p1: 1536}
    index0 = 1536*p0 + p1
    index1 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf804', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf810', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_14', get_index_2)
        to_dtype_1 = ops.to_dtype(load_2, torch.float16, src_dtype = torch.float32)
        add = ops.add(load_1, to_dtype_1)
        to_dtype_2 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        constant = ops.constant(0.7071067811865476, torch.float32)
        mul = ops.mul(to_dtype_2, constant)
        erf = ops.erf(mul)
        constant_1 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(erf, constant_1)
        constant_2 = ops.constant(0.5, torch.float32)
        mul_1 = ops.mul(add_1, constant_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf810', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('primals_14', get_index_4)
        to_dtype_3 = ops.to_dtype(load_4, torch.float16, src_dtype = torch.float32)
        add_2 = ops.add(load_3, to_dtype_3)
        to_dtype_4 = ops.to_dtype(add_2, torch.float32, src_dtype = torch.float16)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf810', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('primals_14', get_index_6)
        to_dtype_5 = ops.to_dtype(load_6, torch.float16, src_dtype = torch.float32)
        add_3 = ops.add(load_5, to_dtype_5)
        to_dtype_6 = ops.to_dtype(add_3, torch.float32, src_dtype = torch.float16)
        get_index_7 = self.get_index('index0')
        load_7 = ops.load('buf810', get_index_7)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('primals_14', get_index_8)
        to_dtype_7 = ops.to_dtype(load_8, torch.float16, src_dtype = torch.float32)
        add_4 = ops.add(load_7, to_dtype_7)
        to_dtype_8 = ops.to_dtype(add_4, torch.float32, src_dtype = torch.float16)
        mul_2 = ops.mul(to_dtype_6, to_dtype_8)
        constant_3 = ops.constant(-0.5, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        exp = ops.exp(mul_3)
        constant_4 = ops.constant(0.3989422804014327, torch.float32)
        mul_4 = ops.mul(exp, constant_4)
        mul_5 = ops.mul(to_dtype_4, mul_4)
        add_5 = ops.add(mul_1, mul_5)
        mul_6 = ops.mul(to_dtype, add_5)
        to_dtype_9 = ops.to_dtype(mul_6, torch.float16, src_dtype = torch.float32)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf816', get_index_9, to_dtype_9, None)
        return store


op817: ExternKernelSchedulerNode(ExternKernelOut)
op817.writes = [StarDep(name='buf817', mode=None)]
op817.unmet_dependencies = [StarDep(name='buf809', mode=None), StarDep(name='buf816', mode=None)]
op817.met_dependencies = []
op817.outputs = [
    buf817: ExternKernelOut
    buf817.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf817.users = [
        NodeUser(node=SchedulerNode(name='op822'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op823'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op824'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op826'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op828'), can_inplace=True, is_weak=False),
    ]
]
op817.node.kernel = extern_kernels.mm


op818: ExternKernelSchedulerNode(ExternKernelOut)
op818.writes = [StarDep(name='buf818', mode=None)]
op818.unmet_dependencies = [StarDep(name='buf808', mode=None), StarDep(name='buf816', mode=None)]
op818.met_dependencies = []
op818.outputs = [
    buf818: ExternKernelOut
    buf818.layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
    buf818.users = [NodeUser(node=SchedulerNode(name='op821'), can_inplace=True, is_weak=False)]
]
op818.node.kernel = extern_kernels.mm


op819: SchedulerNode(ComputedBuffer)
op819.writes = [MemoryDep('buf819', c0, {c0: 61440})]
op819.unmet_dependencies = [MemoryDep('buf816', 786432*c0 + c1 + 1536*c2, {c0: 40, c1: 1536, c2: 512})]
op819.met_dependencies = []
op819.outputs = [
    buf819: ComputedBuffer
    buf819.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
    buf819.users = [NodeUser(node=SchedulerNode(name='op820'), can_inplace=False, is_weak=False)]
]
op819.group.device = cuda:0
op819.group.iteration = (61440, 512)
op819.sizes = ([40, 1536], [512])
buf816_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 1536], stride=[1572864, 1536, 1])
buf819_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
class op819_loop_body:
    var_ranges = {p0: 40, p1: 1536, p2: 512}
    index0 = 786432*p0 + p1 + 1536*p2
    index1 = 1536*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf816', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf819', get_index_1, reduction)
        return None


op820: SchedulerNode(ComputedBuffer)
op820.writes = [MemoryDep('buf820', c0, {c0: 1536})]
op820.unmet_dependencies = [MemoryDep('buf819', c0 + 1536*c1, {c0: 1536, c1: 40})]
op820.met_dependencies = []
op820.outputs = [
    buf820: ComputedBuffer
    buf820.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
    buf820.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op820.group.device = cuda:0
op820.group.iteration = (1536, 40)
op820.sizes = ([1536], [40])
buf819_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536, 40], stride=[61440, 1, 1536])
buf820_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1536], stride=[1536, 1])
class op820_loop_body:
    var_ranges = {p0: 1536, p1: 40}
    index0 = p0 + 1536*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf819', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf820', get_index_1, reduction)
        return None


op821: SchedulerNode(ComputedBuffer)
op821.writes = [MemoryDep('buf821', c0, {c0: 1179648})]
op821.unmet_dependencies = [MemoryDep('buf818', c0, {c0: 1179648})]
op821.met_dependencies = []
op821.outputs = [
    buf821: ComputedBuffer
    buf821.layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
    buf821.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op821.group.device = cuda:0
op821.group.iteration = (1179648, 1)
op821.sizes = ([1179648], [])
buf818_layout = FixedLayout('cuda:0', torch.float16, size=[1536, 768], stride=[768, 1])
buf821_layout = FixedLayout('cuda:0', torch.float32, size=[1536, 768], stride=[768, 1])
class op821_loop_body:
    var_ranges = {p0: 1179648}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf818', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf821', get_index_1, to_dtype, None)
        return store


op822: SchedulerNode(ComputedBuffer)
op822.writes = [MemoryDep('buf822', c0, {c0: 20480})]
op822.unmet_dependencies = [MemoryDep('buf817', c0, {c0: 15728640})]
op822.met_dependencies = [MemoryDep('primals_11', c1, {c0: 20480, c1: 768})]
op822.outputs = [
    buf822: ComputedBuffer
    buf822.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf822.users = [NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False)]
]
op822.group.device = cuda:0
op822.group.iteration = (20480, 768)
op822.sizes = ([20480], [768])
buf817_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf822_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op822_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf817', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf822', get_index_2, reduction)
        return None


op823: SchedulerNode(ComputedBuffer)
op823.writes = [MemoryDep('buf823', c0, {c0: 20480})]
op823.unmet_dependencies = 
    [   MemoryDep('buf805', c0, {c0: 20480}),
        MemoryDep('buf806', c0, {c0: 20480}),
        MemoryDep('buf817', c0, {c0: 15728640})]
op823.met_dependencies = 
    [   MemoryDep('add_7', c0, {c0: 15728640}),
        MemoryDep('primals_11', c1, {c0: 20480, c1: 768})]
op823.outputs = [
    buf823: ComputedBuffer
    buf823.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf823.users = [NodeUser(node=SchedulerNode(name='op828'), can_inplace=False, is_weak=False)]
]
op823.group.device = cuda:0
op823.group.iteration = (20480, 768)
op823.sizes = ([20480], [768])
buf817_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
add_7_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf806_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf823_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op823_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf817', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_11', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('add_7', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf805', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf806', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul_1 = ops.mul(sub, rsqrt)
        mul_2 = ops.mul(mul, mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_2)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf823', get_index_5, reduction)
        return None


op824: SchedulerNode(ComputedBuffer)
op824.writes = [MemoryDep('buf824', c0, {c0: 61440})]
op824.unmet_dependencies = 
    [   MemoryDep('buf805', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf806', 256*c0 + c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf817', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op824.met_dependencies = [MemoryDep('add_7', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op824.outputs = [
    buf824: ComputedBuffer
    buf824.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf824.users = [NodeUser(node=SchedulerNode(name='op825'), can_inplace=False, is_weak=False)]
]
op824.group.device = cuda:0
op824.group.iteration = (61440, 256)
op824.sizes = ([80, 768], [256])
buf817_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
add_7_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf806_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf824_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op824_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 256*p0 + p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf817', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('add_7', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf805', get_index_2)
        sub = ops.sub(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf806', get_index_3)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        mul_1 = ops.mul(to_dtype, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf824', get_index_4, reduction)
        return None


op825: SchedulerNode(ComputedBuffer)
op825.writes = [MemoryDep('buf825', c0, {c0: 768})]
op825.unmet_dependencies = [MemoryDep('buf824', c0 + 768*c1, {c0: 768, c1: 80})]
op825.met_dependencies = []
op825.outputs = [
    buf825: ComputedBuffer
    buf825.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf825.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op825.group.device = cuda:0
op825.group.iteration = (768, 80)
op825.sizes = ([768], [80])
buf824_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf825_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op825_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf824', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf825', get_index_1, reduction)
        return None


op826: SchedulerNode(ComputedBuffer)
op826.writes = [MemoryDep('buf826', c0, {c0: 61440})]
op826.unmet_dependencies = [MemoryDep('buf817', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op826.met_dependencies = []
op826.outputs = [
    buf826: ComputedBuffer
    buf826.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf826.users = [NodeUser(node=SchedulerNode(name='op827'), can_inplace=False, is_weak=False)]
]
op826.group.device = cuda:0
op826.group.iteration = (61440, 256)
op826.sizes = ([80, 768], [256])
buf817_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf826_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op826_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf817', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf826', get_index_1, reduction)
        return None


op827: SchedulerNode(ComputedBuffer)
op827.writes = [MemoryDep('buf827', c0, {c0: 768})]
op827.unmet_dependencies = [MemoryDep('buf826', c0 + 768*c1, {c0: 768, c1: 80})]
op827.met_dependencies = []
op827.outputs = [
    buf827: ComputedBuffer
    buf827.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf827.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op827.group.device = cuda:0
op827.group.iteration = (768, 80)
op827.sizes = ([768], [80])
buf826_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf827_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op827_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf826', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf827', get_index_1, reduction)
        return None


op828: SchedulerNode(ComputedBuffer)
op828.writes = [MemoryDep('buf828', c0, {c0: 15728640})]
op828.unmet_dependencies = 
    [   MemoryDep('buf800', c0, {c0: 15728640}),
        MemoryDep('buf805', c0, {c0: 20480}),
        MemoryDep('buf806', c0, {c0: 20480}),
        MemoryDep('buf817', c0, {c0: 15728640}),
        MemoryDep('buf822', c0, {c0: 20480}),
        MemoryDep('buf823', c0, {c0: 20480})]
op828.met_dependencies = 
    [   MemoryDep('add_7', c0, {c0: 15728640}),
        MemoryDep('primals_11', c1, {c0: 20480, c1: 768})]
op828.outputs = [
    buf828: ComputedBuffer
    buf828.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf828.users = [
        NodeUser(node=SchedulerNode(name='op829'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op872'), can_inplace=True, is_weak=False),
    ]
]
op828.group.device = cuda:0
op828.group.iteration = (15728640, 1)
op828.sizes = ([20480, 768], [])
buf800_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf806_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf817_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_11_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf822_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
add_7_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf805_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf823_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf828_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op828_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p0
    index2 = p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf800', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf806', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf817', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('primals_11', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf822', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('add_7', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf805', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('buf806', get_index_7)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_7, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv_1, constant_5)
        rsqrt_1 = ops.rsqrt(add_1)
        mul_3 = ops.mul(sub_1, rsqrt_1)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('buf823', get_index_8)
        mul_4 = ops.mul(mul_3, load_8)
        sub_2 = ops.sub(sub, mul_4)
        mul_5 = ops.mul(mul, sub_2)
        add_2 = ops.add(load, mul_5)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf828', get_index_9, add_2, None)
        return store


op829: SchedulerNode(ComputedBuffer)
op829.writes = [MemoryDep('buf829', c0, {c0: 15728640})]
op829.unmet_dependencies = [   MemoryDep('buf828', c1 + 768*((c0//20)) + 786432*(ModularIndexing(c0, 1, 20)), {c0: 20480, c1: 768})]
op829.met_dependencies = []
op829.outputs = [
    buf829: ComputedBuffer
    buf829.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf829.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op831'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op849'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op850'), can_inplace=False, is_weak=False),
    ]
]
op829.group.device = cuda:0
op829.group.iteration = (15728640, 1)
op829.sizes = ([20480, 768], [])
buf828_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf829_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
class op829_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = p1 + 768*((p0//20)) + 786432*(ModularIndexing(p0, 1, 20))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf828', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf829', get_index_1, to_dtype, None)
        return store


op830: SchedulerNode(ComputedBuffer)
op830.writes = [MemoryDep('buf830', c0, {c0: 589824})]
op830.unmet_dependencies = []
op830.met_dependencies = [MemoryDep('primals_9', c0, {c0: 589824})]
op830.outputs = [
    buf830: ComputedBuffer
    buf830.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf830.users = [NodeUser(node=ExternKernelSchedulerNode(name='op831'), can_inplace=False, is_weak=False)]
]
op830.group.device = cuda:0
op830.group.iteration = (589824, 1)
op830.sizes = ([589824], [])
primals_9_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
buf830_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
class op830_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_9', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf830', get_index_1, to_dtype, None)
        return store


op831: ExternKernelSchedulerNode(ExternKernelOut)
op831.writes = [StarDep(name='buf831', mode=None)]
op831.unmet_dependencies = [StarDep(name='buf829', mode=None), StarDep(name='buf830', mode=None)]
op831.met_dependencies = []
op831.outputs = [
    buf831: ExternKernelOut
    buf831.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf831.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op831.node.kernel = extern_kernels.mm


op832: SchedulerNode(ComputedBuffer)
op832.writes = [MemoryDep('buf832', c0, {c0: 20480})]
op832.unmet_dependencies = []
op832.met_dependencies = 
    [   MemoryDep('mm', c0, {c0: 15728640}),
        MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op832.outputs = [
    buf832: ComputedBuffer
    buf832.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf832.users = [NodeUser(node=SchedulerNode(name='op835'), can_inplace=False, is_weak=False)]
]
op832.group.device = cuda:0
op832.group.iteration = (20480, 768)
op832.sizes = ([20, 1024], [768])
mm_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf832_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op832_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('mm', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf832', get_index_3, getitem)
        return store_reduction


op833: SchedulerNode(ComputedBuffer)
op833.writes = [MemoryDep('buf833', c0, {c0: 20480})]
op833.unmet_dependencies = []
op833.met_dependencies = 
    [   MemoryDep('mm', c0, {c0: 15728640}),
        MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op833.outputs = [
    buf833: ComputedBuffer
    buf833.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf833.users = [
        NodeUser(node=SchedulerNode(name='op835'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op872'), can_inplace=False, is_weak=False),
    ]
]
op833.group.device = cuda:0
op833.group.iteration = (20480, 768)
op833.sizes = ([20, 1024], [768])
mm_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf833_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op833_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('mm', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf833', get_index_3, getitem_1)
        return store_reduction


op835: SchedulerNode(ComputedBuffer)
op835.writes = [MemoryDep('buf835', c0, {c0: 15728640})]
op835.unmet_dependencies = [MemoryDep('buf832', c0, {c0: 20480}), MemoryDep('buf833', c0, {c0: 20480})]
op835.met_dependencies = 
    [   MemoryDep('mm', c0, {c0: 15728640}),
        MemoryDep('primals_3', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_4', c1, {c0: 20, c1: 786432})]
op835.outputs = [
    buf835: ComputedBuffer
    buf835.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf835.users = [
        NodeUser(node=SchedulerNode(name='op837'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op867'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op868'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op872'), can_inplace=True, is_weak=False),
    ]
]
op835.group.device = cuda:0
op835.group.iteration = (15728640, 1)
op835.sizes = ([20, 1024, 768], [])
mm_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_3_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_4_layout = FixedLayout('cuda:0', torch.float32, size=[1024, 768], stride=[768, 1])
buf832_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf833_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf835_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op835_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = p2
    index2 = 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('mm', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_3', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        to_dtype_1 = ops.to_dtype(add, torch.float32, src_dtype = torch.float16)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('primals_4', get_index_2)
        add_1 = ops.add(to_dtype_1, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf832', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf833', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf835', get_index_5, mul, None)
        return store


op836: SchedulerNode(ComputedBuffer)
op836.writes = [MemoryDep('buf836', c0, {c0: 1769472})]
op836.unmet_dependencies = []
op836.met_dependencies = [MemoryDep('primals_8', c0, {c0: 1769472})]
op836.outputs = [
    buf836: ComputedBuffer
    buf836.layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
    buf836.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op864'), can_inplace=False, is_weak=False),
    ]
]
op836.group.device = cuda:0
op836.group.iteration = (1769472, 1)
op836.sizes = ([1769472], [])
primals_8_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
buf836_layout = FixedLayout('cuda:0', torch.float16, size=[768, 2304], stride=[1, 768])
class op836_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('primals_8', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf836', get_index_1, to_dtype, None)
        return store


op837: SchedulerNode(ComputedBuffer)
op837.writes = [MemoryDep('buf837', c0, {c0: 15728640})]
op837.unmet_dependencies = [MemoryDep('buf835', 768*c0 + 786432*c1 + c2, {c0: 1024, c1: 20, c2: 768})]
op837.met_dependencies = 
    [   MemoryDep('primals_5', c1, {c0: 20480, c1: 768}),
        MemoryDep('primals_6', c1, {c0: 20480, c1: 768})]
op837.outputs = [
    buf837: ComputedBuffer
    buf837.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
    buf837.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op838'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op863'), can_inplace=False, is_weak=False),
    ]
]
op837.group.device = cuda:0
op837.group.iteration = (15728640, 1)
op837.sizes = ([1024, 20, 768], [])
buf835_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
primals_6_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf837_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 768], stride=[15360, 768, 1])
class op837_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 768*p0 + 786432*p1 + p2
    index1 = p2
    index2 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf835', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_5', get_index_1)
        mul = ops.mul(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('primals_6', get_index_2)
        add = ops.add(mul, load_2)
        to_dtype = ops.to_dtype(add, torch.float16, src_dtype = torch.float32)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf837', get_index_3, to_dtype, None)
        return store


op838: ExternKernelSchedulerNode(ExternKernelOut)
op838.writes = [StarDep(name='buf838', mode=None)]
op838.unmet_dependencies = [StarDep(name='buf836', mode=None), StarDep(name='buf837', mode=None)]
op838.met_dependencies = []
op838.outputs = [
    buf838: ExternKernelOut
    buf838.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
    buf838.users = [NodeUser(node=SchedulerNode(name='op839'), can_inplace=False, is_weak=False)]
]
op838.node.kernel = extern_kernels.mm


op839: SchedulerNode(ComputedBuffer)
op839.writes = [MemoryDep('buf839', c0, {c0: 47185920})]
op839.unmet_dependencies = [MemoryDep('buf838', 768*c0 + 2304*c1 + c2, {c0: 3, c1: 20480, c2: 768})]
op839.met_dependencies = [MemoryDep('primals_7', 768*c0 + c2, {c0: 3, c1: 20480, c2: 768})]
op839.outputs = [
    buf839: ComputedBuffer
    buf839.layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
    buf839.users = [
        NodeUser(node=SchedulerNode(name='op840'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op841'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op842'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op853'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op854'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op855'), can_inplace=False, is_weak=False),
    ]
]
op839.group.device = cuda:0
op839.group.iteration = (47185920, 1)
op839.sizes = ([3, 20480, 768], [])
buf838_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 2304], stride=[2304, 1])
primals_7_layout = FixedLayout('cuda:0', torch.float32, size=[2304], stride=[1])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
class op839_loop_body:
    var_ranges = {p0: 3, p1: 20480, p2: 768}
    index0 = 768*p0 + 2304*p1 + p2
    index1 = 768*p0 + p2
    index2 = 15728640*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf838', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_7', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float16, src_dtype = torch.float32)
        add = ops.add(load, to_dtype)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf839', get_index_2, add, None)
        return store


op840: SchedulerNode(ComputedBuffer)
op840.writes = [MemoryDep('buf840', c0, {c0: 15728640})]
op840.unmet_dependencies = [   MemoryDep('buf839', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op840.met_dependencies = []
op840.outputs = [
    buf840: ComputedBuffer
    buf840.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf840.users = [NodeUser(node=ExternKernelSchedulerNode(name='op843'), can_inplace=False, is_weak=False)]
]
op840.group.device = cuda:0
op840.group.iteration = (15728640, 1)
op840.sizes = ([1024, 20, 768], [])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf840_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op840_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf839', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf840', get_index_1, load, None)
        return store


op841: SchedulerNode(ComputedBuffer)
op841.writes = [MemoryDep('buf841', c0, {c0: 15728640})]
op841.unmet_dependencies = [   MemoryDep('buf839', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op841.met_dependencies = []
op841.outputs = [
    buf841: ComputedBuffer
    buf841.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf841.users = [NodeUser(node=ExternKernelSchedulerNode(name='op843'), can_inplace=False, is_weak=False)]
]
op841.group.device = cuda:0
op841.group.iteration = (15728640, 1)
op841.sizes = ([1024, 20, 768], [])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf841_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op841_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf839', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf841', get_index_1, load, None)
        return store


op842: SchedulerNode(ComputedBuffer)
op842.writes = [MemoryDep('buf842', c0, {c0: 15728640})]
op842.unmet_dependencies = [   MemoryDep('buf839', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op842.met_dependencies = []
op842.outputs = [
    buf842: ComputedBuffer
    buf842.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf842.users = [NodeUser(node=ExternKernelSchedulerNode(name='op843'), can_inplace=False, is_weak=False)]
]
op842.group.device = cuda:0
op842.group.iteration = (15728640, 1)
op842.sizes = ([1024, 20, 768], [])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf842_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op842_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf839', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf842', get_index_1, load, None)
        return store


op843: ExternKernelSchedulerNode(FallbackKernel)
op843.writes = [StarDep(name='buf843', mode=None)]
op843.unmet_dependencies = 
    [   StarDep(name='buf840', mode=None),
        StarDep(name='buf841', mode=None),
        StarDep(name='buf842', mode=None)]
op843.met_dependencies = [StarDep(name='bwd_rng_state_0', mode=None)]
op843.outputs = [
    buf843: FallbackKernel
    buf843.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf843.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op844'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op845'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op846'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op847'), can_inplace=False, is_weak=False),
    ]
]
op843.node.kernel = torch.ops.higher_order.graphsafe_run_with_rng_state


op844: ExternKernelSchedulerNode(MultiOutput)
op844.writes = [StarDep(name='buf844', mode=None)]
op844.unmet_dependencies = [StarDep(name='buf843', mode=None)]
op844.met_dependencies = []
op844.outputs = [
    buf844: MultiOutput
    buf844.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf844.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op849'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False),
    ]
]
op844.node.kernel = None


op845: ExternKernelSchedulerNode(MultiOutput)
op845.writes = [StarDep(name='buf845', mode=None)]
op845.unmet_dependencies = [StarDep(name='buf843', mode=None)]
op845.met_dependencies = []
op845.outputs = [
    buf845: MultiOutput
    buf845.layout = FixedLayout('cuda:0', torch.float32, size=[20, 8, 1024], stride=[8192, 1024, 1])
    buf845.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op845.node.kernel = None


op846: ExternKernelSchedulerNode(MultiOutput)
op846.writes = [StarDep(name='buf846', mode=None)]
op846.unmet_dependencies = [StarDep(name='buf843', mode=None)]
op846.met_dependencies = []
op846.outputs = [
    buf846: MultiOutput
    buf846.layout = FixedLayout('cuda:0', torch.uint64, size=[2], stride=[1])
    buf846.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op846.node.kernel = None


op847: ExternKernelSchedulerNode(MultiOutput)
op847.writes = [StarDep(name='buf847', mode=None)]
op847.unmet_dependencies = [StarDep(name='buf843', mode=None)]
op847.met_dependencies = []
op847.outputs = [
    buf847: MultiOutput
    buf847.layout = FixedLayout('cuda:0', torch.uint64, size=[], stride=[])
    buf847.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op847.node.kernel = None


op849: ExternKernelSchedulerNode(ExternKernelOut)
op849.writes = [StarDep(name='buf849', mode=None)]
op849.unmet_dependencies = [StarDep(name='buf829', mode=None), StarDep(name='buf844', mode=None)]
op849.met_dependencies = []
op849.outputs = [
    buf849: ExternKernelOut
    buf849.layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
    buf849.users = [NodeUser(node=SchedulerNode(name='op852'), can_inplace=True, is_weak=False)]
]
op849.node.kernel = extern_kernels.mm


op850: SchedulerNode(ComputedBuffer)
op850.writes = [MemoryDep('buf850', c0, {c0: 61440})]
op850.unmet_dependencies = [MemoryDep('buf829', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op850.met_dependencies = []
op850.outputs = [
    buf850: ComputedBuffer
    buf850.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
    buf850.users = [NodeUser(node=SchedulerNode(name='op851'), can_inplace=False, is_weak=False)]
]
op850.group.device = cuda:0
op850.group.iteration = (61440, 256)
op850.sizes = ([80, 768], [256])
buf829_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf850_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
class op850_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf829', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf850', get_index_1, reduction)
        return None


op851: SchedulerNode(ComputedBuffer)
op851.writes = [MemoryDep('buf851', c0, {c0: 768})]
op851.unmet_dependencies = [MemoryDep('buf850', c0 + 768*c1, {c0: 768, c1: 80})]
op851.met_dependencies = []
op851.outputs = [
    buf851: ComputedBuffer
    buf851.layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
    buf851.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op851.group.device = cuda:0
op851.group.iteration = (768, 80)
op851.sizes = ([768], [80])
buf850_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768, 80], stride=[61440, 1, 768])
buf851_layout = FixedLayout('cuda:0', torch.float32, size=[1, 768], stride=[768, 1])
class op851_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf850', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf851', get_index_1, reduction)
        return None


op852: SchedulerNode(ComputedBuffer)
op852.writes = [MemoryDep('buf852', c0, {c0: 589824})]
op852.unmet_dependencies = [MemoryDep('buf849', c0, {c0: 589824})]
op852.met_dependencies = []
op852.outputs = [
    buf852: ComputedBuffer
    buf852.layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
    buf852.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op852.group.device = cuda:0
op852.group.iteration = (589824, 1)
op852.sizes = ([589824], [])
buf849_layout = FixedLayout('cuda:0', torch.float16, size=[768, 768], stride=[768, 1])
buf852_layout = FixedLayout('cuda:0', torch.float32, size=[768, 768], stride=[768, 1])
class op852_loop_body:
    var_ranges = {p0: 589824}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf849', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf852', get_index_1, to_dtype, None)
        return store


op853: SchedulerNode(ComputedBuffer)
op853.writes = [MemoryDep('buf853', c0, {c0: 15728640})]
op853.unmet_dependencies = [   MemoryDep('buf839', 15360*c0 + c1 + 15360*((c1//15360)), {c0: 1024, c1: 15360})]
op853.met_dependencies = []
op853.outputs = [
    buf853: ComputedBuffer
    buf853.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf853.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op853.group.device = cuda:0
op853.group.iteration = (15728640, 1)
op853.sizes = ([1024, 20, 768], [])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf853_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op853_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360))
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf839', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf853', get_index_1, load, None)
        return store


op854: SchedulerNode(ComputedBuffer)
op854.writes = [MemoryDep('buf854', c0, {c0: 15728640})]
op854.unmet_dependencies = [   MemoryDep('buf839', 15360*c0 + c1 + 15360*((c1//15360)) + 15728640, {c0: 1024, c1: 15360})]
op854.met_dependencies = []
op854.outputs = [
    buf854: ComputedBuffer
    buf854.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf854.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op854.group.device = cuda:0
op854.group.iteration = (15728640, 1)
op854.sizes = ([1024, 20, 768], [])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf854_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op854_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 15728640
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf839', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf854', get_index_1, load, None)
        return store


op855: SchedulerNode(ComputedBuffer)
op855.writes = [MemoryDep('buf855', c0, {c0: 15728640})]
op855.unmet_dependencies = [   MemoryDep('buf839', 15360*c0 + c1 + 15360*((c1//15360)) + 31457280, {c0: 1024, c1: 15360})]
op855.met_dependencies = []
op855.outputs = [
    buf855: ComputedBuffer
    buf855.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf855.users = [NodeUser(node=ExternKernelSchedulerNode(name='op856'), can_inplace=False, is_weak=False)]
]
op855.group.device = cuda:0
op855.group.iteration = (15728640, 1)
op855.sizes = ([1024, 20, 768], [])
buf839_layout = FixedLayout('cuda:0', torch.float16, size=[3, 1024, 20, 768], stride=[15728640, 15360, 768, 1])
buf855_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
class op855_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 768}
    index0 = 15360*p0 + 768*p1 + p2 + 15360*(((768*p1 + p2)//15360)) + 31457280
    index1 = 15360*p0 + 768*p1 + p2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf839', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf855', get_index_1, load, None)
        return store


op856: ExternKernelSchedulerNode(FallbackKernel)
op856.writes = [StarDep(name='buf856', mode=None)]
op856.unmet_dependencies = 
    [   StarDep(name='buf831', mode=None),
        StarDep(name='buf844', mode=None),
        StarDep(name='buf845', mode=None),
        StarDep(name='buf846', mode=None),
        StarDep(name='buf847', mode=None),
        StarDep(name='buf853', mode=None),
        StarDep(name='buf854', mode=None),
        StarDep(name='buf855', mode=None)]
op856.met_dependencies = []
op856.outputs = [
    buf856: FallbackKernel
    buf856.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf856.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op857'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op858'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op859'), can_inplace=False, is_weak=False),
    ]
]
op856.node.kernel = torch.ops.aten._scaled_dot_product_flash_attention_backward.default


op857: ExternKernelSchedulerNode(MultiOutput)
op857.writes = [StarDep(name='buf857', mode=None)]
op857.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op857.met_dependencies = []
op857.outputs = [
    buf857: MultiOutput
    buf857.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf857.users = [
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op862'), can_inplace=False, is_weak=False),
    ]
]
op857.node.kernel = None


op858: ExternKernelSchedulerNode(MultiOutput)
op858.writes = [StarDep(name='buf858', mode=None)]
op858.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op858.met_dependencies = []
op858.outputs = [
    buf858: MultiOutput
    buf858.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf858.users = [
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op862'), can_inplace=False, is_weak=False),
    ]
]
op858.node.kernel = None


op859: ExternKernelSchedulerNode(MultiOutput)
op859.writes = [StarDep(name='buf859', mode=None)]
op859.unmet_dependencies = [StarDep(name='buf856', mode=None)]
op859.met_dependencies = []
op859.outputs = [
    buf859: MultiOutput
    buf859.layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
    buf859.users = [
        NodeUser(node=SchedulerNode(name='op860'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op862'), can_inplace=False, is_weak=False),
    ]
]
op859.node.kernel = None


op860: SchedulerNode(ComputedBuffer)
op860.writes = [MemoryDep('buf860', c0, {c0: 73728})]
op860.unmet_dependencies = 
    [   MemoryDep('buf857', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf858', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640}),
        MemoryDep('buf859', 491520*c0 + 768*c2 + 15360*((((ModularIndexing(c1, 1, 768)) + 768*(ModularIndexing(c2, 1, 20)))//15360)) + (ModularIndexing(c1, 1, 768)), {c0: 32, c1: 2304, c2: 640})]
op860.met_dependencies = []
op860.outputs = [
    buf860: ComputedBuffer
    buf860.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
    buf860.users = [NodeUser(node=SchedulerNode(name='op861'), can_inplace=False, is_weak=False)]
]
op860.group.device = cuda:0
op860.group.iteration = (73728, 640)
op860.sizes = ([32, 2304], [640])
buf859_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf858_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf857_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf860_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
class op860_loop_body:
    var_ranges = {p0: 32, p1: 2304, p2: 640}
    index0 = (p1//768)
    index1 = 491520*p0 + 768*p2 + 15360*((((ModularIndexing(p1, 1, 768)) + 768*(ModularIndexing(p2, 1, 20)))//15360)) + (ModularIndexing(p1, 1, 768))
    index2 = 2304*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf859', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf858', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf857', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        to_dtype = ops.to_dtype(add_1, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf860', get_index_6, reduction)
        return None


op861: SchedulerNode(ComputedBuffer)
op861.writes = [MemoryDep('buf861', c0, {c0: 2304})]
op861.unmet_dependencies = [MemoryDep('buf860', c0 + 2304*c1, {c0: 2304, c1: 32})]
op861.met_dependencies = []
op861.outputs = [
    buf861: ComputedBuffer
    buf861.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
    buf861.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op861.group.device = cuda:0
op861.group.iteration = (2304, 32)
op861.sizes = ([2304], [32])
buf860_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304, 32], stride=[73728, 73728, 1, 2304])
buf861_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 2304], stride=[2304, 2304, 1])
class op861_loop_body:
    var_ranges = {p0: 2304, p1: 32}
    index0 = p0 + 2304*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf860', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf861', get_index_1, reduction)
        return None


op862: SchedulerNode(ComputedBuffer)
op862.writes = [MemoryDep('buf862', c0, {c0: 47185920})]
op862.unmet_dependencies = 
    [   MemoryDep('buf857', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf858', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768}),
        MemoryDep('buf859', 15360*c0 + 768*c1 + c3 + 15360*(((768*c1 + c3)//15360)), {c0: 1024, c1: 20, c2: 3, c3: 768})]
op862.met_dependencies = []
op862.outputs = [
    buf862: ComputedBuffer
    buf862.layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
    buf862.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op863'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op864'), can_inplace=False, is_weak=False),
    ]
]
op862.group.device = cuda:0
op862.group.iteration = (47185920, 1)
op862.sizes = ([1024, 20, 3, 768], [])
buf859_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf858_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf857_layout = FixedLayout('cuda:0', torch.float16, size=[20, 8, 1024, 96], stride=[768, 96, 15360, 1])
buf862_layout = FixedLayout('cuda:0', torch.float16, size=[1024, 20, 3, 768], stride=[46080, 2304, 768, 1])
class op862_loop_body:
    var_ranges = {p0: 1024, p1: 20, p2: 3, p3: 768}
    index0 = p2
    index1 = 15360*p0 + 768*p1 + p3 + 15360*(((768*p1 + p3)//15360))
    index2 = 46080*p0 + 2304*p1 + 768*p2 + p3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(2, torch.int32)
        eq = ops.eq(index_expr, constant)
        get_index_1 = self.get_index('index1')
        load = ops.load('buf859', get_index_1)
        constant_1 = ops.constant(0.0, torch.float16)
        where = ops.where(eq, load, constant_1)
        get_index_2 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(1, torch.int32)
        eq_1 = ops.eq(index_expr_1, constant_2)
        get_index_3 = self.get_index('index1')
        load_1 = ops.load('buf858', get_index_3)
        constant_3 = ops.constant(0.0, torch.float16)
        where_1 = ops.where(eq_1, load_1, constant_3)
        add = ops.add(where, where_1)
        get_index_4 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_4, torch.int32)
        constant_4 = ops.constant(0, torch.int32)
        eq_2 = ops.eq(index_expr_2, constant_4)
        get_index_5 = self.get_index('index1')
        load_2 = ops.load('buf857', get_index_5)
        constant_5 = ops.constant(0.0, torch.float16)
        where_2 = ops.where(eq_2, load_2, constant_5)
        add_1 = ops.add(add, where_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf862', get_index_6, add_1, None)
        return store


op863: ExternKernelSchedulerNode(ExternKernelOut)
op863.writes = [StarDep(name='buf863', mode=None)]
op863.unmet_dependencies = [StarDep(name='buf837', mode=None), StarDep(name='buf862', mode=None)]
op863.met_dependencies = []
op863.outputs = [
    buf863: ExternKernelOut
    buf863.layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
    buf863.users = [NodeUser(node=SchedulerNode(name='op865'), can_inplace=True, is_weak=False)]
]
op863.node.kernel = extern_kernels.mm


op864: ExternKernelSchedulerNode(ExternKernelOut)
op864.writes = [StarDep(name='buf864', mode=None)]
op864.unmet_dependencies = [StarDep(name='buf836', mode=None), StarDep(name='buf862', mode=None)]
op864.met_dependencies = []
op864.outputs = [
    buf864: ExternKernelOut
    buf864.layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
    buf864.users = [
        NodeUser(node=SchedulerNode(name='op866'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op867'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op868'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op870'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op872'), can_inplace=False, is_weak=False),
    ]
]
op864.node.kernel = extern_kernels.mm


op865: SchedulerNode(ComputedBuffer)
op865.writes = [MemoryDep('buf865', c0, {c0: 1769472})]
op865.unmet_dependencies = [MemoryDep('buf863', c0, {c0: 1769472})]
op865.met_dependencies = []
op865.outputs = [
    buf865: ComputedBuffer
    buf865.layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
    buf865.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op865.group.device = cuda:0
op865.group.iteration = (1769472, 1)
op865.sizes = ([1769472], [])
buf863_layout = FixedLayout('cuda:0', torch.float16, size=[2304, 768], stride=[768, 1])
buf865_layout = FixedLayout('cuda:0', torch.float32, size=[2304, 768], stride=[768, 1])
class op865_loop_body:
    var_ranges = {p0: 1769472}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf863', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf865', get_index_1, to_dtype, None)
        return store


op866: SchedulerNode(ComputedBuffer)
op866.writes = [MemoryDep('buf866', c0, {c0: 20480})]
op866.unmet_dependencies = [MemoryDep('buf864', c0, {c0: 15728640})]
op866.met_dependencies = [MemoryDep('primals_5', c1, {c0: 20480, c1: 768})]
op866.outputs = [
    buf866: ComputedBuffer
    buf866.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
    buf866.users = [NodeUser(node=SchedulerNode(name='op872'), can_inplace=False, is_weak=False)]
]
op866.group.device = cuda:0
op866.group.iteration = (20480, 768)
op866.sizes = ([20480], [768])
buf864_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf866_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
class op866_loop_body:
    var_ranges = {p0: 20480, p1: 768}
    index0 = 768*p0 + p1
    index1 = p1
    index2 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf864', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_5', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf866', get_index_2, reduction)
        return None


op867: SchedulerNode(ComputedBuffer)
op867.writes = [MemoryDep('buf867', c0, {c0: 20480})]
op867.unmet_dependencies = 
    [   MemoryDep('buf835', c0, {c0: 15728640}),
        MemoryDep('buf864', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768})]
op867.met_dependencies = [MemoryDep('primals_5', c1, {c0: 20480, c1: 768})]
op867.outputs = [
    buf867: ComputedBuffer
    buf867.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
    buf867.users = [NodeUser(node=SchedulerNode(name='op872'), can_inplace=False, is_weak=False)]
]
op867.group.device = cuda:0
op867.group.iteration = (20480, 768)
op867.sizes = ([20, 1024], [768])
buf864_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf835_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf867_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
class op867_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 768*p0 + 15360*p1 + p2
    index1 = p2
    index2 = 786432*p0 + 768*p1 + p2
    index3 = 1024*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf864', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_5', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf835', get_index_2)
        mul_1 = ops.mul(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf867', get_index_3, reduction)
        return None


op868: SchedulerNode(ComputedBuffer)
op868.writes = [MemoryDep('buf868', c0, {c0: 61440})]
op868.unmet_dependencies = 
    [   MemoryDep('buf835', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256}),
        MemoryDep('buf864', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op868.met_dependencies = []
op868.outputs = [
    buf868: ComputedBuffer
    buf868.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf868.users = [NodeUser(node=SchedulerNode(name='op869'), can_inplace=False, is_weak=False)]
]
op868.group.device = cuda:0
op868.group.iteration = (61440, 256)
op868.sizes = ([80, 768], [256])
buf864_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf835_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf868_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op868_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 196608*p0 + p1 + 768*p2
    index2 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf864', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf835', get_index_1)
        mul = ops.mul(to_dtype, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf868', get_index_2, reduction)
        return None


op869: SchedulerNode(ComputedBuffer)
op869.writes = [MemoryDep('buf869', c0, {c0: 768})]
op869.unmet_dependencies = [MemoryDep('buf868', c0 + 768*c1, {c0: 768, c1: 80})]
op869.met_dependencies = []
op869.outputs = [
    buf869: ComputedBuffer
    buf869.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf869.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op869.group.device = cuda:0
op869.group.iteration = (768, 80)
op869.sizes = ([768], [80])
buf868_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf869_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op869_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf868', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf869', get_index_1, reduction)
        return None


op870: SchedulerNode(ComputedBuffer)
op870.writes = [MemoryDep('buf870', c0, {c0: 61440})]
op870.unmet_dependencies = [   MemoryDep('buf864', c1 + 768*(((256*c0 + c2)//1024)) + 15360*(ModularIndexing(256*c0 + c2, 1, 1024)), {c0: 80, c1: 768, c2: 256})]
op870.met_dependencies = []
op870.outputs = [
    buf870: ComputedBuffer
    buf870.layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
    buf870.users = [NodeUser(node=SchedulerNode(name='op871'), can_inplace=False, is_weak=False)]
]
op870.group.device = cuda:0
op870.group.iteration = (61440, 256)
op870.sizes = ([80, 768], [256])
buf864_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
buf870_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
class op870_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = p1 + 768*(((256*p0 + p2)//1024)) + 15360*(ModularIndexing(256*p0 + p2, 1, 1024))
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf864', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf870', get_index_1, reduction)
        return None


op871: SchedulerNode(ComputedBuffer)
op871.writes = [MemoryDep('buf871', c0, {c0: 768})]
op871.unmet_dependencies = [MemoryDep('buf870', c0 + 768*c1, {c0: 768, c1: 80})]
op871.met_dependencies = []
op871.outputs = [
    buf871: ComputedBuffer
    buf871.layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
    buf871.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op871.group.device = cuda:0
op871.group.iteration = (768, 80)
op871.sizes = ([768], [80])
buf870_layout = FixedLayout('cuda:0', torch.float32, size=[768, 80], stride=[1, 768])
buf871_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
class op871_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf870', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf871', get_index_1, reduction)
        return None


op872: SchedulerNode(ComputedBuffer)
op872.writes = [MemoryDep('buf872', c0, {c0: 15728640})]
op872.unmet_dependencies = 
    [   MemoryDep('buf828', c0, {c0: 15728640}),
        MemoryDep('buf833', c0, {c0: 20480}),
        MemoryDep('buf835', c0, {c0: 15728640}),
        MemoryDep('buf864', 768*c0 + 15360*c1 + c2, {c0: 20, c1: 1024, c2: 768}),
        MemoryDep('buf866', c0 + 20*c1, {c0: 20, c1: 1024}),
        MemoryDep('buf867', c0, {c0: 20480})]
op872.met_dependencies = [MemoryDep('primals_5', c1, {c0: 20480, c1: 768})]
op872.outputs = [
    buf872: ComputedBuffer
    buf872.layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf872.users = [
        NodeUser(node=SchedulerNode(name='op873'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op874'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op876'), can_inplace=True, is_weak=False),
    ]
]
op872.group.device = cuda:0
op872.group.iteration = (15728640, 1)
op872.sizes = ([20, 1024, 768], [])
buf828_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf833_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf864_layout = FixedLayout('cuda:0', torch.float16, size=[20480, 768], stride=[768, 1])
primals_5_layout = FixedLayout('cuda:0', torch.float32, size=[768], stride=[1])
buf866_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1, 20, 20480])
buf835_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf867_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 1], stride=[1024, 1, 20480])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
class op872_loop_body:
    var_ranges = {p0: 20, p1: 1024, p2: 768}
    index0 = 786432*p0 + 768*p1 + p2
    index1 = 1024*p0 + p1
    index2 = 768*p0 + 15360*p1 + p2
    index3 = p2
    index4 = p0 + 20*p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf828', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf833', get_index_1)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_1, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        constant_2 = ops.constant(0.0013020833333333333, torch.float32)
        mul = ops.mul(rsqrt, constant_2)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf864', get_index_2)
        to_dtype = ops.to_dtype(load_2, torch.float32, src_dtype = torch.float16)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('primals_5', get_index_3)
        mul_1 = ops.mul(to_dtype, load_3)
        constant_3 = ops.constant(768.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf866', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf835', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('buf867', get_index_6)
        mul_3 = ops.mul(load_5, load_6)
        sub_1 = ops.sub(sub, mul_3)
        mul_4 = ops.mul(mul, sub_1)
        add_1 = ops.add(load, mul_4)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf872', get_index_7, add_1, None)
        return store


op873: SchedulerNode(ComputedBuffer)
op873.writes = [MemoryDep('buf873', c0, {c0: 786432})]
op873.unmet_dependencies = [MemoryDep('buf872', c0 + 786432*c1, {c0: 786432, c1: 20})]
op873.met_dependencies = []
op873.outputs = [
    buf873: ComputedBuffer
    buf873.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1024, 768], stride=[786432, 768, 1])
    buf873.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op873.group.device = cuda:0
op873.group.iteration = (786432, 20)
op873.sizes = ([786432], [20])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf873_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1024, 768], stride=[786432, 768, 1])
class op873_loop_body:
    var_ranges = {p0: 786432, p1: 20}
    index0 = p0 + 786432*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf873', get_index_1, reduction)
        return None


op874: SchedulerNode(ComputedBuffer)
op874.writes = [MemoryDep('buf874', c0, {c0: 61440})]
op874.unmet_dependencies = [MemoryDep('buf872', 196608*c0 + c1 + 768*c2, {c0: 80, c1: 768, c2: 256})]
op874.met_dependencies = []
op874.outputs = [
    buf874: ComputedBuffer
    buf874.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 768, 80], stride=[61440, 61440, 1, 768])
    buf874.users = [NodeUser(node=SchedulerNode(name='op875'), can_inplace=False, is_weak=False)]
]
op874.group.device = cuda:0
op874.group.iteration = (61440, 256)
op874.sizes = ([80, 768], [256])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf874_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 768, 80], stride=[61440, 61440, 1, 768])
class op874_loop_body:
    var_ranges = {p0: 80, p1: 768, p2: 256}
    index0 = 196608*p0 + p1 + 768*p2
    index1 = 768*p0 + p1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.float32, src_dtype = torch.float16)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf874', get_index_1, reduction)
        return None


op875: SchedulerNode(ComputedBuffer)
op875.writes = [MemoryDep('buf875', c0, {c0: 768})]
op875.unmet_dependencies = [MemoryDep('buf874', c0 + 768*c1, {c0: 768, c1: 80})]
op875.met_dependencies = []
op875.outputs = [
    buf875: ComputedBuffer
    buf875.layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
    buf875.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op875.group.device = cuda:0
op875.group.iteration = (768, 80)
op875.sizes = ([768], [80])
buf874_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 768, 80], stride=[61440, 61440, 1, 768])
buf875_layout = FixedLayout('cuda:0', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
class op875_loop_body:
    var_ranges = {p0: 768, p1: 80}
    index0 = p0 + 768*p1
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf874', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf875', get_index_1, reduction)
        return None


op876: SchedulerNode(ComputedBuffer)
op876.writes = [MemoryDep('buf876', c0, {c0: 15728640})]
op876.unmet_dependencies = [MemoryDep('buf872', c0, {c0: 15728640})]
op876.met_dependencies = []
op876.outputs = [
    buf876: ComputedBuffer
    buf876.layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
    buf876.users = [NodeUser(node=ExternKernelSchedulerNode(name='op877'), can_inplace=False, is_weak=False)]
]
op876.group.device = cuda:0
op876.group.iteration = (15728640, 1)
op876.sizes = ([15728640], [])
buf872_layout = FixedLayout('cuda:0', torch.float32, size=[20, 1024, 768], stride=[786432, 768, 1])
buf876_layout = FixedLayout('cuda:0', torch.float16, size=[20, 1024, 768], stride=[786432, 768, 1])
class op876_loop_body:
    var_ranges = {p0: 15728640}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf872', get_index)
        to_dtype = ops.to_dtype(load, torch.float16, src_dtype = torch.float32)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf876', get_index_1, to_dtype, None)
        return store


op877: ExternKernelSchedulerNode(ExternKernelOut)
op877.writes = [StarDep(name='buf877', mode=None)]
op877.unmet_dependencies = [StarDep(name='buf876', mode=None)]
op877.met_dependencies = [StarDep(name='view_1', mode=None)]
op877.outputs = [
    buf877: ExternKernelOut
    buf877.layout = FixedLayout('cuda:0', torch.float16, size=[768, 16], stride=[16, 1])
    buf877.users = [NodeUser(node=SchedulerNode(name='op878'), can_inplace=True, is_weak=False)]
]
op877.node.kernel = extern_kernels.mm


op878: SchedulerNode(ComputedBuffer)
op878.writes = [MemoryDep('buf878', c0, {c0: 12288})]
op878.unmet_dependencies = [MemoryDep('buf877', c0, {c0: 12288})]
op878.met_dependencies = []
op878.outputs = [
    buf878: ComputedBuffer
    buf878.layout = FixedLayout('cuda:0', torch.float32, size=[768, 16], stride=[16, 1])
    buf878.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op878.group.device = cuda:0
op878.group.iteration = (12288, 1)
op878.sizes = ([12288], [])
buf877_layout = FixedLayout('cuda:0', torch.float16, size=[768, 16], stride=[16, 1])
buf878_layout = FixedLayout('cuda:0', torch.float32, size=[768, 16], stride=[16, 1])
class op878_loop_body:
    var_ranges = {p0: 12288}
    index0 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf877', get_index)
        to_dtype = ops.to_dtype(load, torch.float32, src_dtype = torch.float16)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf878', get_index_1, to_dtype, None)
        return store



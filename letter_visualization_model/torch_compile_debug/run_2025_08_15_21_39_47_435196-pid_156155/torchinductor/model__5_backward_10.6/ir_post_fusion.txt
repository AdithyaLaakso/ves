op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 9216})]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('primals_1', c0, {c0: 9216}), MemoryDep('tangents_1', 0, {})]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda:0', torch.float32, size=[9, 1, 32, 32], stride=[1024, 1024, 32, 1])
    buf0.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (9216, 1)
op0.sizes = ([9216], [])
tangents_1_layout = FixedLayout('cuda:0', torch.float32, size=[], stride=[])
primals_1_layout = FixedLayout('cuda:0', torch.float32, size=[9, 1, 32, 32], stride=[1024, 1024, 32, 1])
buf0_layout = FixedLayout('cuda:0', torch.float32, size=[9, 1, 32, 32], stride=[1024, 1024, 32, 1])
class op0_loop_body:
    var_ranges = {p0: 9216}
    index0 = 0
    index1 = p0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('tangents_1', get_index)
        constant = ops.constant(0.00010850694444444444, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('primals_1', get_index_1)
        mul_1 = ops.mul(mul, load_1)
        get_index_2 = self.get_index('index1')
        store = ops.store('buf0', get_index_2, mul_1, None)
        return store


